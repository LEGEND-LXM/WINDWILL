
WINDWILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f18  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e4  080070e4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080070e4  080070e4  000170e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070ec  080070ec  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080070f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000abe8  2000006c  08007160  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000ac54  08007160  0002ac54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c14  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ddb  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f70  00000000  00000000  00035a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  00036a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023eff  00000000  00000000  000377e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011e4f  00000000  00000000  0005b6e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5c1e  00000000  00000000  0006d536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00143154  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dbc  00000000  00000000  001431a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080070ac 	.word	0x080070ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000070 	.word	0x20000070
 80001e8:	080070ac 	.word	0x080070ac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80004e8:	4b17      	ldr	r3, [pc, #92]	; (8000548 <MX_CAN1_Init+0x64>)
 80004ea:	4a18      	ldr	r2, [pc, #96]	; (800054c <MX_CAN1_Init+0x68>)
 80004ec:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80004ee:	4b16      	ldr	r3, [pc, #88]	; (8000548 <MX_CAN1_Init+0x64>)
 80004f0:	2203      	movs	r2, #3
 80004f2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004f4:	4b14      	ldr	r3, [pc, #80]	; (8000548 <MX_CAN1_Init+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004fa:	4b13      	ldr	r3, [pc, #76]	; (8000548 <MX_CAN1_Init+0x64>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <MX_CAN1_Init+0x64>)
 8000502:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000506:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <MX_CAN1_Init+0x64>)
 800050a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 800050e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000510:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MX_CAN1_Init+0x64>)
 8000512:	2200      	movs	r2, #0
 8000514:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000516:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <MX_CAN1_Init+0x64>)
 8000518:	2201      	movs	r2, #1
 800051a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800051c:	4b0a      	ldr	r3, [pc, #40]	; (8000548 <MX_CAN1_Init+0x64>)
 800051e:	2200      	movs	r2, #0
 8000520:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000522:	4b09      	ldr	r3, [pc, #36]	; (8000548 <MX_CAN1_Init+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <MX_CAN1_Init+0x64>)
 800052a:	2200      	movs	r2, #0
 800052c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800052e:	4b06      	ldr	r3, [pc, #24]	; (8000548 <MX_CAN1_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000534:	4804      	ldr	r0, [pc, #16]	; (8000548 <MX_CAN1_Init+0x64>)
 8000536:	f001 f997 	bl	8001868 <HAL_CAN_Init>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000540:	f000 fadc 	bl	8000afc <Error_Handler>
  }

}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2000a7fc 	.word	0x2000a7fc
 800054c:	40006400 	.word	0x40006400

08000550 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
 8000560:	605a      	str	r2, [r3, #4]
 8000562:	609a      	str	r2, [r3, #8]
 8000564:	60da      	str	r2, [r3, #12]
 8000566:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a21      	ldr	r2, [pc, #132]	; (80005f4 <HAL_CAN_MspInit+0xa4>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d13b      	bne.n	80005ea <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000572:	2300      	movs	r3, #0
 8000574:	613b      	str	r3, [r7, #16]
 8000576:	4b20      	ldr	r3, [pc, #128]	; (80005f8 <HAL_CAN_MspInit+0xa8>)
 8000578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057a:	4a1f      	ldr	r2, [pc, #124]	; (80005f8 <HAL_CAN_MspInit+0xa8>)
 800057c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000580:	6413      	str	r3, [r2, #64]	; 0x40
 8000582:	4b1d      	ldr	r3, [pc, #116]	; (80005f8 <HAL_CAN_MspInit+0xa8>)
 8000584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800058a:	613b      	str	r3, [r7, #16]
 800058c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800058e:	2300      	movs	r3, #0
 8000590:	60fb      	str	r3, [r7, #12]
 8000592:	4b19      	ldr	r3, [pc, #100]	; (80005f8 <HAL_CAN_MspInit+0xa8>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	4a18      	ldr	r2, [pc, #96]	; (80005f8 <HAL_CAN_MspInit+0xa8>)
 8000598:	f043 0308 	orr.w	r3, r3, #8
 800059c:	6313      	str	r3, [r2, #48]	; 0x30
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <HAL_CAN_MspInit+0xa8>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	f003 0308 	and.w	r3, r3, #8
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005aa:	2303      	movs	r3, #3
 80005ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005ba:	2309      	movs	r3, #9
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4619      	mov	r1, r3
 80005c4:	480d      	ldr	r0, [pc, #52]	; (80005fc <HAL_CAN_MspInit+0xac>)
 80005c6:	f002 fc55 	bl	8002e74 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2100      	movs	r1, #0
 80005ce:	2013      	movs	r0, #19
 80005d0:	f002 f887 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80005d4:	2013      	movs	r0, #19
 80005d6:	f002 f8a0 	bl	800271a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	2014      	movs	r0, #20
 80005e0:	f002 f87f 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005e4:	2014      	movs	r0, #20
 80005e6:	f002 f898 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005ea:	bf00      	nop
 80005ec:	3728      	adds	r7, #40	; 0x28
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40006400 	.word	0x40006400
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020c00 	.word	0x40020c00

08000600 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	4b24      	ldr	r3, [pc, #144]	; (800069c <MX_DMA_Init+0x9c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a23      	ldr	r2, [pc, #140]	; (800069c <MX_DMA_Init+0x9c>)
 8000610:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_DMA_Init+0x9c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800061e:	607b      	str	r3, [r7, #4]
 8000620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2039      	movs	r0, #57	; 0x39
 8000628:	f002 f85b 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800062c:	2039      	movs	r0, #57	; 0x39
 800062e:	f002 f874 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000632:	2200      	movs	r2, #0
 8000634:	2100      	movs	r1, #0
 8000636:	203a      	movs	r0, #58	; 0x3a
 8000638:	f002 f853 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800063c:	203a      	movs	r0, #58	; 0x3a
 800063e:	f002 f86c 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8000642:	2200      	movs	r2, #0
 8000644:	2100      	movs	r1, #0
 8000646:	203b      	movs	r0, #59	; 0x3b
 8000648:	f002 f84b 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800064c:	203b      	movs	r0, #59	; 0x3b
 800064e:	f002 f864 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8000652:	2200      	movs	r2, #0
 8000654:	2100      	movs	r1, #0
 8000656:	203c      	movs	r0, #60	; 0x3c
 8000658:	f002 f843 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800065c:	203c      	movs	r0, #60	; 0x3c
 800065e:	f002 f85c 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 8000662:	2200      	movs	r2, #0
 8000664:	2100      	movs	r1, #0
 8000666:	2044      	movs	r0, #68	; 0x44
 8000668:	f002 f83b 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800066c:	2044      	movs	r0, #68	; 0x44
 800066e:	f002 f854 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8000672:	2200      	movs	r2, #0
 8000674:	2100      	movs	r1, #0
 8000676:	2045      	movs	r0, #69	; 0x45
 8000678:	f002 f833 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800067c:	2045      	movs	r0, #69	; 0x45
 800067e:	f002 f84c 	bl	800271a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000682:	2200      	movs	r2, #0
 8000684:	2100      	movs	r1, #0
 8000686:	2046      	movs	r0, #70	; 0x46
 8000688:	f002 f82b 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800068c:	2046      	movs	r0, #70	; 0x46
 800068e:	f002 f844 	bl	800271a <HAL_NVIC_EnableIRQ>

}
 8000692:	bf00      	nop
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800

080006a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08e      	sub	sp, #56	; 0x38
 80006a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	623b      	str	r3, [r7, #32]
 80006ba:	4b8e      	ldr	r3, [pc, #568]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a8d      	ldr	r2, [pc, #564]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b8b      	ldr	r3, [pc, #556]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	623b      	str	r3, [r7, #32]
 80006d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
 80006d6:	4b87      	ldr	r3, [pc, #540]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a86      	ldr	r2, [pc, #536]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b84      	ldr	r3, [pc, #528]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	61fb      	str	r3, [r7, #28]
 80006ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
 80006f2:	4b80      	ldr	r3, [pc, #512]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a7f      	ldr	r2, [pc, #508]	; (80008f4 <MX_GPIO_Init+0x254>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b7d      	ldr	r3, [pc, #500]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	61bb      	str	r3, [r7, #24]
 8000708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	4b79      	ldr	r3, [pc, #484]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a78      	ldr	r2, [pc, #480]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000714:	f043 0308 	orr.w	r3, r3, #8
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b76      	ldr	r3, [pc, #472]	; (80008f4 <MX_GPIO_Init+0x254>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f003 0308 	and.w	r3, r3, #8
 8000722:	617b      	str	r3, [r7, #20]
 8000724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
 800072a:	4b72      	ldr	r3, [pc, #456]	; (80008f4 <MX_GPIO_Init+0x254>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	4a71      	ldr	r2, [pc, #452]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000734:	6313      	str	r3, [r2, #48]	; 0x30
 8000736:	4b6f      	ldr	r3, [pc, #444]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800073e:	613b      	str	r3, [r7, #16]
 8000740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	4b6b      	ldr	r3, [pc, #428]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	4a6a      	ldr	r2, [pc, #424]	; (80008f4 <MX_GPIO_Init+0x254>)
 800074c:	f043 0320 	orr.w	r3, r3, #32
 8000750:	6313      	str	r3, [r2, #48]	; 0x30
 8000752:	4b68      	ldr	r3, [pc, #416]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	f003 0320 	and.w	r3, r3, #32
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	4b64      	ldr	r3, [pc, #400]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a63      	ldr	r2, [pc, #396]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000768:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b61      	ldr	r3, [pc, #388]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	607b      	str	r3, [r7, #4]
 800077e:	4b5d      	ldr	r3, [pc, #372]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a5c      	ldr	r2, [pc, #368]	; (80008f4 <MX_GPIO_Init+0x254>)
 8000784:	f043 0304 	orr.w	r3, r3, #4
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b5a      	ldr	r3, [pc, #360]	; (80008f4 <MX_GPIO_Init+0x254>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0304 	and.w	r3, r3, #4
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin|Windwill_Middle_4_Pin|Windwill_Middle_1_Pin|Windwill_Middle_3_Pin, GPIO_PIN_RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2133      	movs	r1, #51	; 0x33
 800079a:	4857      	ldr	r0, [pc, #348]	; (80008f8 <MX_GPIO_Init+0x258>)
 800079c:	f002 fd16 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Windwill_Middle_None_Pin|Windwill_Middle_5_Pin, GPIO_PIN_RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2130      	movs	r1, #48	; 0x30
 80007a4:	4855      	ldr	r0, [pc, #340]	; (80008fc <MX_GPIO_Init+0x25c>)
 80007a6:	f002 fd11 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007b0:	4853      	ldr	r0, [pc, #332]	; (8000900 <MX_GPIO_Init+0x260>)
 80007b2:	f002 fd0b 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007bc:	4851      	ldr	r0, [pc, #324]	; (8000904 <MX_GPIO_Init+0x264>)
 80007be:	f002 fd05 	bl	80031cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = windwill_4_Pin|windwill_3_Pin|windwill_5_Pin;
 80007c2:	2370      	movs	r3, #112	; 0x70
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c6:	4b50      	ldr	r3, [pc, #320]	; (8000908 <MX_GPIO_Init+0x268>)
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	484a      	ldr	r0, [pc, #296]	; (8000900 <MX_GPIO_Init+0x260>)
 80007d6:	f002 fb4d 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = windwill_2_Pin|windwill_1_Pin;
 80007da:	2303      	movs	r3, #3
 80007dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007de:	4b4a      	ldr	r3, [pc, #296]	; (8000908 <MX_GPIO_Init+0x268>)
 80007e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	4619      	mov	r1, r3
 80007ec:	4845      	ldr	r0, [pc, #276]	; (8000904 <MX_GPIO_Init+0x264>)
 80007ee:	f002 fb41 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Windwill_Middle_2_Pin|Windwill_Middle_4_Pin|Windwill_Middle_3_Pin;
 80007f2:	2323      	movs	r3, #35	; 0x23
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f6:	2301      	movs	r3, #1
 80007f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	483b      	ldr	r0, [pc, #236]	; (80008f8 <MX_GPIO_Init+0x258>)
 800080a:	f002 fb33 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Lineup_Switch_Pin;
 800080e:	2304      	movs	r3, #4
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000812:	4b3e      	ldr	r3, [pc, #248]	; (800090c <MX_GPIO_Init+0x26c>)
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000816:	2302      	movs	r3, #2
 8000818:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Lineup_Switch_GPIO_Port, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	483b      	ldr	r0, [pc, #236]	; (8000910 <MX_GPIO_Init+0x270>)
 8000822:	f002 fb27 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Windwill_Middle_None_Pin|Windwill_Middle_5_Pin;
 8000826:	2330      	movs	r3, #48	; 0x30
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	482f      	ldr	r0, [pc, #188]	; (80008fc <MX_GPIO_Init+0x25c>)
 800083e:	f002 fb19 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Windwill_Middle_1_Pin;
 8000842:	2310      	movs	r3, #16
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084a:	2302      	movs	r3, #2
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Windwill_Middle_1_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4827      	ldr	r0, [pc, #156]	; (80008f8 <MX_GPIO_Init+0x258>)
 800085a:	f002 fb0b 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800085e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	4822      	ldr	r0, [pc, #136]	; (8000900 <MX_GPIO_Init+0x260>)
 8000878:	f002 fafc 	bl	8002e74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 800087c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000882:	2301      	movs	r3, #1
 8000884:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088a:	2300      	movs	r3, #0
 800088c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	481b      	ldr	r0, [pc, #108]	; (8000904 <MX_GPIO_Init+0x264>)
 8000896:	f002 faed 	bl	8002e74 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 800089a:	2200      	movs	r2, #0
 800089c:	2101      	movs	r1, #1
 800089e:	2006      	movs	r0, #6
 80008a0:	f001 ff1f 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008a4:	2006      	movs	r0, #6
 80008a6:	f001 ff38 	bl	800271a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80008aa:	2200      	movs	r2, #0
 80008ac:	2101      	movs	r1, #1
 80008ae:	2007      	movs	r0, #7
 80008b0:	f001 ff17 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80008b4:	2007      	movs	r0, #7
 80008b6:	f001 ff30 	bl	800271a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 80008ba:	2200      	movs	r2, #0
 80008bc:	2101      	movs	r1, #1
 80008be:	2008      	movs	r0, #8
 80008c0:	f001 ff0f 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008c4:	2008      	movs	r0, #8
 80008c6:	f001 ff28 	bl	800271a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2101      	movs	r1, #1
 80008ce:	200a      	movs	r0, #10
 80008d0:	f001 ff07 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80008d4:	200a      	movs	r0, #10
 80008d6:	f001 ff20 	bl	800271a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 80008da:	2200      	movs	r2, #0
 80008dc:	2101      	movs	r1, #1
 80008de:	2017      	movs	r0, #23
 80008e0:	f001 feff 	bl	80026e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008e4:	2017      	movs	r0, #23
 80008e6:	f001 ff18 	bl	800271a <HAL_NVIC_EnableIRQ>

}
 80008ea:	bf00      	nop
 80008ec:	3738      	adds	r7, #56	; 0x38
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020800 	.word	0x40020800
 80008fc:	40020000 	.word	0x40020000
 8000900:	40021000 	.word	0x40021000
 8000904:	40021400 	.word	0x40021400
 8000908:	10210000 	.word	0x10210000
 800090c:	10110000 	.word	0x10110000
 8000910:	40020400 	.word	0x40020400

08000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091a:	f000 ff0f 	bl	800173c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800091e:	f000 f883 	bl	8000a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000922:	f7ff febd 	bl	80006a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000926:	f7ff fe6b 	bl	8000600 <MX_DMA_Init>
  MX_TIM1_Init();
 800092a:	f000 f9ef 	bl	8000d0c <MX_TIM1_Init>
  MX_TIM8_Init();
 800092e:	f000 faf3 	bl	8000f18 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000932:	f000 fdf7 	bl	8001524 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000936:	f7ff fdd5 	bl	80004e4 <MX_CAN1_Init>
  MX_UART8_Init();
 800093a:	f000 fdc9 	bl	80014d0 <MX_UART8_Init>
  MX_TIM2_Init();
 800093e:	f000 fa9d 	bl	8000e7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  LC_Pwm_Init();						// 定时器PWM通道打开
 8000942:	f005 fb0d 	bl	8005f60 <LC_Pwm_Init>


//  GPIO_State_Init();					// 继电器初始化


  LC_Ws2812_Init();						// RGB相关初始�??
 8000946:	f005 fbe9 	bl	800611c <LC_Ws2812_Init>

  ws2812_lamp_strip_Init();				// 灯条初始�?
 800094a:	f005 fbf5 	bl	8006138 <ws2812_lamp_strip_Init>

  LC_TimInterrupt_Init();				// 定时器中断初始化
 800094e:	f005 fb27 	bl	8005fa0 <LC_TimInterrupt_Init>

  ws2812_lamp_strip_Init();				// 灯条初始�?
 8000952:	f005 fbf1 	bl	8006138 <ws2812_lamp_strip_Init>

  can_user_init(&hcan1);             	// CAN用户初始�??????
 8000956:	482a      	ldr	r0, [pc, #168]	; (8000a00 <main+0xec>)
 8000958:	f006 f8c4 	bl	8006ae4 <can_user_init>

  pid_init(&windwill_motor_PID, DELTA_PID      //1号电�??????
 800095c:	eddf 2a29 	vldr	s5, [pc, #164]	; 8000a04 <main+0xf0>
 8000960:	ed9f 2a29 	vldr	s4, [pc, #164]	; 8000a08 <main+0xf4>
 8000964:	eddf 1a27 	vldr	s3, [pc, #156]	; 8000a04 <main+0xf0>
 8000968:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8000a04 <main+0xf0>
 800096c:	eddf 0a25 	vldr	s1, [pc, #148]	; 8000a04 <main+0xf0>
 8000970:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000974:	2101      	movs	r1, #1
 8000976:	4825      	ldr	r0, [pc, #148]	; (8000a0c <main+0xf8>)
 8000978:	f006 f9be 	bl	8006cf8 <pid_init>

  while (1)
  {
	  motor_info[0].set_voltage = pid_calc(&windwill_motor_PID
								, 500
								,motor_info[0].set_voltage );
 800097c:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <main+0xfc>)
 800097e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  motor_info[0].set_voltage = pid_calc(&windwill_motor_PID
 8000982:	ee07 3a90 	vmov	s15, r3
 8000986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098a:	eef0 0a67 	vmov.f32	s1, s15
 800098e:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8000a14 <main+0x100>
 8000992:	481e      	ldr	r0, [pc, #120]	; (8000a0c <main+0xf8>)
 8000994:	f006 f9dc 	bl	8006d50 <pid_calc>
 8000998:	eef0 7a40 	vmov.f32	s15, s0
 800099c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009a0:	ee17 3a90 	vmov	r3, s15
 80009a4:	b21a      	sxth	r2, r3
 80009a6:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <main+0xfc>)
 80009a8:	805a      	strh	r2, [r3, #2]
	  set_motor_voltage(1 ,motor_info[0].set_voltage
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <main+0xfc>)
 80009ac:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80009b0:	2300      	movs	r3, #0
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	2300      	movs	r3, #0
 80009b6:	2200      	movs	r2, #0
 80009b8:	2001      	movs	r0, #1
 80009ba:	f006 f945 	bl	8006c48 <set_motor_voltage>
								,0
								,0
								,0);

	  if( windwill_state == 1 )	// 如果已经打击
 80009be:	4b16      	ldr	r3, [pc, #88]	; (8000a18 <main+0x104>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d107      	bne.n	80009d6 <main+0xc2>
	  {
		  windwill_state = 0;	// 清除打击标志�???
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <main+0x104>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80009cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <main+0x108>)
 80009d2:	f002 fc14 	bl	80031fe <HAL_GPIO_TogglePin>
	  }

	  // 打击完成
	  // 进行初始�?
	  if( windwill_strike_completed == 1 )
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <main+0x10c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d1ce      	bne.n	800097c <main+0x68>
	  {
		  ws2812_Mission_Accomplished();	// 打击完成响应
 80009de:	f006 f857 	bl	8006a90 <ws2812_Mission_Accomplished>
		  windwill_state = 0;				// 初始化打击状�?
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <main+0x104>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	701a      	strb	r2, [r3, #0]

		  ws2812_lamp_strip_Init();			// 初始化灯�?
 80009e8:	f005 fba6 	bl	8006138 <ws2812_lamp_strip_Init>
		  GPIO_State_Init();
 80009ec:	f005 f862 	bl	8005ab4 <GPIO_State_Init>
		  windwill_strike_completed = 0;	// 清除打击完成标志�?
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <main+0x10c>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	701a      	strb	r2, [r3, #0]
		  windwill_num = 1;					// 装甲板标号归0
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <main+0x110>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	701a      	strb	r2, [r3, #0]
	  motor_info[0].set_voltage = pid_calc(&windwill_motor_PID
 80009fc:	e7be      	b.n	800097c <main+0x68>
 80009fe:	bf00      	nop
 8000a00:	2000a7fc 	.word	0x2000a7fc
 8000a04:	00000000 	.word	0x00000000
 8000a08:	44a28000 	.word	0x44a28000
 8000a0c:	2000a824 	.word	0x2000a824
 8000a10:	20000018 	.word	0x20000018
 8000a14:	43fa0000 	.word	0x43fa0000
 8000a18:	20000088 	.word	0x20000088
 8000a1c:	40021400 	.word	0x40021400
 8000a20:	20000089 	.word	0x20000089
 8000a24:	20000000 	.word	0x20000000

08000a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b094      	sub	sp, #80	; 0x50
 8000a2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2e:	f107 0320 	add.w	r3, r7, #32
 8000a32:	2230      	movs	r2, #48	; 0x30
 8000a34:	2100      	movs	r1, #0
 8000a36:	4618      	mov	r0, r3
 8000a38:	f006 fb30 	bl	800709c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <SystemClock_Config+0xcc>)
 8000a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a54:	4a27      	ldr	r2, [pc, #156]	; (8000af4 <SystemClock_Config+0xcc>)
 8000a56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5c:	4b25      	ldr	r3, [pc, #148]	; (8000af4 <SystemClock_Config+0xcc>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <SystemClock_Config+0xd0>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a21      	ldr	r2, [pc, #132]	; (8000af8 <SystemClock_Config+0xd0>)
 8000a72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <SystemClock_Config+0xd0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a84:	2301      	movs	r3, #1
 8000a86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aaa:	f107 0320 	add.w	r3, r7, #32
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fbd8 	bl	8003264 <HAL_RCC_OscConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000aba:	f000 f81f 	bl	8000afc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000abe:	230f      	movs	r3, #15
 8000ac0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000aca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ace:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ad0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ad4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	2105      	movs	r1, #5
 8000adc:	4618      	mov	r0, r3
 8000ade:	f002 fe31 	bl	8003744 <HAL_RCC_ClockConfig>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ae8:	f000 f808 	bl	8000afc <Error_Handler>
  }
}
 8000aec:	bf00      	nop
 8000aee:	3750      	adds	r7, #80	; 0x50
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40007000 	.word	0x40007000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	4b10      	ldr	r3, [pc, #64]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b20:	6453      	str	r3, [r2, #68]	; 0x44
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	603b      	str	r3, [r7, #0]
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	4a08      	ldr	r2, [pc, #32]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_MspInit+0x4c>)
 8000b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b46:	603b      	str	r3, [r7, #0]
 8000b48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800

08000b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <HardFault_Handler+0x4>

08000b70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <MemManage_Handler+0x4>

08000b76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <BusFault_Handler+0x4>

08000b7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <UsageFault_Handler+0x4>

08000b82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr

08000b90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bb0:	f000 fe16 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bbc:	2001      	movs	r0, #1
 8000bbe:	f002 fb39 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000bca:	2002      	movs	r0, #2
 8000bcc:	f002 fb32 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000bd8:	2004      	movs	r0, #4
 8000bda:	f002 fb2b 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000be6:	2010      	movs	r0, #16
 8000be8:	f002 fb24 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000bf4:	4802      	ldr	r0, [pc, #8]	; (8000c00 <CAN1_TX_IRQHandler+0x10>)
 8000bf6:	f001 fa6a 	bl	80020ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2000a7fc 	.word	0x2000a7fc

08000c04 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000c08:	4802      	ldr	r0, [pc, #8]	; (8000c14 <CAN1_RX0_IRQHandler+0x10>)
 8000c0a:	f001 fa60 	bl	80020ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000a7fc 	.word	0x2000a7fc

08000c18 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c1c:	2020      	movs	r0, #32
 8000c1e:	f002 fb09 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c22:	2040      	movs	r0, #64	; 0x40
 8000c24:	f002 fb06 	bl	8003234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM2_IRQHandler+0x10>)
 8000c32:	f003 f9dd 	bl	8003ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000aacc 	.word	0x2000aacc

08000c40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c44:	4802      	ldr	r0, [pc, #8]	; (8000c50 <USART1_IRQHandler+0x10>)
 8000c46:	f004 f959 	bl	8004efc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000abcc 	.word	0x2000abcc

08000c54 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000c58:	4802      	ldr	r0, [pc, #8]	; (8000c64 <DMA2_Stream1_IRQHandler+0x10>)
 8000c5a:	f001 fea1 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	2000a86c 	.word	0x2000a86c

08000c68 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <DMA2_Stream2_IRQHandler+0x10>)
 8000c6e:	f001 fe97 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	2000a9cc 	.word	0x2000a9cc

08000c7c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA2_Stream3_IRQHandler+0x10>)
 8000c82:	f001 fe8d 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000a8cc 	.word	0x2000a8cc

08000c90 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA2_Stream4_IRQHandler+0x10>)
 8000c96:	f001 fe83 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000ab0c 	.word	0x2000ab0c

08000ca4 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <DMA2_Stream5_IRQHandler+0x10>)
 8000caa:	f001 fe79 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	2000ab6c 	.word	0x2000ab6c

08000cb8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000cbc:	4802      	ldr	r0, [pc, #8]	; (8000cc8 <DMA2_Stream6_IRQHandler+0x10>)
 8000cbe:	f001 fe6f 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	2000a96c 	.word	0x2000a96c

08000ccc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch4_trig_com);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA2_Stream7_IRQHandler+0x10>)
 8000cd2:	f001 fe65 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	2000aa2c 	.word	0x2000aa2c

08000ce0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <SystemInit+0x28>)
 8000ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cea:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <SystemInit+0x28>)
 8000cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cf4:	4b04      	ldr	r3, [pc, #16]	; (8000d08 <SystemInit+0x28>)
 8000cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cfa:	609a      	str	r2, [r3, #8]
#endif
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	e000ed00 	.word	0xe000ed00

08000d0c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim8_ch3;
DMA_HandleTypeDef hdma_tim8_ch4_trig_com;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b096      	sub	sp, #88	; 0x58
 8000d10:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]
 8000d1c:	609a      	str	r2, [r3, #8]
 8000d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d20:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f006 f9a9 	bl	800709c <memset>

  htim1.Instance = TIM1;
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d4c:	4a4a      	ldr	r2, [pc, #296]	; (8000e78 <MX_TIM1_Init+0x16c>)
 8000d4e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000d50:	4b48      	ldr	r3, [pc, #288]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d56:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105-1;
 8000d5c:	4b45      	ldr	r3, [pc, #276]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d5e:	2268      	movs	r2, #104	; 0x68
 8000d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d68:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6e:	4b41      	ldr	r3, [pc, #260]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d74:	483f      	ldr	r0, [pc, #252]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d76:	f002 feb5 	bl	8003ae4 <HAL_TIM_Base_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d80:	f7ff febc 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4838      	ldr	r0, [pc, #224]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000d92:	f003 fafb 	bl	800438c <HAL_TIM_ConfigClockSource>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000d9c:	f7ff feae 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000da0:	4834      	ldr	r0, [pc, #208]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000da2:	f002 feee 	bl	8003b82 <HAL_TIM_PWM_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000dac:	f7ff fea6 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000db0:	2300      	movs	r3, #0
 8000db2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000db8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	482d      	ldr	r0, [pc, #180]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000dc0:	f003 ff6c 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000dca:	f7ff fe97 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dce:	2360      	movs	r3, #96	; 0x60
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4820      	ldr	r0, [pc, #128]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000df4:	f003 fa04 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000dfe:	f7ff fe7d 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e06:	2204      	movs	r2, #4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	481a      	ldr	r0, [pc, #104]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000e0c:	f003 f9f8 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000e16:	f7ff fe71 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	4814      	ldr	r0, [pc, #80]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000e24:	f003 f9ec 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000e2e:	f7ff fe65 	bl	8000afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	4619      	mov	r1, r3
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000e56:	f003 ff9d 	bl	8004d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000e60:	f7ff fe4c 	bl	8000afc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000e64:	4803      	ldr	r0, [pc, #12]	; (8000e74 <MX_TIM1_Init+0x168>)
 8000e66:	f000 faaf 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8000e6a:	bf00      	nop
 8000e6c:	3758      	adds	r7, #88	; 0x58
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000aa8c 	.word	0x2000aa8c
 8000e78:	40010000 	.word	0x40010000

08000e7c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e82:	f107 0308 	add.w	r3, r7, #8
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e90:	463b      	mov	r3, r7
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8000e98:	4b1e      	ldr	r3, [pc, #120]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000e9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ea2:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000ea6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eb0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000eb4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec2:	4814      	ldr	r0, [pc, #80]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ec4:	f002 fe0e 	bl	8003ae4 <HAL_TIM_Base_Init>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ece:	f7ff fe15 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4619      	mov	r1, r3
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000ee0:	f003 fa54 	bl	800438c <HAL_TIM_ConfigClockSource>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eea:	f7ff fe07 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4806      	ldr	r0, [pc, #24]	; (8000f14 <MX_TIM2_Init+0x98>)
 8000efc:	f003 fece 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f06:	f7ff fdf9 	bl	8000afc <Error_Handler>
  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	2000aacc 	.word	0x2000aacc

08000f18 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b096      	sub	sp, #88	; 0x58
 8000f1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f1e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]
 8000f46:	615a      	str	r2, [r3, #20]
 8000f48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	2220      	movs	r2, #32
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 f8a3 	bl	800709c <memset>

  htim8.Instance = TIM8;
 8000f56:	4b4a      	ldr	r3, [pc, #296]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f58:	4a4a      	ldr	r2, [pc, #296]	; (8001084 <MX_TIM8_Init+0x16c>)
 8000f5a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8000f5c:	4b48      	ldr	r3, [pc, #288]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b47      	ldr	r3, [pc, #284]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 105-1;
 8000f68:	4b45      	ldr	r3, [pc, #276]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f6a:	2268      	movs	r2, #104	; 0x68
 8000f6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b44      	ldr	r3, [pc, #272]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f74:	4b42      	ldr	r3, [pc, #264]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b41      	ldr	r3, [pc, #260]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000f80:	483f      	ldr	r0, [pc, #252]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f82:	f002 fdaf 	bl	8003ae4 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000f8c:	f7ff fdb6 	bl	8000afc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4838      	ldr	r0, [pc, #224]	; (8001080 <MX_TIM8_Init+0x168>)
 8000f9e:	f003 f9f5 	bl	800438c <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000fa8:	f7ff fda8 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000fac:	4834      	ldr	r0, [pc, #208]	; (8001080 <MX_TIM8_Init+0x168>)
 8000fae:	f002 fde8 	bl	8003b82 <HAL_TIM_PWM_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000fb8:	f7ff fda0 	bl	8000afc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000fc4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fc8:	4619      	mov	r1, r3
 8000fca:	482d      	ldr	r0, [pc, #180]	; (8001080 <MX_TIM8_Init+0x168>)
 8000fcc:	f003 fe66 	bl	8004c9c <HAL_TIMEx_MasterConfigSynchronization>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000fd6:	f7ff fd91 	bl	8000afc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fda:	2360      	movs	r3, #96	; 0x60
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4820      	ldr	r0, [pc, #128]	; (8001080 <MX_TIM8_Init+0x168>)
 8001000:	f003 f8fe 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800100a:	f7ff fd77 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800100e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001012:	2208      	movs	r2, #8
 8001014:	4619      	mov	r1, r3
 8001016:	481a      	ldr	r0, [pc, #104]	; (8001080 <MX_TIM8_Init+0x168>)
 8001018:	f003 f8f2 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8001022:	f7ff fd6b 	bl	8000afc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102a:	220c      	movs	r2, #12
 800102c:	4619      	mov	r1, r3
 800102e:	4814      	ldr	r0, [pc, #80]	; (8001080 <MX_TIM8_Init+0x168>)
 8001030:	f003 f8e6 	bl	8004200 <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM8_Init+0x126>
  {
    Error_Handler();
 800103a:	f7ff fd5f 	bl	8000afc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001056:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	4619      	mov	r1, r3
 8001060:	4807      	ldr	r0, [pc, #28]	; (8001080 <MX_TIM8_Init+0x168>)
 8001062:	f003 fe97 	bl	8004d94 <HAL_TIMEx_ConfigBreakDeadTime>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 800106c:	f7ff fd46 	bl	8000afc <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8001070:	4803      	ldr	r0, [pc, #12]	; (8001080 <MX_TIM8_Init+0x168>)
 8001072:	f000 f9a9 	bl	80013c8 <HAL_TIM_MspPostInit>

}
 8001076:	bf00      	nop
 8001078:	3758      	adds	r7, #88	; 0x58
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000a92c 	.word	0x2000a92c
 8001084:	40010400 	.word	0x40010400

08001088 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a60      	ldr	r2, [pc, #384]	; (8001218 <HAL_TIM_Base_MspInit+0x190>)
 8001096:	4293      	cmp	r3, r2
 8001098:	f040 80a2 	bne.w	80011e0 <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
 80010a0:	4b5e      	ldr	r3, [pc, #376]	; (800121c <HAL_TIM_Base_MspInit+0x194>)
 80010a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a4:	4a5d      	ldr	r2, [pc, #372]	; (800121c <HAL_TIM_Base_MspInit+0x194>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6453      	str	r3, [r2, #68]	; 0x44
 80010ac:	4b5b      	ldr	r3, [pc, #364]	; (800121c <HAL_TIM_Base_MspInit+0x194>)
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80010b8:	4b59      	ldr	r3, [pc, #356]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010ba:	4a5a      	ldr	r2, [pc, #360]	; (8001224 <HAL_TIM_Base_MspInit+0x19c>)
 80010bc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80010be:	4b58      	ldr	r3, [pc, #352]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010c0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80010c4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010c6:	4b56      	ldr	r3, [pc, #344]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010c8:	2240      	movs	r2, #64	; 0x40
 80010ca:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010cc:	4b54      	ldr	r3, [pc, #336]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80010d2:	4b53      	ldr	r3, [pc, #332]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010da:	4b51      	ldr	r3, [pc, #324]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010e2:	4b4f      	ldr	r3, [pc, #316]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e8:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 80010ea:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010f0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80010f2:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010f8:	4b49      	ldr	r3, [pc, #292]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80010fe:	4848      	ldr	r0, [pc, #288]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 8001100:	f001 fb26 	bl	8002750 <HAL_DMA_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 800110a:	f7ff fcf7 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a43      	ldr	r2, [pc, #268]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 8001112:	625a      	str	r2, [r3, #36]	; 0x24
 8001114:	4a42      	ldr	r2, [pc, #264]	; (8001220 <HAL_TIM_Base_MspInit+0x198>)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 800111a:	4b43      	ldr	r3, [pc, #268]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 800111c:	4a43      	ldr	r2, [pc, #268]	; (800122c <HAL_TIM_Base_MspInit+0x1a4>)
 800111e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8001120:	4b41      	ldr	r3, [pc, #260]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001122:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001126:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001128:	4b3f      	ldr	r3, [pc, #252]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 800112a:	2240      	movs	r2, #64	; 0x40
 800112c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b3e      	ldr	r3, [pc, #248]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b3c      	ldr	r3, [pc, #240]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800113c:	4b3a      	ldr	r3, [pc, #232]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 800113e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001142:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001144:	4b38      	ldr	r3, [pc, #224]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001146:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800114a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 800114e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001152:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001156:	2200      	movs	r2, #0
 8001158:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 800115c:	2200      	movs	r2, #0
 800115e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8001160:	4831      	ldr	r0, [pc, #196]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001162:	f001 faf5 	bl	8002750 <HAL_DMA_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 800116c:	f7ff fcc6 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a2d      	ldr	r2, [pc, #180]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001174:	629a      	str	r2, [r3, #40]	; 0x28
 8001176:	4a2c      	ldr	r2, [pc, #176]	; (8001228 <HAL_TIM_Base_MspInit+0x1a0>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 800117c:	4b2c      	ldr	r3, [pc, #176]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 800117e:	4a2d      	ldr	r2, [pc, #180]	; (8001234 <HAL_TIM_Base_MspInit+0x1ac>)
 8001180:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8001182:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 8001184:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001188:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800118a:	4b29      	ldr	r3, [pc, #164]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 800118c:	2240      	movs	r2, #64	; 0x40
 800118e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b27      	ldr	r3, [pc, #156]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 8001198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119c:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800119e:	4b24      	ldr	r3, [pc, #144]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 80011ae:	4b20      	ldr	r3, [pc, #128]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b4:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80011b6:	4b1e      	ldr	r3, [pc, #120]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011bc:	4b1c      	ldr	r3, [pc, #112]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 80011c2:	481b      	ldr	r0, [pc, #108]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011c4:	f001 fac4 	bl	8002750 <HAL_DMA_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 80011ce:	f7ff fc95 	bl	8000afc <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a16      	ldr	r2, [pc, #88]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d8:	4a15      	ldr	r2, [pc, #84]	; (8001230 <HAL_TIM_Base_MspInit+0x1a8>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80011de:	e0de      	b.n	800139e <HAL_TIM_Base_MspInit+0x316>
  else if(tim_baseHandle->Instance==TIM2)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e8:	d126      	bne.n	8001238 <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <HAL_TIM_Base_MspInit+0x194>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <HAL_TIM_Base_MspInit+0x194>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6413      	str	r3, [r2, #64]	; 0x40
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <HAL_TIM_Base_MspInit+0x194>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	613b      	str	r3, [r7, #16]
 8001204:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2102      	movs	r1, #2
 800120a:	201c      	movs	r0, #28
 800120c:	f001 fa69 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001210:	201c      	movs	r0, #28
 8001212:	f001 fa82 	bl	800271a <HAL_NVIC_EnableIRQ>
}
 8001216:	e0c2      	b.n	800139e <HAL_TIM_Base_MspInit+0x316>
 8001218:	40010000 	.word	0x40010000
 800121c:	40023800 	.word	0x40023800
 8001220:	2000a86c 	.word	0x2000a86c
 8001224:	40026428 	.word	0x40026428
 8001228:	2000a9cc 	.word	0x2000a9cc
 800122c:	40026440 	.word	0x40026440
 8001230:	2000a96c 	.word	0x2000a96c
 8001234:	400264a0 	.word	0x400264a0
  else if(tim_baseHandle->Instance==TIM8)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a5a      	ldr	r2, [pc, #360]	; (80013a8 <HAL_TIM_Base_MspInit+0x320>)
 800123e:	4293      	cmp	r3, r2
 8001240:	f040 80ad 	bne.w	800139e <HAL_TIM_Base_MspInit+0x316>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4b58      	ldr	r3, [pc, #352]	; (80013ac <HAL_TIM_Base_MspInit+0x324>)
 800124a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124c:	4a57      	ldr	r2, [pc, #348]	; (80013ac <HAL_TIM_Base_MspInit+0x324>)
 800124e:	f043 0302 	orr.w	r3, r3, #2
 8001252:	6453      	str	r3, [r2, #68]	; 0x44
 8001254:	4b55      	ldr	r3, [pc, #340]	; (80013ac <HAL_TIM_Base_MspInit+0x324>)
 8001256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8001260:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 8001262:	4a54      	ldr	r2, [pc, #336]	; (80013b4 <HAL_TIM_Base_MspInit+0x32c>)
 8001264:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8001266:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 8001268:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800126c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800126e:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 8001270:	2240      	movs	r2, #64	; 0x40
 8001272:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001274:	4b4e      	ldr	r3, [pc, #312]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 8001276:	2200      	movs	r2, #0
 8001278:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800127a:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 800127c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001280:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001282:	4b4b      	ldr	r3, [pc, #300]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 8001284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001288:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800128a:	4b49      	ldr	r3, [pc, #292]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 800128c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001290:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 8001294:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001298:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800129a:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012a0:	4b43      	ldr	r3, [pc, #268]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 80012a6:	4842      	ldr	r0, [pc, #264]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 80012a8:	f001 fa52 	bl	8002750 <HAL_DMA_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_TIM_Base_MspInit+0x22e>
      Error_Handler();
 80012b2:	f7ff fc23 	bl	8000afc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a3d      	ldr	r2, [pc, #244]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 80012ba:	629a      	str	r2, [r3, #40]	; 0x28
 80012bc:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_TIM_Base_MspInit+0x328>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 80012c2:	4b3d      	ldr	r3, [pc, #244]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012c4:	4a3d      	ldr	r2, [pc, #244]	; (80013bc <HAL_TIM_Base_MspInit+0x334>)
 80012c6:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012ca:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80012ce:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012d2:	2240      	movs	r2, #64	; 0x40
 80012d4:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80012dc:	4b36      	ldr	r3, [pc, #216]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012e2:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e4:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012ea:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012f2:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 80012f4:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012fa:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80012fc:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 80012fe:	2200      	movs	r2, #0
 8001300:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 8001304:	2200      	movs	r2, #0
 8001306:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 8001308:	482b      	ldr	r0, [pc, #172]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 800130a:	f001 fa21 	bl	8002750 <HAL_DMA_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_TIM_Base_MspInit+0x290>
      Error_Handler();
 8001314:	f7ff fbf2 	bl	8000afc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
 800131e:	4a26      	ldr	r2, [pc, #152]	; (80013b8 <HAL_TIM_Base_MspInit+0x330>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch4_trig_com.Instance = DMA2_Stream7;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001326:	4a27      	ldr	r2, [pc, #156]	; (80013c4 <HAL_TIM_Base_MspInit+0x33c>)
 8001328:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch4_trig_com.Init.Channel = DMA_CHANNEL_7;
 800132a:	4b25      	ldr	r3, [pc, #148]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 800132c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001330:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch4_trig_com.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001334:	2240      	movs	r2, #64	; 0x40
 8001336:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch4_trig_com.Init.PeriphInc = DMA_PINC_DISABLE;
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch4_trig_com.Init.MemInc = DMA_MINC_ENABLE;
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001340:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001344:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch4_trig_com.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001346:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001348:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800134c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch4_trig_com.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001350:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001354:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch4_trig_com.Init.Mode = DMA_CIRCULAR;
 8001356:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001358:	f44f 7280 	mov.w	r2, #256	; 0x100
 800135c:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch4_trig_com.Init.Priority = DMA_PRIORITY_LOW;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch4_trig_com.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001366:	2200      	movs	r2, #0
 8001368:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch4_trig_com) != HAL_OK)
 800136a:	4815      	ldr	r0, [pc, #84]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 800136c:	f001 f9f0 	bl	8002750 <HAL_DMA_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_TIM_Base_MspInit+0x2f2>
      Error_Handler();
 8001376:	f7ff fbc1 	bl	8000afc <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim8_ch4_trig_com);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 800137e:	631a      	str	r2, [r3, #48]	; 0x30
 8001380:	4a0f      	ldr	r2, [pc, #60]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim8_ch4_trig_com);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 800138a:	639a      	str	r2, [r3, #56]	; 0x38
 800138c:	4a0c      	ldr	r2, [pc, #48]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_COMMUTATION],hdma_tim8_ch4_trig_com);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 8001396:	635a      	str	r2, [r3, #52]	; 0x34
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_TIM_Base_MspInit+0x338>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40010400 	.word	0x40010400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	2000a8cc 	.word	0x2000a8cc
 80013b4:	40026458 	.word	0x40026458
 80013b8:	2000ab0c 	.word	0x2000ab0c
 80013bc:	40026470 	.word	0x40026470
 80013c0:	2000aa2c 	.word	0x2000aa2c
 80013c4:	400264b8 	.word	0x400264b8

080013c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a34      	ldr	r2, [pc, #208]	; (80014b8 <HAL_TIM_MspPostInit+0xf0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d13e      	bne.n	8001468 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
 80013ee:	4b33      	ldr	r3, [pc, #204]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a2b      	ldr	r2, [pc, #172]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 8001410:	f043 0310 	orr.w	r3, r3, #16
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b29      	ldr	r3, [pc, #164]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0310 	and.w	r3, r3, #16
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = windwill_output_2_Pin|windwill_output_1_Pin;
 8001422:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001434:	2301      	movs	r3, #1
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4820      	ldr	r0, [pc, #128]	; (80014c0 <HAL_TIM_MspPostInit+0xf8>)
 8001440:	f001 fd18 	bl	8002e74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = windwill_output_3_Pin;
 8001444:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001456:	2301      	movs	r3, #1
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(windwill_output_3_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	4818      	ldr	r0, [pc, #96]	; (80014c4 <HAL_TIM_MspPostInit+0xfc>)
 8001462:	f001 fd07 	bl	8002e74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001466:	e022      	b.n	80014ae <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a16      	ldr	r2, [pc, #88]	; (80014c8 <HAL_TIM_MspPostInit+0x100>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d11d      	bne.n	80014ae <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b11      	ldr	r3, [pc, #68]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a10      	ldr	r2, [pc, #64]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <HAL_TIM_MspPostInit+0xf4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = windwill_output_5_Pin|windwill_output_4_Pin|GPIO_PIN_2;
 800148e:	23c4      	movs	r3, #196	; 0xc4
 8001490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800149e:	2303      	movs	r3, #3
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	4619      	mov	r1, r3
 80014a8:	4808      	ldr	r0, [pc, #32]	; (80014cc <HAL_TIM_MspPostInit+0x104>)
 80014aa:	f001 fce3 	bl	8002e74 <HAL_GPIO_Init>
}
 80014ae:	bf00      	nop
 80014b0:	3728      	adds	r7, #40	; 0x28
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40010000 	.word	0x40010000
 80014bc:	40023800 	.word	0x40023800
 80014c0:	40020000 	.word	0x40020000
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40010400 	.word	0x40010400
 80014cc:	40022000 	.word	0x40022000

080014d0 <MX_UART8_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 80014d4:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_UART8_Init+0x4c>)
 80014d6:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_UART8_Init+0x50>)
 80014d8:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80014da:	4b10      	ldr	r3, [pc, #64]	; (800151c <MX_UART8_Init+0x4c>)
 80014dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e0:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80014e2:	4b0e      	ldr	r3, [pc, #56]	; (800151c <MX_UART8_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80014e8:	4b0c      	ldr	r3, [pc, #48]	; (800151c <MX_UART8_Init+0x4c>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_UART8_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_UART8_Init+0x4c>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_UART8_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_UART8_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_UART8_Init+0x4c>)
 8001508:	f003 fcaa 	bl	8004e60 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 8001512:	f7ff faf3 	bl	8000afc <Error_Handler>
  }

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	2000ac0c 	.word	0x2000ac0c
 8001520:	40007c00 	.word	0x40007c00

08001524 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <MX_USART1_UART_Init+0x48>)
 800152a:	4a11      	ldr	r2, [pc, #68]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800152c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 800152e:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_USART1_UART_Init+0x48>)
 8001530:	4a10      	ldr	r2, [pc, #64]	; (8001574 <MX_USART1_UART_Init+0x50>)
 8001532:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <MX_USART1_UART_Init+0x48>)
 8001536:	2200      	movs	r2, #0
 8001538:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800153a:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_USART1_UART_Init+0x48>)
 800153c:	2200      	movs	r2, #0
 800153e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <MX_USART1_UART_Init+0x48>)
 8001542:	2200      	movs	r2, #0
 8001544:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_USART1_UART_Init+0x48>)
 8001548:	220c      	movs	r2, #12
 800154a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154c:	4b07      	ldr	r3, [pc, #28]	; (800156c <MX_USART1_UART_Init+0x48>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_USART1_UART_Init+0x48>)
 8001554:	2200      	movs	r2, #0
 8001556:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_USART1_UART_Init+0x48>)
 800155a:	f003 fc81 	bl	8004e60 <HAL_UART_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001564:	f7ff faca 	bl	8000afc <Error_Handler>
  }

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000abcc 	.word	0x2000abcc
 8001570:	40011000 	.word	0x40011000
 8001574:	000186a0 	.word	0x000186a0

08001578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a4d      	ldr	r2, [pc, #308]	; (80016cc <HAL_UART_MspInit+0x154>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12c      	bne.n	80015f4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
 800159e:	4b4c      	ldr	r3, [pc, #304]	; (80016d0 <HAL_UART_MspInit+0x158>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	4a4b      	ldr	r2, [pc, #300]	; (80016d0 <HAL_UART_MspInit+0x158>)
 80015a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80015a8:	6413      	str	r3, [r2, #64]	; 0x40
 80015aa:	4b49      	ldr	r3, [pc, #292]	; (80016d0 <HAL_UART_MspInit+0x158>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015b2:	61bb      	str	r3, [r7, #24]
 80015b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	617b      	str	r3, [r7, #20]
 80015ba:	4b45      	ldr	r3, [pc, #276]	; (80016d0 <HAL_UART_MspInit+0x158>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <HAL_UART_MspInit+0x158>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_UART_MspInit+0x158>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	617b      	str	r3, [r7, #20]
 80015d0:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 80015d2:	2303      	movs	r3, #3
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015da:	2301      	movs	r3, #1
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80015e2:	2308      	movs	r3, #8
 80015e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4839      	ldr	r0, [pc, #228]	; (80016d4 <HAL_UART_MspInit+0x15c>)
 80015ee:	f001 fc41 	bl	8002e74 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80015f2:	e066      	b.n	80016c2 <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a37      	ldr	r2, [pc, #220]	; (80016d8 <HAL_UART_MspInit+0x160>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d161      	bne.n	80016c2 <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b33      	ldr	r3, [pc, #204]	; (80016d0 <HAL_UART_MspInit+0x158>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a32      	ldr	r2, [pc, #200]	; (80016d0 <HAL_UART_MspInit+0x158>)
 8001608:	f043 0310 	orr.w	r3, r3, #16
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HAL_UART_MspInit+0x158>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 0310 	and.w	r3, r3, #16
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <HAL_UART_MspInit+0x158>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2b      	ldr	r2, [pc, #172]	; (80016d0 <HAL_UART_MspInit+0x158>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <HAL_UART_MspInit+0x158>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001636:	23c0      	movs	r3, #192	; 0xc0
 8001638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001642:	2303      	movs	r3, #3
 8001644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001646:	2307      	movs	r3, #7
 8001648:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164a:	f107 031c 	add.w	r3, r7, #28
 800164e:	4619      	mov	r1, r3
 8001650:	4822      	ldr	r0, [pc, #136]	; (80016dc <HAL_UART_MspInit+0x164>)
 8001652:	f001 fc0f 	bl	8002e74 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <HAL_UART_MspInit+0x168>)
 8001658:	4a22      	ldr	r2, [pc, #136]	; (80016e4 <HAL_UART_MspInit+0x16c>)
 800165a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <HAL_UART_MspInit+0x168>)
 800165e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001662:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_UART_MspInit+0x168>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <HAL_UART_MspInit+0x168>)
 800166c:	2200      	movs	r2, #0
 800166e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <HAL_UART_MspInit+0x168>)
 8001672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001676:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001678:	4b19      	ldr	r3, [pc, #100]	; (80016e0 <HAL_UART_MspInit+0x168>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_UART_MspInit+0x168>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_UART_MspInit+0x168>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_UART_MspInit+0x168>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001690:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_UART_MspInit+0x168>)
 8001692:	2200      	movs	r2, #0
 8001694:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001696:	4812      	ldr	r0, [pc, #72]	; (80016e0 <HAL_UART_MspInit+0x168>)
 8001698:	f001 f85a 	bl	8002750 <HAL_DMA_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 80016a2:	f7ff fa2b 	bl	8000afc <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <HAL_UART_MspInit+0x168>)
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
 80016ac:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <HAL_UART_MspInit+0x168>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016b2:	2200      	movs	r2, #0
 80016b4:	2100      	movs	r1, #0
 80016b6:	2025      	movs	r0, #37	; 0x25
 80016b8:	f001 f813 	bl	80026e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016bc:	2025      	movs	r0, #37	; 0x25
 80016be:	f001 f82c 	bl	800271a <HAL_NVIC_EnableIRQ>
}
 80016c2:	bf00      	nop
 80016c4:	3730      	adds	r7, #48	; 0x30
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40007c00 	.word	0x40007c00
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40011000 	.word	0x40011000
 80016dc:	40020400 	.word	0x40020400
 80016e0:	2000ab6c 	.word	0x2000ab6c
 80016e4:	40026488 	.word	0x40026488

080016e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ee:	e003      	b.n	80016f8 <LoopCopyDataInit>

080016f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80016f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016f6:	3104      	adds	r1, #4

080016f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016f8:	480b      	ldr	r0, [pc, #44]	; (8001728 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80016fa:	4b0c      	ldr	r3, [pc, #48]	; (800172c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80016fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001700:	d3f6      	bcc.n	80016f0 <CopyDataInit>
  ldr  r2, =_sbss
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001704:	e002      	b.n	800170c <LoopFillZerobss>

08001706 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001706:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001708:	f842 3b04 	str.w	r3, [r2], #4

0800170c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800170e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001710:	d3f9      	bcc.n	8001706 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001712:	f7ff fae5 	bl	8000ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001716:	f005 fc9d 	bl	8007054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800171a:	f7ff f8fb 	bl	8000914 <main>
  bx  lr    
 800171e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001720:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001724:	080070f4 	.word	0x080070f4
  ldr  r0, =_sdata
 8001728:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800172c:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8001730:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8001734:	2000ac54 	.word	0x2000ac54

08001738 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC_IRQHandler>
	...

0800173c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <HAL_Init+0x40>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a0d      	ldr	r2, [pc, #52]	; (800177c <HAL_Init+0x40>)
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <HAL_Init+0x40>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <HAL_Init+0x40>)
 8001752:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001756:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <HAL_Init+0x40>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a07      	ldr	r2, [pc, #28]	; (800177c <HAL_Init+0x40>)
 800175e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001762:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001764:	2003      	movs	r0, #3
 8001766:	f000 ffb1 	bl	80026cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800176a:	2000      	movs	r0, #0
 800176c:	f000 f808 	bl	8001780 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001770:	f7ff f9cc 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001774:	2300      	movs	r3, #0
}
 8001776:	4618      	mov	r0, r3
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40023c00 	.word	0x40023c00

08001780 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <HAL_InitTick+0x54>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <HAL_InitTick+0x58>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 ffc9 	bl	8002736 <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 ff91 	bl	80026e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x5c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000004 	.word	0x20000004
 80017d8:	2000000c 	.word	0x2000000c
 80017dc:	20000008 	.word	0x20000008

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2000000c 	.word	0x2000000c
 8001804:	2000ac4c 	.word	0x2000ac4c

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2000ac4c 	.word	0x2000ac4c

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000000c 	.word	0x2000000c

08001868 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d101      	bne.n	800187a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e0ed      	b.n	8001a56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d102      	bne.n	800188c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f7fe fe62 	bl	8000550 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0202 	bic.w	r2, r2, #2
 800189a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800189c:	f7ff ffb4 	bl	8001808 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018a2:	e012      	b.n	80018ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018a4:	f7ff ffb0 	bl	8001808 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b0a      	cmp	r3, #10
 80018b0:	d90b      	bls.n	80018ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2205      	movs	r2, #5
 80018c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e0c5      	b.n	8001a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1e5      	bne.n	80018a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0201 	orr.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018e8:	f7ff ff8e 	bl	8001808 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018ee:	e012      	b.n	8001916 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018f0:	f7ff ff8a 	bl	8001808 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b0a      	cmp	r3, #10
 80018fc:	d90b      	bls.n	8001916 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2205      	movs	r2, #5
 800190e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e09f      	b.n	8001a56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0e5      	beq.n	80018f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e1b      	ldrb	r3, [r3, #24]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d108      	bne.n	800193e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e007      	b.n	800194e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800194c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	7e5b      	ldrb	r3, [r3, #25]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d108      	bne.n	8001968 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	e007      	b.n	8001978 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001976:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	7e9b      	ldrb	r3, [r3, #26]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d108      	bne.n	8001992 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0220 	orr.w	r2, r2, #32
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e007      	b.n	80019a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0220 	bic.w	r2, r2, #32
 80019a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	7edb      	ldrb	r3, [r3, #27]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d108      	bne.n	80019bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0210 	bic.w	r2, r2, #16
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	e007      	b.n	80019cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0210 	orr.w	r2, r2, #16
 80019ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	7f1b      	ldrb	r3, [r3, #28]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d108      	bne.n	80019e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0208 	orr.w	r2, r2, #8
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	e007      	b.n	80019f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0208 	bic.w	r2, r2, #8
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	7f5b      	ldrb	r3, [r3, #29]
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d108      	bne.n	8001a10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0204 	orr.w	r2, r2, #4
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	e007      	b.n	8001a20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f022 0204 	bic.w	r2, r2, #4
 8001a1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	ea42 0103 	orr.w	r1, r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	1e5a      	subs	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
	...

08001a60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b087      	sub	sp, #28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a76:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d003      	beq.n	8001a86 <HAL_CAN_ConfigFilter+0x26>
 8001a7e:	7cfb      	ldrb	r3, [r7, #19]
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	f040 80be 	bne.w	8001c02 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a86:	4b65      	ldr	r3, [pc, #404]	; (8001c1c <HAL_CAN_ConfigFilter+0x1bc>)
 8001a88:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a90:	f043 0201 	orr.w	r2, r3, #1
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001aa0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d123      	bne.n	8001b30 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001b0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	3248      	adds	r2, #72	; 0x48
 8001b10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b26:	6979      	ldr	r1, [r7, #20]
 8001b28:	3348      	adds	r3, #72	; 0x48
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	440b      	add	r3, r1
 8001b2e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d122      	bne.n	8001b7e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	431a      	orrs	r2, r3
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	3248      	adds	r2, #72	; 0x48
 8001b5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b74:	6979      	ldr	r1, [r7, #20]
 8001b76:	3348      	adds	r3, #72	; 0x48
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	440b      	add	r3, r1
 8001b7c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	401a      	ands	r2, r3
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b98:	e007      	b.n	8001baa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	401a      	ands	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001bc4:	e007      	b.n	8001bd6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bf4:	f023 0201 	bic.w	r2, r3, #1
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e006      	b.n	8001c10 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
  }
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	371c      	adds	r7, #28
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	40006400 	.word	0x40006400

08001c20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d12e      	bne.n	8001c92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2202      	movs	r2, #2
 8001c38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c4c:	f7ff fddc 	bl	8001808 <HAL_GetTick>
 8001c50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c52:	e012      	b.n	8001c7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c54:	f7ff fdd8 	bl	8001808 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b0a      	cmp	r3, #10
 8001c60:	d90b      	bls.n	8001c7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2205      	movs	r2, #5
 8001c72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e012      	b.n	8001ca0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1e5      	bne.n	8001c54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e006      	b.n	8001ca0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
  }
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b089      	sub	sp, #36	; 0x24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cbc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cc6:	7ffb      	ldrb	r3, [r7, #31]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d003      	beq.n	8001cd4 <HAL_CAN_AddTxMessage+0x2c>
 8001ccc:	7ffb      	ldrb	r3, [r7, #31]
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	f040 80b8 	bne.w	8001e44 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10a      	bne.n	8001cf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d105      	bne.n	8001cf4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80a0 	beq.w	8001e34 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	0e1b      	lsrs	r3, r3, #24
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d907      	bls.n	8001d14 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e09e      	b.n	8001e52 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d14:	2201      	movs	r2, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10d      	bne.n	8001d42 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d30:	68f9      	ldr	r1, [r7, #12]
 8001d32:	6809      	ldr	r1, [r1, #0]
 8001d34:	431a      	orrs	r2, r3
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	3318      	adds	r3, #24
 8001d3a:	011b      	lsls	r3, r3, #4
 8001d3c:	440b      	add	r3, r1
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e00f      	b.n	8001d62 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d52:	68f9      	ldr	r1, [r7, #12]
 8001d54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001d56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3318      	adds	r3, #24
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	440b      	add	r3, r1
 8001d60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	691a      	ldr	r2, [r3, #16]
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	3318      	adds	r3, #24
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	440b      	add	r3, r1
 8001d72:	3304      	adds	r3, #4
 8001d74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	7d1b      	ldrb	r3, [r3, #20]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d111      	bne.n	8001da2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	3318      	adds	r3, #24
 8001d86:	011b      	lsls	r3, r3, #4
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68fa      	ldr	r2, [r7, #12]
 8001d90:	6811      	ldr	r1, [r2, #0]
 8001d92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	3318      	adds	r3, #24
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	440b      	add	r3, r1
 8001d9e:	3304      	adds	r3, #4
 8001da0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	3307      	adds	r3, #7
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	061a      	lsls	r2, r3, #24
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	3306      	adds	r3, #6
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	041b      	lsls	r3, r3, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3305      	adds	r3, #5
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	021b      	lsls	r3, r3, #8
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	3204      	adds	r2, #4
 8001dc2:	7812      	ldrb	r2, [r2, #0]
 8001dc4:	4610      	mov	r0, r2
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	6811      	ldr	r1, [r2, #0]
 8001dca:	ea43 0200 	orr.w	r2, r3, r0
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	011b      	lsls	r3, r3, #4
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001dd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	3303      	adds	r3, #3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	061a      	lsls	r2, r3, #24
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3302      	adds	r3, #2
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	041b      	lsls	r3, r3, #16
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3301      	adds	r3, #1
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	021b      	lsls	r3, r3, #8
 8001df4:	4313      	orrs	r3, r2
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	7812      	ldrb	r2, [r2, #0]
 8001dfa:	4610      	mov	r0, r2
 8001dfc:	68fa      	ldr	r2, [r7, #12]
 8001dfe:	6811      	ldr	r1, [r2, #0]
 8001e00:	ea43 0200 	orr.w	r2, r3, r0
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	011b      	lsls	r3, r3, #4
 8001e08:	440b      	add	r3, r1
 8001e0a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001e0e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	3318      	adds	r3, #24
 8001e18:	011b      	lsls	r3, r3, #4
 8001e1a:	4413      	add	r3, r2
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68fa      	ldr	r2, [r7, #12]
 8001e20:	6811      	ldr	r1, [r2, #0]
 8001e22:	f043 0201 	orr.w	r2, r3, #1
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3318      	adds	r3, #24
 8001e2a:	011b      	lsls	r3, r3, #4
 8001e2c:	440b      	add	r3, r1
 8001e2e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e00e      	b.n	8001e52 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e006      	b.n	8001e52 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
  }
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3724      	adds	r7, #36	; 0x24
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b087      	sub	sp, #28
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e72:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d003      	beq.n	8001e82 <HAL_CAN_GetRxMessage+0x24>
 8001e7a:	7dfb      	ldrb	r3, [r7, #23]
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	f040 80f3 	bne.w	8002068 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10e      	bne.n	8001ea6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e0e7      	b.n	8002076 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	f003 0303 	and.w	r3, r3, #3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d8      	b.n	8002076 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	331b      	adds	r3, #27
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	4413      	add	r3, r2
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0204 	and.w	r2, r3, #4
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	331b      	adds	r3, #27
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	4413      	add	r3, r2
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	0d5b      	lsrs	r3, r3, #21
 8001ef2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	331b      	adds	r3, #27
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	4413      	add	r3, r2
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	08db      	lsrs	r3, r3, #3
 8001f0c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	331b      	adds	r3, #27
 8001f1c:	011b      	lsls	r3, r3, #4
 8001f1e:	4413      	add	r3, r2
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0202 	and.w	r2, r3, #2
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	331b      	adds	r3, #27
 8001f32:	011b      	lsls	r3, r3, #4
 8001f34:	4413      	add	r3, r2
 8001f36:	3304      	adds	r3, #4
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 020f 	and.w	r2, r3, #15
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	331b      	adds	r3, #27
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	3304      	adds	r3, #4
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	b2da      	uxtb	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	331b      	adds	r3, #27
 8001f62:	011b      	lsls	r3, r3, #4
 8001f64:	4413      	add	r3, r2
 8001f66:	3304      	adds	r3, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0c1b      	lsrs	r3, r3, #16
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	011b      	lsls	r3, r3, #4
 8001f90:	4413      	add	r3, r2
 8001f92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0a1a      	lsrs	r2, r3, #8
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	4413      	add	r3, r2
 8001fac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0c1a      	lsrs	r2, r3, #16
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	b2d2      	uxtb	r2, r2
 8001fba:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	011b      	lsls	r3, r3, #4
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	0e1a      	lsrs	r2, r3, #24
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	3303      	adds	r3, #3
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	011b      	lsls	r3, r3, #4
 8001ff6:	4413      	add	r3, r2
 8001ff8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	0a1a      	lsrs	r2, r3, #8
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	3305      	adds	r3, #5
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	4413      	add	r3, r2
 8002012:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	0c1a      	lsrs	r2, r3, #16
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	3306      	adds	r3, #6
 800201e:	b2d2      	uxtb	r2, r2
 8002020:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	011b      	lsls	r3, r3, #4
 800202a:	4413      	add	r3, r2
 800202c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	0e1a      	lsrs	r2, r3, #24
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	3307      	adds	r3, #7
 8002038:	b2d2      	uxtb	r2, r2
 800203a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d108      	bne.n	8002054 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68da      	ldr	r2, [r3, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f042 0220 	orr.w	r2, r2, #32
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	e007      	b.n	8002064 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691a      	ldr	r2, [r3, #16]
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f042 0220 	orr.w	r2, r2, #32
 8002062:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	e006      	b.n	8002076 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
  }
}
 8002076:	4618      	mov	r0, r3
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002092:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002094:	7bfb      	ldrb	r3, [r7, #15]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d002      	beq.n	80020a0 <HAL_CAN_ActivateNotification+0x1e>
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	2b02      	cmp	r3, #2
 800209e:	d109      	bne.n	80020b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6959      	ldr	r1, [r3, #20]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	e006      	b.n	80020c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
  }
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b08a      	sub	sp, #40	; 0x28
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	691b      	ldr	r3, [r3, #16]
 8002100:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800210a:	6a3b      	ldr	r3, [r7, #32]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d07c      	beq.n	800220e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d023      	beq.n	8002166 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2201      	movs	r2, #1
 8002124:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002126:	69bb      	ldr	r3, [r7, #24]
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	2b00      	cmp	r3, #0
 800212e:	d003      	beq.n	8002138 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f000 f983 	bl	800243c <HAL_CAN_TxMailbox0CompleteCallback>
 8002136:	e016      	b.n	8002166 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	d004      	beq.n	800214c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
 800214a:	e00c      	b.n	8002166 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800214c:	69bb      	ldr	r3, [r7, #24]
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	2b00      	cmp	r3, #0
 8002154:	d004      	beq.n	8002160 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
 800215e:	e002      	b.n	8002166 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 f989 	bl	8002478 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d024      	beq.n	80021ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002178:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002180:	2b00      	cmp	r3, #0
 8002182:	d003      	beq.n	800218c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f000 f963 	bl	8002450 <HAL_CAN_TxMailbox1CompleteCallback>
 800218a:	e016      	b.n	80021ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002192:	2b00      	cmp	r3, #0
 8002194:	d004      	beq.n	80021a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800219c:	627b      	str	r3, [r7, #36]	; 0x24
 800219e:	e00c      	b.n	80021ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d004      	beq.n	80021b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
 80021b2:	e002      	b.n	80021ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f969 	bl	800248c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d024      	beq.n	800220e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f000 f943 	bl	8002464 <HAL_CAN_TxMailbox2CompleteCallback>
 80021de:	e016      	b.n	800220e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d004      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
 80021f2:	e00c      	b.n	800220e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
 8002206:	e002      	b.n	800220e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f000 f949 	bl	80024a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800220e:	6a3b      	ldr	r3, [r7, #32]
 8002210:	f003 0308 	and.w	r3, r3, #8
 8002214:	2b00      	cmp	r3, #0
 8002216:	d00c      	beq.n	8002232 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	f003 0310 	and.w	r3, r3, #16
 800221e:	2b00      	cmp	r3, #0
 8002220:	d007      	beq.n	8002232 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002228:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	2210      	movs	r2, #16
 8002230:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002232:	6a3b      	ldr	r3, [r7, #32]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d00b      	beq.n	8002254 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	2b00      	cmp	r3, #0
 8002244:	d006      	beq.n	8002254 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2208      	movs	r2, #8
 800224c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f000 f930 	bl	80024b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d002      	beq.n	8002272 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f004 fc63 	bl	8006b38 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00c      	beq.n	8002296 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002288:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800228c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2210      	movs	r2, #16
 8002294:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002296:	6a3b      	ldr	r3, [r7, #32]
 8002298:	f003 0320 	and.w	r3, r3, #32
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00b      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2208      	movs	r2, #8
 80022b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f912 	bl	80024dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d009      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d002      	beq.n	80022d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f000 f8f9 	bl	80024c8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80022d6:	6a3b      	ldr	r3, [r7, #32]
 80022d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00b      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	f003 0310 	and.w	r3, r3, #16
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2210      	movs	r2, #16
 80022f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f000 f8fc 	bl	80024f0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d006      	beq.n	800231a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2208      	movs	r2, #8
 8002312:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f8f5 	bl	8002504 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800231a:	6a3b      	ldr	r3, [r7, #32]
 800231c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d07b      	beq.n	800241c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	f003 0304 	and.w	r3, r3, #4
 800232a:	2b00      	cmp	r3, #0
 800232c:	d072      	beq.n	8002414 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800232e:	6a3b      	ldr	r3, [r7, #32]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	f043 0302 	orr.w	r3, r3, #2
 8002364:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	f043 0304 	orr.w	r3, r3, #4
 8002380:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002382:	6a3b      	ldr	r3, [r7, #32]
 8002384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002388:	2b00      	cmp	r3, #0
 800238a:	d043      	beq.n	8002414 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002392:	2b00      	cmp	r3, #0
 8002394:	d03e      	beq.n	8002414 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d02b      	beq.n	80023f8 <HAL_CAN_IRQHandler+0x32a>
 80023a0:	2b60      	cmp	r3, #96	; 0x60
 80023a2:	d82e      	bhi.n	8002402 <HAL_CAN_IRQHandler+0x334>
 80023a4:	2b50      	cmp	r3, #80	; 0x50
 80023a6:	d022      	beq.n	80023ee <HAL_CAN_IRQHandler+0x320>
 80023a8:	2b50      	cmp	r3, #80	; 0x50
 80023aa:	d82a      	bhi.n	8002402 <HAL_CAN_IRQHandler+0x334>
 80023ac:	2b40      	cmp	r3, #64	; 0x40
 80023ae:	d019      	beq.n	80023e4 <HAL_CAN_IRQHandler+0x316>
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d826      	bhi.n	8002402 <HAL_CAN_IRQHandler+0x334>
 80023b4:	2b30      	cmp	r3, #48	; 0x30
 80023b6:	d010      	beq.n	80023da <HAL_CAN_IRQHandler+0x30c>
 80023b8:	2b30      	cmp	r3, #48	; 0x30
 80023ba:	d822      	bhi.n	8002402 <HAL_CAN_IRQHandler+0x334>
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d002      	beq.n	80023c6 <HAL_CAN_IRQHandler+0x2f8>
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d005      	beq.n	80023d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80023c4:	e01d      	b.n	8002402 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023ce:	e019      	b.n	8002404 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	f043 0310 	orr.w	r3, r3, #16
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023d8:	e014      	b.n	8002404 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	f043 0320 	orr.w	r3, r3, #32
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023e2:	e00f      	b.n	8002404 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023ec:	e00a      	b.n	8002404 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80023ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80023f6:	e005      	b.n	8002404 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80023f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002400:	e000      	b.n	8002404 <HAL_CAN_IRQHandler+0x336>
            break;
 8002402:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	699a      	ldr	r2, [r3, #24]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002412:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2204      	movs	r2, #4
 800241a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d008      	beq.n	8002434 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f872 	bl	8002518 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002434:	bf00      	nop
 8002436:	3728      	adds	r7, #40	; 0x28
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}

0800243c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002520:	bf00      	nop
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800253c:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002548:	4013      	ands	r3, r2
 800254a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800255c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800255e:	4a04      	ldr	r2, [pc, #16]	; (8002570 <__NVIC_SetPriorityGrouping+0x44>)
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	60d3      	str	r3, [r2, #12]
}
 8002564:	bf00      	nop
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000ed00 	.word	0xe000ed00

08002574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <__NVIC_GetPriorityGrouping+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	f003 0307 	and.w	r3, r3, #7
}
 8002582:	4618      	mov	r0, r3
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	db0b      	blt.n	80025ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	f003 021f 	and.w	r2, r3, #31
 80025a8:	4907      	ldr	r1, [pc, #28]	; (80025c8 <__NVIC_EnableIRQ+0x38>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	095b      	lsrs	r3, r3, #5
 80025b0:	2001      	movs	r0, #1
 80025b2:	fa00 f202 	lsl.w	r2, r0, r2
 80025b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ba:	bf00      	nop
 80025bc:	370c      	adds	r7, #12
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	e000e100 	.word	0xe000e100

080025cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	6039      	str	r1, [r7, #0]
 80025d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	db0a      	blt.n	80025f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	490c      	ldr	r1, [pc, #48]	; (8002618 <__NVIC_SetPriority+0x4c>)
 80025e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ea:	0112      	lsls	r2, r2, #4
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	440b      	add	r3, r1
 80025f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f4:	e00a      	b.n	800260c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	b2da      	uxtb	r2, r3
 80025fa:	4908      	ldr	r1, [pc, #32]	; (800261c <__NVIC_SetPriority+0x50>)
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	3b04      	subs	r3, #4
 8002604:	0112      	lsls	r2, r2, #4
 8002606:	b2d2      	uxtb	r2, r2
 8002608:	440b      	add	r3, r1
 800260a:	761a      	strb	r2, [r3, #24]
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr
 8002618:	e000e100 	.word	0xe000e100
 800261c:	e000ed00 	.word	0xe000ed00

08002620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002620:	b480      	push	{r7}
 8002622:	b089      	sub	sp, #36	; 0x24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0307 	and.w	r3, r3, #7
 8002632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f1c3 0307 	rsb	r3, r3, #7
 800263a:	2b04      	cmp	r3, #4
 800263c:	bf28      	it	cs
 800263e:	2304      	movcs	r3, #4
 8002640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	3304      	adds	r3, #4
 8002646:	2b06      	cmp	r3, #6
 8002648:	d902      	bls.n	8002650 <NVIC_EncodePriority+0x30>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3b03      	subs	r3, #3
 800264e:	e000      	b.n	8002652 <NVIC_EncodePriority+0x32>
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	f04f 32ff 	mov.w	r2, #4294967295
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43da      	mvns	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	401a      	ands	r2, r3
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002668:	f04f 31ff 	mov.w	r1, #4294967295
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	43d9      	mvns	r1, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002678:	4313      	orrs	r3, r2
         );
}
 800267a:	4618      	mov	r0, r3
 800267c:	3724      	adds	r7, #36	; 0x24
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002698:	d301      	bcc.n	800269e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269a:	2301      	movs	r3, #1
 800269c:	e00f      	b.n	80026be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269e:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <SysTick_Config+0x40>)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a6:	210f      	movs	r1, #15
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f7ff ff8e 	bl	80025cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SysTick_Config+0x40>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b6:	4b04      	ldr	r3, [pc, #16]	; (80026c8 <SysTick_Config+0x40>)
 80026b8:	2207      	movs	r2, #7
 80026ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	e000e010 	.word	0xe000e010

080026cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff29 	bl	800252c <__NVIC_SetPriorityGrouping>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b086      	sub	sp, #24
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	607a      	str	r2, [r7, #4]
 80026ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f4:	f7ff ff3e 	bl	8002574 <__NVIC_GetPriorityGrouping>
 80026f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	6978      	ldr	r0, [r7, #20]
 8002700:	f7ff ff8e 	bl	8002620 <NVIC_EncodePriority>
 8002704:	4602      	mov	r2, r0
 8002706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270a:	4611      	mov	r1, r2
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff5d 	bl	80025cc <__NVIC_SetPriority>
}
 8002712:	bf00      	nop
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}

0800271a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271a:	b580      	push	{r7, lr}
 800271c:	b082      	sub	sp, #8
 800271e:	af00      	add	r7, sp, #0
 8002720:	4603      	mov	r3, r0
 8002722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff31 	bl	8002590 <__NVIC_EnableIRQ>
}
 800272e:	bf00      	nop
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7ff ffa2 	bl	8002688 <SysTick_Config>
 8002744:	4603      	mov	r3, r0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
	...

08002750 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800275c:	f7ff f854 	bl	8001808 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e099      	b.n	80028a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800278c:	e00f      	b.n	80027ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278e:	f7ff f83b 	bl	8001808 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b05      	cmp	r3, #5
 800279a:	d908      	bls.n	80027ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2203      	movs	r2, #3
 80027a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e078      	b.n	80028a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1e8      	bne.n	800278e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	4b38      	ldr	r3, [pc, #224]	; (80028a8 <HAL_DMA_Init+0x158>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	2b04      	cmp	r3, #4
 8002806:	d107      	bne.n	8002818 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	4313      	orrs	r3, r2
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	697a      	ldr	r2, [r7, #20]
 800281e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	695b      	ldr	r3, [r3, #20]
 8002826:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	f023 0307 	bic.w	r3, r3, #7
 800282e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	2b04      	cmp	r3, #4
 8002840:	d117      	bne.n	8002872 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	4313      	orrs	r3, r2
 800284a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00e      	beq.n	8002872 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 fa91 	bl	8002d7c <DMA_CheckFifoParam>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d008      	beq.n	8002872 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800286e:	2301      	movs	r3, #1
 8002870:	e016      	b.n	80028a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fa48 	bl	8002d10 <DMA_CalcBaseAndBitshift>
 8002880:	4603      	mov	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	223f      	movs	r2, #63	; 0x3f
 800288a:	409a      	lsls	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3718      	adds	r7, #24
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	f010803f 	.word	0xf010803f

080028ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ba:	2300      	movs	r3, #0
 80028bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d101      	bne.n	80028d2 <HAL_DMA_Start_IT+0x26>
 80028ce:	2302      	movs	r3, #2
 80028d0:	e040      	b.n	8002954 <HAL_DMA_Start_IT+0xa8>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2201      	movs	r2, #1
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d12f      	bne.n	8002946 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2202      	movs	r2, #2
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68b9      	ldr	r1, [r7, #8]
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f9da 	bl	8002cb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	223f      	movs	r2, #63	; 0x3f
 8002906:	409a      	lsls	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0216 	orr.w	r2, r2, #22
 800291a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002920:	2b00      	cmp	r3, #0
 8002922:	d007      	beq.n	8002934 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f042 0208 	orr.w	r2, r2, #8
 8002932:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	e005      	b.n	8002952 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800294e:	2302      	movs	r3, #2
 8002950:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002952:	7dfb      	ldrb	r3, [r7, #23]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3718      	adds	r7, #24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d004      	beq.n	800297a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e00c      	b.n	8002994 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2205      	movs	r2, #5
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029ac:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <HAL_DMA_IRQHandler+0x258>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a92      	ldr	r2, [pc, #584]	; (8002bfc <HAL_DMA_IRQHandler+0x25c>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0a9b      	lsrs	r3, r3, #10
 80029b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2208      	movs	r2, #8
 80029cc:	409a      	lsls	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	2208      	movs	r2, #8
 80029fa:	409a      	lsls	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2201      	movs	r2, #1
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2201      	movs	r2, #1
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2204      	movs	r2, #4
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	2204      	movs	r2, #4
 8002a66:	409a      	lsls	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d043      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03c      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d018      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d024      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	e01f      	b.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e016      	b.n	8002b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0208 	bic.w	r2, r2, #8
 8002afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2220      	movs	r2, #32
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 808e 	beq.w	8002c3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8086 	beq.w	8002c3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2220      	movs	r2, #32
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d136      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x1da>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	223f      	movs	r2, #63	; 0x3f
 8002b90:	409a      	lsls	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07d      	beq.n	8002caa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
        }
        return;
 8002bb6:	e078      	b.n	8002caa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01c      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d108      	bne.n	8002be6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d030      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e02b      	b.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d027      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
 8002bf6:	e022      	b.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
 8002bf8:	20000004 	.word	0x20000004
 8002bfc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0210 	bic.w	r2, r2, #16
 8002c1c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d032      	beq.n	8002cac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d022      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2205      	movs	r2, #5
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d307      	bcc.n	8002c86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f2      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x2ca>
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c86:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
 8002ca8:	e000      	b.n	8002cac <HAL_DMA_IRQHandler+0x30c>
        return;
 8002caa:	bf00      	nop
    }
  }
}
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop

08002cb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b40      	cmp	r3, #64	; 0x40
 8002ce0:	d108      	bne.n	8002cf4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68ba      	ldr	r2, [r7, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cf2:	e007      	b.n	8002d04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
}
 8002d04:	bf00      	nop
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	3b10      	subs	r3, #16
 8002d20:	4a14      	ldr	r2, [pc, #80]	; (8002d74 <DMA_CalcBaseAndBitshift+0x64>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d2a:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <DMA_CalcBaseAndBitshift+0x68>)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	4413      	add	r3, r2
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d909      	bls.n	8002d52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d46:	f023 0303 	bic.w	r3, r3, #3
 8002d4a:	1d1a      	adds	r2, r3, #4
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	659a      	str	r2, [r3, #88]	; 0x58
 8002d50:	e007      	b.n	8002d62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3714      	adds	r7, #20
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	aaaaaaab 	.word	0xaaaaaaab
 8002d78:	080070dc 	.word	0x080070dc

08002d7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b085      	sub	sp, #20
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d11f      	bne.n	8002dd6 <DMA_CheckFifoParam+0x5a>
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d856      	bhi.n	8002e4a <DMA_CheckFifoParam+0xce>
 8002d9c:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <DMA_CheckFifoParam+0x28>)
 8002d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da2:	bf00      	nop
 8002da4:	08002db5 	.word	0x08002db5
 8002da8:	08002dc7 	.word	0x08002dc7
 8002dac:	08002db5 	.word	0x08002db5
 8002db0:	08002e4b 	.word	0x08002e4b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d046      	beq.n	8002e4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc4:	e043      	b.n	8002e4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dce:	d140      	bne.n	8002e52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd4:	e03d      	b.n	8002e52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dde:	d121      	bne.n	8002e24 <DMA_CheckFifoParam+0xa8>
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2b03      	cmp	r3, #3
 8002de4:	d837      	bhi.n	8002e56 <DMA_CheckFifoParam+0xda>
 8002de6:	a201      	add	r2, pc, #4	; (adr r2, 8002dec <DMA_CheckFifoParam+0x70>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002dfd 	.word	0x08002dfd
 8002df0:	08002e03 	.word	0x08002e03
 8002df4:	08002dfd 	.word	0x08002dfd
 8002df8:	08002e15 	.word	0x08002e15
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002e00:	e030      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d025      	beq.n	8002e5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e12:	e022      	b.n	8002e5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e1c:	d11f      	bne.n	8002e5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e22:	e01c      	b.n	8002e5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d903      	bls.n	8002e32 <DMA_CheckFifoParam+0xb6>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d003      	beq.n	8002e38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e30:	e018      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
      break;
 8002e36:	e015      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	e00b      	b.n	8002e62 <DMA_CheckFifoParam+0xe6>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e00a      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e008      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
 8002e54:	e006      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e56:	bf00      	nop
 8002e58:	e004      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e5a:	bf00      	nop
 8002e5c:	e002      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;   
 8002e5e:	bf00      	nop
 8002e60:	e000      	b.n	8002e64 <DMA_CheckFifoParam+0xe8>
      break;
 8002e62:	bf00      	nop
    }
  } 
  
  return status; 
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3714      	adds	r7, #20
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop

08002e74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b089      	sub	sp, #36	; 0x24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e177      	b.n	8003180 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e90:	2201      	movs	r2, #1
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	697a      	ldr	r2, [r7, #20]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f040 8166 	bne.w	800317a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d00b      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d007      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ec2:	2b11      	cmp	r3, #17
 8002ec4:	d003      	beq.n	8002ece <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	2b12      	cmp	r3, #18
 8002ecc:	d130      	bne.n	8002f30 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	2203      	movs	r2, #3
 8002eda:	fa02 f303 	lsl.w	r3, r2, r3
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f04:	2201      	movs	r2, #1
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 0201 	and.w	r2, r3, #1
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0xfc>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d123      	bne.n	8002fb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	08da      	lsrs	r2, r3, #3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3208      	adds	r2, #8
 8002f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	220f      	movs	r2, #15
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	43db      	mvns	r3, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	4013      	ands	r3, r2
 8002f92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	69ba      	ldr	r2, [r7, #24]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3208      	adds	r2, #8
 8002fb2:	69b9      	ldr	r1, [r7, #24]
 8002fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	2203      	movs	r2, #3
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0203 	and.w	r2, r3, #3
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80c0 	beq.w	800317a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	4b66      	ldr	r3, [pc, #408]	; (8003198 <HAL_GPIO_Init+0x324>)
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	4a65      	ldr	r2, [pc, #404]	; (8003198 <HAL_GPIO_Init+0x324>)
 8003004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003008:	6453      	str	r3, [r2, #68]	; 0x44
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_GPIO_Init+0x324>)
 800300c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003016:	4a61      	ldr	r2, [pc, #388]	; (800319c <HAL_GPIO_Init+0x328>)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	089b      	lsrs	r3, r3, #2
 800301c:	3302      	adds	r3, #2
 800301e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	220f      	movs	r2, #15
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a58      	ldr	r2, [pc, #352]	; (80031a0 <HAL_GPIO_Init+0x32c>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d037      	beq.n	80030b2 <HAL_GPIO_Init+0x23e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a57      	ldr	r2, [pc, #348]	; (80031a4 <HAL_GPIO_Init+0x330>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d031      	beq.n	80030ae <HAL_GPIO_Init+0x23a>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a56      	ldr	r2, [pc, #344]	; (80031a8 <HAL_GPIO_Init+0x334>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d02b      	beq.n	80030aa <HAL_GPIO_Init+0x236>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a55      	ldr	r2, [pc, #340]	; (80031ac <HAL_GPIO_Init+0x338>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d025      	beq.n	80030a6 <HAL_GPIO_Init+0x232>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a54      	ldr	r2, [pc, #336]	; (80031b0 <HAL_GPIO_Init+0x33c>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d01f      	beq.n	80030a2 <HAL_GPIO_Init+0x22e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a53      	ldr	r2, [pc, #332]	; (80031b4 <HAL_GPIO_Init+0x340>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d019      	beq.n	800309e <HAL_GPIO_Init+0x22a>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a52      	ldr	r2, [pc, #328]	; (80031b8 <HAL_GPIO_Init+0x344>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_GPIO_Init+0x226>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a51      	ldr	r2, [pc, #324]	; (80031bc <HAL_GPIO_Init+0x348>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00d      	beq.n	8003096 <HAL_GPIO_Init+0x222>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a50      	ldr	r2, [pc, #320]	; (80031c0 <HAL_GPIO_Init+0x34c>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d007      	beq.n	8003092 <HAL_GPIO_Init+0x21e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a4f      	ldr	r2, [pc, #316]	; (80031c4 <HAL_GPIO_Init+0x350>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d101      	bne.n	800308e <HAL_GPIO_Init+0x21a>
 800308a:	2309      	movs	r3, #9
 800308c:	e012      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 800308e:	230a      	movs	r3, #10
 8003090:	e010      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 8003092:	2308      	movs	r3, #8
 8003094:	e00e      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 8003096:	2307      	movs	r3, #7
 8003098:	e00c      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 800309a:	2306      	movs	r3, #6
 800309c:	e00a      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 800309e:	2305      	movs	r3, #5
 80030a0:	e008      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 80030a2:	2304      	movs	r3, #4
 80030a4:	e006      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 80030a6:	2303      	movs	r3, #3
 80030a8:	e004      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 80030aa:	2302      	movs	r3, #2
 80030ac:	e002      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 80030ae:	2301      	movs	r3, #1
 80030b0:	e000      	b.n	80030b4 <HAL_GPIO_Init+0x240>
 80030b2:	2300      	movs	r3, #0
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f002 0203 	and.w	r2, r2, #3
 80030ba:	0092      	lsls	r2, r2, #2
 80030bc:	4093      	lsls	r3, r2
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030c4:	4935      	ldr	r1, [pc, #212]	; (800319c <HAL_GPIO_Init+0x328>)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	089b      	lsrs	r3, r3, #2
 80030ca:	3302      	adds	r3, #2
 80030cc:	69ba      	ldr	r2, [r7, #24]
 80030ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030d2:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <HAL_GPIO_Init+0x354>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	4313      	orrs	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f6:	4a34      	ldr	r2, [pc, #208]	; (80031c8 <HAL_GPIO_Init+0x354>)
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_GPIO_Init+0x354>)
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	43db      	mvns	r3, r3
 8003106:	69ba      	ldr	r2, [r7, #24]
 8003108:	4013      	ands	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003120:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <HAL_GPIO_Init+0x354>)
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003126:	4b28      	ldr	r3, [pc, #160]	; (80031c8 <HAL_GPIO_Init+0x354>)
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	43db      	mvns	r3, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4013      	ands	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d003      	beq.n	800314a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4313      	orrs	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800314a:	4a1f      	ldr	r2, [pc, #124]	; (80031c8 <HAL_GPIO_Init+0x354>)
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003150:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <HAL_GPIO_Init+0x354>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	43db      	mvns	r3, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4013      	ands	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003174:	4a14      	ldr	r2, [pc, #80]	; (80031c8 <HAL_GPIO_Init+0x354>)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	3301      	adds	r3, #1
 800317e:	61fb      	str	r3, [r7, #28]
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b0f      	cmp	r3, #15
 8003184:	f67f ae84 	bls.w	8002e90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003188:	bf00      	nop
 800318a:	bf00      	nop
 800318c:	3724      	adds	r7, #36	; 0x24
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40023800 	.word	0x40023800
 800319c:	40013800 	.word	0x40013800
 80031a0:	40020000 	.word	0x40020000
 80031a4:	40020400 	.word	0x40020400
 80031a8:	40020800 	.word	0x40020800
 80031ac:	40020c00 	.word	0x40020c00
 80031b0:	40021000 	.word	0x40021000
 80031b4:	40021400 	.word	0x40021400
 80031b8:	40021800 	.word	0x40021800
 80031bc:	40021c00 	.word	0x40021c00
 80031c0:	40022000 	.word	0x40022000
 80031c4:	40022400 	.word	0x40022400
 80031c8:	40013c00 	.word	0x40013c00

080031cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	807b      	strh	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031dc:	787b      	ldrb	r3, [r7, #1]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e2:	887a      	ldrh	r2, [r7, #2]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031e8:	e003      	b.n	80031f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	041a      	lsls	r2, r3, #16
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	619a      	str	r2, [r3, #24]
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031fe:	b480      	push	{r7}
 8003200:	b083      	sub	sp, #12
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	887b      	ldrh	r3, [r7, #2]
 8003210:	401a      	ands	r2, r3
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	429a      	cmp	r2, r3
 8003216:	d104      	bne.n	8003222 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003218:	887b      	ldrh	r3, [r7, #2]
 800321a:	041a      	lsls	r2, r3, #16
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003220:	e002      	b.n	8003228 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	619a      	str	r2, [r3, #24]
}
 8003228:	bf00      	nop
 800322a:	370c      	adds	r7, #12
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr

08003234 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003240:	695a      	ldr	r2, [r3, #20]
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d006      	beq.n	8003258 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800324a:	4a05      	ldr	r2, [pc, #20]	; (8003260 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	4618      	mov	r0, r3
 8003254:	f002 fd60 	bl	8005d18 <HAL_GPIO_EXTI_Callback>
  }
}
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	40013c00 	.word	0x40013c00

08003264 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e25b      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d075      	beq.n	800336e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003282:	4ba3      	ldr	r3, [pc, #652]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b04      	cmp	r3, #4
 800328c:	d00c      	beq.n	80032a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4ba0      	ldr	r3, [pc, #640]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003296:	2b08      	cmp	r3, #8
 8003298:	d112      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800329a:	4b9d      	ldr	r3, [pc, #628]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032a6:	d10b      	bne.n	80032c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032a8:	4b99      	ldr	r3, [pc, #612]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d05b      	beq.n	800336c <HAL_RCC_OscConfig+0x108>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d157      	bne.n	800336c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e236      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d106      	bne.n	80032d8 <HAL_RCC_OscConfig+0x74>
 80032ca:	4b91      	ldr	r3, [pc, #580]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a90      	ldr	r2, [pc, #576]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032d4:	6013      	str	r3, [r2, #0]
 80032d6:	e01d      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x98>
 80032e2:	4b8b      	ldr	r3, [pc, #556]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a8a      	ldr	r2, [pc, #552]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	4b88      	ldr	r3, [pc, #544]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a87      	ldr	r2, [pc, #540]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0xb0>
 80032fc:	4b84      	ldr	r3, [pc, #528]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a83      	ldr	r2, [pc, #524]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b81      	ldr	r3, [pc, #516]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a80      	ldr	r2, [pc, #512]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800330e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003312:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d013      	beq.n	8003344 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800331c:	f7fe fa74 	bl	8001808 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003322:	e008      	b.n	8003336 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003324:	f7fe fa70 	bl	8001808 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	; 0x64
 8003330:	d901      	bls.n	8003336 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e1fb      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d0f0      	beq.n	8003324 <HAL_RCC_OscConfig+0xc0>
 8003342:	e014      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fe fa60 	bl	8001808 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800334c:	f7fe fa5c 	bl	8001808 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1e7      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800335e:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0xe8>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800336c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d063      	beq.n	8003442 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800337a:	4b65      	ldr	r3, [pc, #404]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00b      	beq.n	800339e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b62      	ldr	r3, [pc, #392]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800338e:	2b08      	cmp	r3, #8
 8003390:	d11c      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003392:	4b5f      	ldr	r3, [pc, #380]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d116      	bne.n	80033cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339e:	4b5c      	ldr	r3, [pc, #368]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d001      	beq.n	80033b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e1bb      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b6:	4b56      	ldr	r3, [pc, #344]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	4952      	ldr	r1, [pc, #328]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ca:	e03a      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d020      	beq.n	8003416 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033d4:	4b4f      	ldr	r3, [pc, #316]	; (8003514 <HAL_RCC_OscConfig+0x2b0>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033da:	f7fe fa15 	bl	8001808 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033e2:	f7fe fa11 	bl	8001808 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e19c      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f4:	4b46      	ldr	r3, [pc, #280]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	4940      	ldr	r1, [pc, #256]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003416:	4b3f      	ldr	r3, [pc, #252]	; (8003514 <HAL_RCC_OscConfig+0x2b0>)
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe f9f4 	bl	8001808 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003424:	f7fe f9f0 	bl	8001808 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e17b      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003436:	4b36      	ldr	r3, [pc, #216]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d030      	beq.n	80034b0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d016      	beq.n	8003484 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003456:	4b30      	ldr	r3, [pc, #192]	; (8003518 <HAL_RCC_OscConfig+0x2b4>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345c:	f7fe f9d4 	bl	8001808 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003464:	f7fe f9d0 	bl	8001808 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e15b      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	4b26      	ldr	r3, [pc, #152]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x200>
 8003482:	e015      	b.n	80034b0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003484:	4b24      	ldr	r3, [pc, #144]	; (8003518 <HAL_RCC_OscConfig+0x2b4>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800348a:	f7fe f9bd 	bl	8001808 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003492:	f7fe f9b9 	bl	8001808 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e144      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 80a0 	beq.w	80035fe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b13      	ldr	r3, [pc, #76]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_RCC_OscConfig+0x2ac>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b0b      	ldr	r3, [pc, #44]	; (800351c <HAL_RCC_OscConfig+0x2b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d121      	bne.n	800353e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <HAL_RCC_OscConfig+0x2b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a07      	ldr	r2, [pc, #28]	; (800351c <HAL_RCC_OscConfig+0x2b8>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fe f97f 	bl	8001808 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e011      	b.n	8003532 <HAL_RCC_OscConfig+0x2ce>
 800350e:	bf00      	nop
 8003510:	40023800 	.word	0x40023800
 8003514:	42470000 	.word	0x42470000
 8003518:	42470e80 	.word	0x42470e80
 800351c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003520:	f7fe f972 	bl	8001808 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	2b02      	cmp	r3, #2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0fd      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003532:	4b81      	ldr	r3, [pc, #516]	; (8003738 <HAL_RCC_OscConfig+0x4d4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0f0      	beq.n	8003520 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d106      	bne.n	8003554 <HAL_RCC_OscConfig+0x2f0>
 8003546:	4b7d      	ldr	r3, [pc, #500]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354a:	4a7c      	ldr	r2, [pc, #496]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	6713      	str	r3, [r2, #112]	; 0x70
 8003552:	e01c      	b.n	800358e <HAL_RCC_OscConfig+0x32a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b05      	cmp	r3, #5
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0x312>
 800355c:	4b77      	ldr	r3, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a76      	ldr	r2, [pc, #472]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003562:	f043 0304 	orr.w	r3, r3, #4
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
 8003568:	4b74      	ldr	r3, [pc, #464]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	4a73      	ldr	r2, [pc, #460]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	6713      	str	r3, [r2, #112]	; 0x70
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0x32a>
 8003576:	4b71      	ldr	r3, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357a:	4a70      	ldr	r2, [pc, #448]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6713      	str	r3, [r2, #112]	; 0x70
 8003582:	4b6e      	ldr	r3, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003586:	4a6d      	ldr	r2, [pc, #436]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003588:	f023 0304 	bic.w	r3, r3, #4
 800358c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d015      	beq.n	80035c2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003596:	f7fe f937 	bl	8001808 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800359c:	e00a      	b.n	80035b4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800359e:	f7fe f933 	bl	8001808 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e0bc      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b4:	4b61      	ldr	r3, [pc, #388]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d0ee      	beq.n	800359e <HAL_RCC_OscConfig+0x33a>
 80035c0:	e014      	b.n	80035ec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035c2:	f7fe f921 	bl	8001808 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035c8:	e00a      	b.n	80035e0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035ca:	f7fe f91d 	bl	8001808 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d8:	4293      	cmp	r3, r2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0a6      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e0:	4b56      	ldr	r3, [pc, #344]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1ee      	bne.n	80035ca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035ec:	7dfb      	ldrb	r3, [r7, #23]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035f2:	4b52      	ldr	r3, [pc, #328]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8092 	beq.w	800372c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003608:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	f003 030c 	and.w	r3, r3, #12
 8003610:	2b08      	cmp	r3, #8
 8003612:	d05c      	beq.n	80036ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d141      	bne.n	80036a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800361c:	4b48      	ldr	r3, [pc, #288]	; (8003740 <HAL_RCC_OscConfig+0x4dc>)
 800361e:	2200      	movs	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003622:	f7fe f8f1 	bl	8001808 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800362a:	f7fe f8ed 	bl	8001808 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e078      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800363c:	4b3f      	ldr	r3, [pc, #252]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	69da      	ldr	r2, [r3, #28]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	431a      	orrs	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	019b      	lsls	r3, r3, #6
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	085b      	lsrs	r3, r3, #1
 8003660:	3b01      	subs	r3, #1
 8003662:	041b      	lsls	r3, r3, #16
 8003664:	431a      	orrs	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366a:	061b      	lsls	r3, r3, #24
 800366c:	4933      	ldr	r1, [pc, #204]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003672:	4b33      	ldr	r3, [pc, #204]	; (8003740 <HAL_RCC_OscConfig+0x4dc>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003678:	f7fe f8c6 	bl	8001808 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003680:	f7fe f8c2 	bl	8001808 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e04d      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003692:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x41c>
 800369e:	e045      	b.n	800372c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a0:	4b27      	ldr	r3, [pc, #156]	; (8003740 <HAL_RCC_OscConfig+0x4dc>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a6:	f7fe f8af 	bl	8001808 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fe f8ab 	bl	8001808 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e036      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c0:	4b1e      	ldr	r3, [pc, #120]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x44a>
 80036cc:	e02e      	b.n	800372c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d101      	bne.n	80036da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e029      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <HAL_RCC_OscConfig+0x4d8>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d11c      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d115      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003702:	4013      	ands	r3, r2
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003708:	4293      	cmp	r3, r2
 800370a:	d10d      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003716:	429a      	cmp	r2, r3
 8003718:	d106      	bne.n	8003728 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d001      	beq.n	800372c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40007000 	.word	0x40007000
 800373c:	40023800 	.word	0x40023800
 8003740:	42470060 	.word	0x42470060

08003744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d101      	bne.n	8003758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0cc      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003758:	4b68      	ldr	r3, [pc, #416]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d90c      	bls.n	8003780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b65      	ldr	r3, [pc, #404]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b63      	ldr	r3, [pc, #396]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e0b8      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	2b00      	cmp	r3, #0
 800378a:	d020      	beq.n	80037ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0304 	and.w	r3, r3, #4
 8003794:	2b00      	cmp	r3, #0
 8003796:	d005      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003798:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	4a58      	ldr	r2, [pc, #352]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d005      	beq.n	80037bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b0:	4b53      	ldr	r3, [pc, #332]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	4a52      	ldr	r2, [pc, #328]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037bc:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	494d      	ldr	r1, [pc, #308]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d044      	beq.n	8003864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d107      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e2:	4b47      	ldr	r3, [pc, #284]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d119      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e07f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037fe:	2b03      	cmp	r3, #3
 8003800:	d107      	bne.n	8003812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	4b3f      	ldr	r3, [pc, #252]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e06f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003812:	4b3b      	ldr	r3, [pc, #236]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d101      	bne.n	8003822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e067      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003822:	4b37      	ldr	r3, [pc, #220]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f023 0203 	bic.w	r2, r3, #3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	4934      	ldr	r1, [pc, #208]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	4313      	orrs	r3, r2
 8003832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003834:	f7fd ffe8 	bl	8001808 <HAL_GetTick>
 8003838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383a:	e00a      	b.n	8003852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fd ffe4 	bl	8001808 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	f241 3288 	movw	r2, #5000	; 0x1388
 800384a:	4293      	cmp	r3, r2
 800384c:	d901      	bls.n	8003852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e04f      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003852:	4b2b      	ldr	r3, [pc, #172]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 020c 	and.w	r2, r3, #12
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	429a      	cmp	r2, r3
 8003862:	d1eb      	bne.n	800383c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003864:	4b25      	ldr	r3, [pc, #148]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 030f 	and.w	r3, r3, #15
 800386c:	683a      	ldr	r2, [r7, #0]
 800386e:	429a      	cmp	r2, r3
 8003870:	d20c      	bcs.n	800388c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003872:	4b22      	ldr	r3, [pc, #136]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387a:	4b20      	ldr	r3, [pc, #128]	; (80038fc <HAL_RCC_ClockConfig+0x1b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d001      	beq.n	800388c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e032      	b.n	80038f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b00      	cmp	r3, #0
 8003896:	d008      	beq.n	80038aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003898:	4b19      	ldr	r3, [pc, #100]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	4916      	ldr	r1, [pc, #88]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038a6:	4313      	orrs	r3, r2
 80038a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d009      	beq.n	80038ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038b6:	4b12      	ldr	r3, [pc, #72]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	490e      	ldr	r1, [pc, #56]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038c6:	4313      	orrs	r3, r2
 80038c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ca:	f000 f821 	bl	8003910 <HAL_RCC_GetSysClockFreq>
 80038ce:	4602      	mov	r2, r0
 80038d0:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	091b      	lsrs	r3, r3, #4
 80038d6:	f003 030f 	and.w	r3, r3, #15
 80038da:	490a      	ldr	r1, [pc, #40]	; (8003904 <HAL_RCC_ClockConfig+0x1c0>)
 80038dc:	5ccb      	ldrb	r3, [r1, r3]
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	4a09      	ldr	r2, [pc, #36]	; (8003908 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038e6:	4b09      	ldr	r3, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1c8>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fd ff48 	bl	8001780 <HAL_InitTick>

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	40023c00 	.word	0x40023c00
 8003900:	40023800 	.word	0x40023800
 8003904:	080070c4 	.word	0x080070c4
 8003908:	20000004 	.word	0x20000004
 800390c:	20000008 	.word	0x20000008

08003910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003910:	b5b0      	push	{r4, r5, r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003916:	2100      	movs	r1, #0
 8003918:	6079      	str	r1, [r7, #4]
 800391a:	2100      	movs	r1, #0
 800391c:	60f9      	str	r1, [r7, #12]
 800391e:	2100      	movs	r1, #0
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003922:	2100      	movs	r1, #0
 8003924:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003926:	4952      	ldr	r1, [pc, #328]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003928:	6889      	ldr	r1, [r1, #8]
 800392a:	f001 010c 	and.w	r1, r1, #12
 800392e:	2908      	cmp	r1, #8
 8003930:	d00d      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x3e>
 8003932:	2908      	cmp	r1, #8
 8003934:	f200 8094 	bhi.w	8003a60 <HAL_RCC_GetSysClockFreq+0x150>
 8003938:	2900      	cmp	r1, #0
 800393a:	d002      	beq.n	8003942 <HAL_RCC_GetSysClockFreq+0x32>
 800393c:	2904      	cmp	r1, #4
 800393e:	d003      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x38>
 8003940:	e08e      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003942:	4b4c      	ldr	r3, [pc, #304]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x164>)
 8003944:	60bb      	str	r3, [r7, #8]
       break;
 8003946:	e08e      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003948:	4b4b      	ldr	r3, [pc, #300]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x168>)
 800394a:	60bb      	str	r3, [r7, #8]
      break;
 800394c:	e08b      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800394e:	4948      	ldr	r1, [pc, #288]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003950:	6849      	ldr	r1, [r1, #4]
 8003952:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003956:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003958:	4945      	ldr	r1, [pc, #276]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 800395a:	6849      	ldr	r1, [r1, #4]
 800395c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003960:	2900      	cmp	r1, #0
 8003962:	d024      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003964:	4942      	ldr	r1, [pc, #264]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003966:	6849      	ldr	r1, [r1, #4]
 8003968:	0989      	lsrs	r1, r1, #6
 800396a:	4608      	mov	r0, r1
 800396c:	f04f 0100 	mov.w	r1, #0
 8003970:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003974:	f04f 0500 	mov.w	r5, #0
 8003978:	ea00 0204 	and.w	r2, r0, r4
 800397c:	ea01 0305 	and.w	r3, r1, r5
 8003980:	493d      	ldr	r1, [pc, #244]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x168>)
 8003982:	fb01 f003 	mul.w	r0, r1, r3
 8003986:	2100      	movs	r1, #0
 8003988:	fb01 f102 	mul.w	r1, r1, r2
 800398c:	1844      	adds	r4, r0, r1
 800398e:	493a      	ldr	r1, [pc, #232]	; (8003a78 <HAL_RCC_GetSysClockFreq+0x168>)
 8003990:	fba2 0101 	umull	r0, r1, r2, r1
 8003994:	1863      	adds	r3, r4, r1
 8003996:	4619      	mov	r1, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	461a      	mov	r2, r3
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	f7fc fc24 	bl	80001ec <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e04a      	b.n	8003a44 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b30      	ldr	r3, [pc, #192]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	461a      	mov	r2, r3
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039be:	f04f 0100 	mov.w	r1, #0
 80039c2:	ea02 0400 	and.w	r4, r2, r0
 80039c6:	ea03 0501 	and.w	r5, r3, r1
 80039ca:	4620      	mov	r0, r4
 80039cc:	4629      	mov	r1, r5
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	014b      	lsls	r3, r1, #5
 80039d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80039dc:	0142      	lsls	r2, r0, #5
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	1b00      	subs	r0, r0, r4
 80039e4:	eb61 0105 	sbc.w	r1, r1, r5
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	f04f 0300 	mov.w	r3, #0
 80039f0:	018b      	lsls	r3, r1, #6
 80039f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80039f6:	0182      	lsls	r2, r0, #6
 80039f8:	1a12      	subs	r2, r2, r0
 80039fa:	eb63 0301 	sbc.w	r3, r3, r1
 80039fe:	f04f 0000 	mov.w	r0, #0
 8003a02:	f04f 0100 	mov.w	r1, #0
 8003a06:	00d9      	lsls	r1, r3, #3
 8003a08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a0c:	00d0      	lsls	r0, r2, #3
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	1912      	adds	r2, r2, r4
 8003a14:	eb45 0303 	adc.w	r3, r5, r3
 8003a18:	f04f 0000 	mov.w	r0, #0
 8003a1c:	f04f 0100 	mov.w	r1, #0
 8003a20:	0299      	lsls	r1, r3, #10
 8003a22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a26:	0290      	lsls	r0, r2, #10
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	4619      	mov	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	461a      	mov	r2, r3
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	f7fc fbd8 	bl	80001ec <__aeabi_uldivmod>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4613      	mov	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <HAL_RCC_GetSysClockFreq+0x160>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	f003 0303 	and.w	r3, r3, #3
 8003a4e:	3301      	adds	r3, #1
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	60bb      	str	r3, [r7, #8]
      break;
 8003a5e:	e002      	b.n	8003a66 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <HAL_RCC_GetSysClockFreq+0x164>)
 8003a62:	60bb      	str	r3, [r7, #8]
      break;
 8003a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a66:	68bb      	ldr	r3, [r7, #8]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3710      	adds	r7, #16
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003a70:	40023800 	.word	0x40023800
 8003a74:	00f42400 	.word	0x00f42400
 8003a78:	00b71b00 	.word	0x00b71b00

08003a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000004 	.word	0x20000004

08003a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a98:	f7ff fff0 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b05      	ldr	r3, [pc, #20]	; (8003ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	0a9b      	lsrs	r3, r3, #10
 8003aa4:	f003 0307 	and.w	r3, r3, #7
 8003aa8:	4903      	ldr	r1, [pc, #12]	; (8003ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40023800 	.word	0x40023800
 8003ab8:	080070d4 	.word	0x080070d4

08003abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ac0:	f7ff ffdc 	bl	8003a7c <HAL_RCC_GetHCLKFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	0b5b      	lsrs	r3, r3, #13
 8003acc:	f003 0307 	and.w	r3, r3, #7
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	080070d4 	.word	0x080070d4

08003ae4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d101      	bne.n	8003af6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e01d      	b.n	8003b32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d106      	bne.n	8003b10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7fd fabc 	bl	8001088 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2202      	movs	r2, #2
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	4619      	mov	r1, r3
 8003b22:	4610      	mov	r0, r2
 8003b24:	f000 fdaa 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3708      	adds	r7, #8
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f042 0201 	orr.w	r2, r2, #1
 8003b50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0307 	and.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b06      	cmp	r3, #6
 8003b62:	d007      	beq.n	8003b74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b082      	sub	sp, #8
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e01d      	b.n	8003bd0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f815 	bl	8003bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2202      	movs	r2, #2
 8003bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	f000 fd5b 	bl	800467c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003be0:	bf00      	nop
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	6839      	ldr	r1, [r7, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f001 f826 	bl	8004c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <HAL_TIM_PWM_Start+0x74>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d004      	beq.n	8003c18 <HAL_TIM_PWM_Start+0x2c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a14      	ldr	r2, [pc, #80]	; (8003c64 <HAL_TIM_PWM_Start+0x78>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d101      	bne.n	8003c1c <HAL_TIM_PWM_Start+0x30>
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_TIM_PWM_Start+0x32>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d007      	beq.n	8003c32 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d007      	beq.n	8003c54 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0201 	orr.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40010400 	.word	0x40010400

08003c68 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b086      	sub	sp, #24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d101      	bne.n	8003c86 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003c82:	2302      	movs	r3, #2
 8003c84:	e0f3      	b.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8c:	b2db      	uxtb	r3, r3
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d10b      	bne.n	8003caa <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d104      	bne.n	8003ca2 <HAL_TIM_PWM_Start_DMA+0x3a>
 8003c98:	887b      	ldrh	r3, [r7, #2]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e0e5      	b.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2202      	movs	r2, #2
 8003ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	2b0c      	cmp	r3, #12
 8003cae:	f200 80ad 	bhi.w	8003e0c <HAL_TIM_PWM_Start_DMA+0x1a4>
 8003cb2:	a201      	add	r2, pc, #4	; (adr r2, 8003cb8 <HAL_TIM_PWM_Start_DMA+0x50>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003ced 	.word	0x08003ced
 8003cbc:	08003e0d 	.word	0x08003e0d
 8003cc0:	08003e0d 	.word	0x08003e0d
 8003cc4:	08003e0d 	.word	0x08003e0d
 8003cc8:	08003d35 	.word	0x08003d35
 8003ccc:	08003e0d 	.word	0x08003e0d
 8003cd0:	08003e0d 	.word	0x08003e0d
 8003cd4:	08003e0d 	.word	0x08003e0d
 8003cd8:	08003d7d 	.word	0x08003d7d
 8003cdc:	08003e0d 	.word	0x08003e0d
 8003ce0:	08003e0d 	.word	0x08003e0d
 8003ce4:	08003e0d 	.word	0x08003e0d
 8003ce8:	08003dc5 	.word	0x08003dc5
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	4a61      	ldr	r2, [pc, #388]	; (8003e78 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003cf2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	4a60      	ldr	r2, [pc, #384]	; (8003e7c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003cfa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	4a5f      	ldr	r2, [pc, #380]	; (8003e80 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003d02:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3334      	adds	r3, #52	; 0x34
 8003d10:	461a      	mov	r2, r3
 8003d12:	887b      	ldrh	r3, [r7, #2]
 8003d14:	f7fe fdca 	bl	80028ac <HAL_DMA_Start_IT>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e0a5      	b.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68da      	ldr	r2, [r3, #12]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d30:	60da      	str	r2, [r3, #12]
      break;
 8003d32:	e06c      	b.n	8003e0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d38:	4a4f      	ldr	r2, [pc, #316]	; (8003e78 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003d3a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	4a4e      	ldr	r2, [pc, #312]	; (8003e7c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d48:	4a4d      	ldr	r2, [pc, #308]	; (8003e80 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003d4a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3338      	adds	r3, #56	; 0x38
 8003d58:	461a      	mov	r2, r3
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	f7fe fda6 	bl	80028ac <HAL_DMA_Start_IT>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e081      	b.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68da      	ldr	r2, [r3, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d78:	60da      	str	r2, [r3, #12]
      break;
 8003d7a:	e048      	b.n	8003e0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d80:	4a3d      	ldr	r2, [pc, #244]	; (8003e78 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	4a3c      	ldr	r2, [pc, #240]	; (8003e7c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003d8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a3b      	ldr	r2, [pc, #236]	; (8003e80 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003d92:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003d98:	6879      	ldr	r1, [r7, #4]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	333c      	adds	r3, #60	; 0x3c
 8003da0:	461a      	mov	r2, r3
 8003da2:	887b      	ldrh	r3, [r7, #2]
 8003da4:	f7fe fd82 	bl	80028ac <HAL_DMA_Start_IT>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e05d      	b.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e024      	b.n	8003e0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	4a2b      	ldr	r2, [pc, #172]	; (8003e78 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003dca:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd0:	4a2a      	ldr	r2, [pc, #168]	; (8003e7c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	4a29      	ldr	r2, [pc, #164]	; (8003e80 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003dda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3340      	adds	r3, #64	; 0x40
 8003de8:	461a      	mov	r2, r3
 8003dea:	887b      	ldrh	r3, [r7, #2]
 8003dec:	f7fe fd5e 	bl	80028ac <HAL_DMA_Start_IT>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e039      	b.n	8003e6e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68da      	ldr	r2, [r3, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e08:	60da      	str	r2, [r3, #12]
      break;
 8003e0a:	e000      	b.n	8003e0e <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8003e0c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2201      	movs	r2, #1
 8003e14:	68b9      	ldr	r1, [r7, #8]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 ff1a 	bl	8004c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d004      	beq.n	8003e30 <HAL_TIM_PWM_Start_DMA+0x1c8>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a17      	ldr	r2, [pc, #92]	; (8003e88 <HAL_TIM_PWM_Start_DMA+0x220>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d101      	bne.n	8003e34 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8003e30:	2301      	movs	r3, #1
 8003e32:	e000      	b.n	8003e36 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8003e34:	2300      	movs	r3, #0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	2b06      	cmp	r3, #6
 8003e5a:	d007      	beq.n	8003e6c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3718      	adds	r7, #24
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	0800459d 	.word	0x0800459d
 8003e7c:	0800460d 	.word	0x0800460d
 8003e80:	08004579 	.word	0x08004579
 8003e84:	40010000 	.word	0x40010000
 8003e88:	40010400 	.word	0x40010400

08003e8c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	2b0c      	cmp	r3, #12
 8003e9a:	d855      	bhi.n	8003f48 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ed9 	.word	0x08003ed9
 8003ea8:	08003f49 	.word	0x08003f49
 8003eac:	08003f49 	.word	0x08003f49
 8003eb0:	08003f49 	.word	0x08003f49
 8003eb4:	08003ef5 	.word	0x08003ef5
 8003eb8:	08003f49 	.word	0x08003f49
 8003ebc:	08003f49 	.word	0x08003f49
 8003ec0:	08003f49 	.word	0x08003f49
 8003ec4:	08003f11 	.word	0x08003f11
 8003ec8:	08003f49 	.word	0x08003f49
 8003ecc:	08003f49 	.word	0x08003f49
 8003ed0:	08003f49 	.word	0x08003f49
 8003ed4:	08003f2d 	.word	0x08003f2d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ee6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fe fd35 	bl	800295c <HAL_DMA_Abort_IT>
      break;
 8003ef2:	e02a      	b.n	8003f4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68da      	ldr	r2, [r3, #12]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f02:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fe fd27 	bl	800295c <HAL_DMA_Abort_IT>
      break;
 8003f0e:	e01c      	b.n	8003f4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68da      	ldr	r2, [r3, #12]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f1e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	4618      	mov	r0, r3
 8003f26:	f7fe fd19 	bl	800295c <HAL_DMA_Abort_IT>
      break;
 8003f2a:	e00e      	b.n	8003f4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003f3a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fe fd0b 	bl	800295c <HAL_DMA_Abort_IT>
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003f48:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	6839      	ldr	r1, [r7, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fe7c 	bl	8004c50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a22      	ldr	r2, [pc, #136]	; (8003fe8 <HAL_TIM_PWM_Stop_DMA+0x15c>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d004      	beq.n	8003f6c <HAL_TIM_PWM_Stop_DMA+0xe0>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a21      	ldr	r2, [pc, #132]	; (8003fec <HAL_TIM_PWM_Stop_DMA+0x160>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d101      	bne.n	8003f70 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8003f70:	2300      	movs	r3, #0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d017      	beq.n	8003fa6 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10f      	bne.n	8003fa6 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	f240 4344 	movw	r3, #1092	; 0x444
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a1a      	ldr	r2, [r3, #32]
 8003fac:	f241 1311 	movw	r3, #4369	; 0x1111
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10f      	bne.n	8003fd6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6a1a      	ldr	r2, [r3, #32]
 8003fbc:	f240 4344 	movw	r3, #1092	; 0x444
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d107      	bne.n	8003fd6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f022 0201 	bic.w	r2, r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40010000 	.word	0x40010000
 8003fec:	40010400 	.word	0x40010400

08003ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691b      	ldr	r3, [r3, #16]
 8003ffe:	f003 0302 	and.w	r3, r3, #2
 8004002:	2b02      	cmp	r3, #2
 8004004:	d122      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b02      	cmp	r3, #2
 8004012:	d11b      	bne.n	800404c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f06f 0202 	mvn.w	r2, #2
 800401c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f003 0303 	and.w	r3, r3, #3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fa78 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8004038:	e005      	b.n	8004046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fa6a 	bl	8004514 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f002 fcbf 	bl	80069c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b04      	cmp	r3, #4
 8004058:	d122      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f003 0304 	and.w	r3, r3, #4
 8004064:	2b04      	cmp	r3, #4
 8004066:	d11b      	bne.n	80040a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f06f 0204 	mvn.w	r2, #4
 8004070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2202      	movs	r2, #2
 8004076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 fa4e 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 800408c:	e005      	b.n	800409a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 fa40 	bl	8004514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f002 fc95 	bl	80069c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0308 	and.w	r3, r3, #8
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d122      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d11b      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0208 	mvn.w	r2, #8
 80040c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2204      	movs	r2, #4
 80040ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 fa24 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 80040e0:	e005      	b.n	80040ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 fa16 	bl	8004514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040e8:	6878      	ldr	r0, [r7, #4]
 80040ea:	f002 fc6b 	bl	80069c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0310 	and.w	r3, r3, #16
 80040fe:	2b10      	cmp	r3, #16
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0210 	mvn.w	r2, #16
 8004118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2208      	movs	r2, #8
 800411e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	69db      	ldr	r3, [r3, #28]
 8004126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f9fa 	bl	8004528 <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f9ec 	bl	8004514 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f002 fc41 	bl	80069c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10e      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0301 	and.w	r3, r3, #1
 8004160:	2b01      	cmp	r3, #1
 8004162:	d107      	bne.n	8004174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0201 	mvn.w	r2, #1
 800416c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 ff20 	bl	8005fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b80      	cmp	r3, #128	; 0x80
 8004180:	d10e      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418c:	2b80      	cmp	r3, #128	; 0x80
 800418e:	d107      	bne.n	80041a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 fe56 	bl	8004e4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041aa:	2b40      	cmp	r3, #64	; 0x40
 80041ac:	d10e      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b8:	2b40      	cmp	r3, #64	; 0x40
 80041ba:	d107      	bne.n	80041cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9c2 	bl	8004550 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	f003 0320 	and.w	r3, r3, #32
 80041d6:	2b20      	cmp	r3, #32
 80041d8:	d10e      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	f003 0320 	and.w	r3, r3, #32
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d107      	bne.n	80041f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0220 	mvn.w	r2, #32
 80041f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 fe20 	bl	8004e38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f8:	bf00      	nop
 80041fa:	3708      	adds	r7, #8
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004216:	2302      	movs	r3, #2
 8004218:	e0b4      	b.n	8004384 <HAL_TIM_PWM_ConfigChannel+0x184>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2202      	movs	r2, #2
 8004226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	f200 809f 	bhi.w	8004370 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004232:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800426d 	.word	0x0800426d
 800423c:	08004371 	.word	0x08004371
 8004240:	08004371 	.word	0x08004371
 8004244:	08004371 	.word	0x08004371
 8004248:	080042ad 	.word	0x080042ad
 800424c:	08004371 	.word	0x08004371
 8004250:	08004371 	.word	0x08004371
 8004254:	08004371 	.word	0x08004371
 8004258:	080042ef 	.word	0x080042ef
 800425c:	08004371 	.word	0x08004371
 8004260:	08004371 	.word	0x08004371
 8004264:	08004371 	.word	0x08004371
 8004268:	0800432f 	.word	0x0800432f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 faa2 	bl	80047bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6999      	ldr	r1, [r3, #24]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	619a      	str	r2, [r3, #24]
      break;
 80042aa:	e062      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 faf2 	bl	800489c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	619a      	str	r2, [r3, #24]
      break;
 80042ec:	e041      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 fb47 	bl	8004988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0208 	orr.w	r2, r2, #8
 8004308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0204 	bic.w	r2, r2, #4
 8004318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	61da      	str	r2, [r3, #28]
      break;
 800432c:	e021      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fb9b 	bl	8004a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	021a      	lsls	r2, r3, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	61da      	str	r2, [r3, #28]
      break;
 800436e:	e000      	b.n	8004372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004370:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800439c:	2b01      	cmp	r3, #1
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_ConfigClockSource+0x18>
 80043a0:	2302      	movs	r3, #2
 80043a2:	e0b3      	b.n	800450c <HAL_TIM_ConfigClockSource+0x180>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2202      	movs	r2, #2
 80043b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80043c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043dc:	d03e      	beq.n	800445c <HAL_TIM_ConfigClockSource+0xd0>
 80043de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043e2:	f200 8087 	bhi.w	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 80043e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ea:	f000 8085 	beq.w	80044f8 <HAL_TIM_ConfigClockSource+0x16c>
 80043ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043f2:	d87f      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 80043f4:	2b70      	cmp	r3, #112	; 0x70
 80043f6:	d01a      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xa2>
 80043f8:	2b70      	cmp	r3, #112	; 0x70
 80043fa:	d87b      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 80043fc:	2b60      	cmp	r3, #96	; 0x60
 80043fe:	d050      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0x116>
 8004400:	2b60      	cmp	r3, #96	; 0x60
 8004402:	d877      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 8004404:	2b50      	cmp	r3, #80	; 0x50
 8004406:	d03c      	beq.n	8004482 <HAL_TIM_ConfigClockSource+0xf6>
 8004408:	2b50      	cmp	r3, #80	; 0x50
 800440a:	d873      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 800440c:	2b40      	cmp	r3, #64	; 0x40
 800440e:	d058      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x136>
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d86f      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 8004414:	2b30      	cmp	r3, #48	; 0x30
 8004416:	d064      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x156>
 8004418:	2b30      	cmp	r3, #48	; 0x30
 800441a:	d86b      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 800441c:	2b20      	cmp	r3, #32
 800441e:	d060      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x156>
 8004420:	2b20      	cmp	r3, #32
 8004422:	d867      	bhi.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d05c      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x156>
 8004428:	2b10      	cmp	r3, #16
 800442a:	d05a      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800442c:	e062      	b.n	80044f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6899      	ldr	r1, [r3, #8]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f000 fbe7 	bl	8004c10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004450:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	609a      	str	r2, [r3, #8]
      break;
 800445a:	e04e      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	6899      	ldr	r1, [r3, #8]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f000 fbd0 	bl	8004c10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	689a      	ldr	r2, [r3, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800447e:	609a      	str	r2, [r3, #8]
      break;
 8004480:	e03b      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	6859      	ldr	r1, [r3, #4]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	461a      	mov	r2, r3
 8004490:	f000 fb44 	bl	8004b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2150      	movs	r1, #80	; 0x50
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fb9d 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80044a0:	e02b      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 fb63 	bl	8004b7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2160      	movs	r1, #96	; 0x60
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 fb8d 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80044c0:	e01b      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 fb24 	bl	8004b1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2140      	movs	r1, #64	; 0x40
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 fb7d 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80044e0:	e00b      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4619      	mov	r1, r3
 80044ec:	4610      	mov	r0, r2
 80044ee:	f000 fb74 	bl	8004bda <TIM_ITRx_SetConfig>
      break;
 80044f2:	e002      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044f4:	bf00      	nop
 80044f6:	e000      	b.n	80044fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004584:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff ffe8 	bl	8004564 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004594:	bf00      	nop
 8004596:	3710      	adds	r7, #16
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}

0800459c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b084      	sub	sp, #16
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a8:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d103      	bne.n	80045c4 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2201      	movs	r2, #1
 80045c0:	771a      	strb	r2, [r3, #28]
 80045c2:	e019      	b.n	80045f8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d103      	bne.n	80045d6 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2202      	movs	r2, #2
 80045d2:	771a      	strb	r2, [r3, #28]
 80045d4:	e010      	b.n	80045f8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d103      	bne.n	80045e8 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2204      	movs	r2, #4
 80045e4:	771a      	strb	r2, [r3, #28]
 80045e6:	e007      	b.n	80045f8 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d102      	bne.n	80045f8 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	68f8      	ldr	r0, [r7, #12]
 80045fa:	f002 f9e3 	bl	80069c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	771a      	strb	r2, [r3, #28]
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	429a      	cmp	r2, r3
 800462a:	d103      	bne.n	8004634 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	771a      	strb	r2, [r3, #28]
 8004632:	e019      	b.n	8004668 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d103      	bne.n	8004646 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2202      	movs	r2, #2
 8004642:	771a      	strb	r2, [r3, #28]
 8004644:	e010      	b.n	8004668 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	687a      	ldr	r2, [r7, #4]
 800464c:	429a      	cmp	r2, r3
 800464e:	d103      	bne.n	8004658 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2204      	movs	r2, #4
 8004654:	771a      	strb	r2, [r3, #28]
 8004656:	e007      	b.n	8004668 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	429a      	cmp	r2, r3
 8004660:	d102      	bne.n	8004668 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2208      	movs	r2, #8
 8004666:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ff67 	bl	800453c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	771a      	strb	r2, [r3, #28]
}
 8004674:	bf00      	nop
 8004676:	3710      	adds	r7, #16
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}

0800467c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a40      	ldr	r2, [pc, #256]	; (8004790 <TIM_Base_SetConfig+0x114>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d013      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469a:	d00f      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a3d      	ldr	r2, [pc, #244]	; (8004794 <TIM_Base_SetConfig+0x118>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d00b      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3c      	ldr	r2, [pc, #240]	; (8004798 <TIM_Base_SetConfig+0x11c>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d007      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3b      	ldr	r2, [pc, #236]	; (800479c <TIM_Base_SetConfig+0x120>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d003      	beq.n	80046bc <TIM_Base_SetConfig+0x40>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3a      	ldr	r2, [pc, #232]	; (80047a0 <TIM_Base_SetConfig+0x124>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d108      	bne.n	80046ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	4a2f      	ldr	r2, [pc, #188]	; (8004790 <TIM_Base_SetConfig+0x114>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d02b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d027      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4a2c      	ldr	r2, [pc, #176]	; (8004794 <TIM_Base_SetConfig+0x118>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d023      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4a2b      	ldr	r2, [pc, #172]	; (8004798 <TIM_Base_SetConfig+0x11c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d01f      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <TIM_Base_SetConfig+0x120>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d01b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a29      	ldr	r2, [pc, #164]	; (80047a0 <TIM_Base_SetConfig+0x124>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d017      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	4a28      	ldr	r2, [pc, #160]	; (80047a4 <TIM_Base_SetConfig+0x128>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d013      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	4a27      	ldr	r2, [pc, #156]	; (80047a8 <TIM_Base_SetConfig+0x12c>)
 800470a:	4293      	cmp	r3, r2
 800470c:	d00f      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4a26      	ldr	r2, [pc, #152]	; (80047ac <TIM_Base_SetConfig+0x130>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00b      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4a25      	ldr	r2, [pc, #148]	; (80047b0 <TIM_Base_SetConfig+0x134>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d007      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a24      	ldr	r2, [pc, #144]	; (80047b4 <TIM_Base_SetConfig+0x138>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d003      	beq.n	800472e <TIM_Base_SetConfig+0xb2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <TIM_Base_SetConfig+0x13c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d108      	bne.n	8004740 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	4313      	orrs	r3, r2
 800473e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <TIM_Base_SetConfig+0x114>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d003      	beq.n	8004774 <TIM_Base_SetConfig+0xf8>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <TIM_Base_SetConfig+0x124>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d103      	bne.n	800477c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	615a      	str	r2, [r3, #20]
}
 8004782:	bf00      	nop
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	40010000 	.word	0x40010000
 8004794:	40000400 	.word	0x40000400
 8004798:	40000800 	.word	0x40000800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40010400 	.word	0x40010400
 80047a4:	40014000 	.word	0x40014000
 80047a8:	40014400 	.word	0x40014400
 80047ac:	40014800 	.word	0x40014800
 80047b0:	40001800 	.word	0x40001800
 80047b4:	40001c00 	.word	0x40001c00
 80047b8:	40002000 	.word	0x40002000

080047bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f023 0201 	bic.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f023 0302 	bic.w	r3, r3, #2
 8004804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	697a      	ldr	r2, [r7, #20]
 800480c:	4313      	orrs	r3, r2
 800480e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	4a20      	ldr	r2, [pc, #128]	; (8004894 <TIM_OC1_SetConfig+0xd8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d003      	beq.n	8004820 <TIM_OC1_SetConfig+0x64>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a1f      	ldr	r2, [pc, #124]	; (8004898 <TIM_OC1_SetConfig+0xdc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d10c      	bne.n	800483a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f023 0308 	bic.w	r3, r3, #8
 8004826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	4313      	orrs	r3, r2
 8004830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f023 0304 	bic.w	r3, r3, #4
 8004838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a15      	ldr	r2, [pc, #84]	; (8004894 <TIM_OC1_SetConfig+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_OC1_SetConfig+0x8e>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a14      	ldr	r2, [pc, #80]	; (8004898 <TIM_OC1_SetConfig+0xdc>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d111      	bne.n	800486e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004858:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	4313      	orrs	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	4313      	orrs	r3, r2
 800486c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	685a      	ldr	r2, [r3, #4]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	697a      	ldr	r2, [r7, #20]
 8004886:	621a      	str	r2, [r3, #32]
}
 8004888:	bf00      	nop
 800488a:	371c      	adds	r7, #28
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr
 8004894:	40010000 	.word	0x40010000
 8004898:	40010400 	.word	0x40010400

0800489c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800489c:	b480      	push	{r7}
 800489e:	b087      	sub	sp, #28
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	f023 0210 	bic.w	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f023 0320 	bic.w	r3, r3, #32
 80048e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a22      	ldr	r2, [pc, #136]	; (8004980 <TIM_OC2_SetConfig+0xe4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_OC2_SetConfig+0x68>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a21      	ldr	r2, [pc, #132]	; (8004984 <TIM_OC2_SetConfig+0xe8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d10d      	bne.n	8004920 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800490a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800491e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	4a17      	ldr	r2, [pc, #92]	; (8004980 <TIM_OC2_SetConfig+0xe4>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d003      	beq.n	8004930 <TIM_OC2_SetConfig+0x94>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	4a16      	ldr	r2, [pc, #88]	; (8004984 <TIM_OC2_SetConfig+0xe8>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d113      	bne.n	8004958 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800493e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	4313      	orrs	r3, r2
 800494a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4313      	orrs	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	685a      	ldr	r2, [r3, #4]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	621a      	str	r2, [r3, #32]
}
 8004972:	bf00      	nop
 8004974:	371c      	adds	r7, #28
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40010000 	.word	0x40010000
 8004984:	40010400 	.word	0x40010400

08004988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004988:	b480      	push	{r7}
 800498a:	b087      	sub	sp, #28
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a1b      	ldr	r3, [r3, #32]
 80049a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	4313      	orrs	r3, r2
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a21      	ldr	r2, [pc, #132]	; (8004a68 <TIM_OC3_SetConfig+0xe0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d003      	beq.n	80049ee <TIM_OC3_SetConfig+0x66>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a20      	ldr	r2, [pc, #128]	; (8004a6c <TIM_OC3_SetConfig+0xe4>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d10d      	bne.n	8004a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	021b      	lsls	r3, r3, #8
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a16      	ldr	r2, [pc, #88]	; (8004a68 <TIM_OC3_SetConfig+0xe0>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d003      	beq.n	8004a1a <TIM_OC3_SetConfig+0x92>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a15      	ldr	r2, [pc, #84]	; (8004a6c <TIM_OC3_SetConfig+0xe4>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d113      	bne.n	8004a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	011b      	lsls	r3, r3, #4
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	621a      	str	r2, [r3, #32]
}
 8004a5c:	bf00      	nop
 8004a5e:	371c      	adds	r7, #28
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40010400 	.word	0x40010400

08004a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	031b      	lsls	r3, r3, #12
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	4a12      	ldr	r2, [pc, #72]	; (8004b14 <TIM_OC4_SetConfig+0xa4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d003      	beq.n	8004ad8 <TIM_OC4_SetConfig+0x68>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4a11      	ldr	r2, [pc, #68]	; (8004b18 <TIM_OC4_SetConfig+0xa8>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d109      	bne.n	8004aec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ade:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	019b      	lsls	r3, r3, #6
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	621a      	str	r2, [r3, #32]
}
 8004b06:	bf00      	nop
 8004b08:	371c      	adds	r7, #28
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	40010000 	.word	0x40010000
 8004b18:	40010400 	.word	0x40010400

08004b1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b087      	sub	sp, #28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	f023 0201 	bic.w	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f023 030a 	bic.w	r3, r3, #10
 8004b58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	621a      	str	r2, [r3, #32]
}
 8004b6e:	bf00      	nop
 8004b70:	371c      	adds	r7, #28
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b087      	sub	sp, #28
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ba4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	031b      	lsls	r3, r3, #12
 8004baa:	697a      	ldr	r2, [r7, #20]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	621a      	str	r2, [r3, #32]
}
 8004bce:	bf00      	nop
 8004bd0:	371c      	adds	r7, #28
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr

08004bda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	f043 0307 	orr.w	r3, r3, #7
 8004bfc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	609a      	str	r2, [r3, #8]
}
 8004c04:	bf00      	nop
 8004c06:	3714      	adds	r7, #20
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b087      	sub	sp, #28
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
 8004c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	021a      	lsls	r2, r3, #8
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	431a      	orrs	r2, r3
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	697a      	ldr	r2, [r7, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	609a      	str	r2, [r3, #8]
}
 8004c44:	bf00      	nop
 8004c46:	371c      	adds	r7, #28
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b087      	sub	sp, #28
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f003 031f 	and.w	r3, r3, #31
 8004c62:	2201      	movs	r2, #1
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6a1a      	ldr	r2, [r3, #32]
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	43db      	mvns	r3, r3
 8004c72:	401a      	ands	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1a      	ldr	r2, [r3, #32]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	fa01 f303 	lsl.w	r3, r1, r3
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
}
 8004c8e:	bf00      	nop
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr
	...

08004c9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d101      	bne.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	e05a      	b.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68fa      	ldr	r2, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a21      	ldr	r2, [pc, #132]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d00:	d01d      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1a      	ldr	r2, [pc, #104]	; (8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a18      	ldr	r2, [pc, #96]	; (8004d88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d10c      	bne.n	8004d58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	40010000 	.word	0x40010000
 8004d7c:	40000400 	.word	0x40000400
 8004d80:	40000800 	.word	0x40000800
 8004d84:	40000c00 	.word	0x40000c00
 8004d88:	40010400 	.word	0x40010400
 8004d8c:	40014000 	.word	0x40014000
 8004d90:	40001800 	.word	0x40001800

08004d94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d101      	bne.n	8004db0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dac:	2302      	movs	r3, #2
 8004dae:	e03d      	b.n	8004e2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b083      	sub	sp, #12
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr

08004e4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b083      	sub	sp, #12
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e54:	bf00      	nop
 8004e56:	370c      	adds	r7, #12
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr

08004e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d101      	bne.n	8004e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e03f      	b.n	8004ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d106      	bne.n	8004e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fc fb76 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2224      	movs	r2, #36	; 0x24
 8004e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 fa69 	bl	800537c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	691a      	ldr	r2, [r3, #16]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	695a      	ldr	r2, [r3, #20]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b088      	sub	sp, #32
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004f20:	2300      	movs	r3, #0
 8004f22:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d10d      	bne.n	8004f4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d008      	beq.n	8004f4e <HAL_UART_IRQHandler+0x52>
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d003      	beq.n	8004f4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 f996 	bl	8005278 <UART_Receive_IT>
      return;
 8004f4c:	e0d0      	b.n	80050f0 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80b0 	beq.w	80050b6 <HAL_UART_IRQHandler+0x1ba>
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d105      	bne.n	8004f6c <HAL_UART_IRQHandler+0x70>
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	f000 80a5 	beq.w	80050b6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_UART_IRQHandler+0x90>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	f043 0201 	orr.w	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00a      	beq.n	8004fac <HAL_UART_IRQHandler+0xb0>
 8004f96:	697b      	ldr	r3, [r7, #20]
 8004f98:	f003 0301 	and.w	r3, r3, #1
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d005      	beq.n	8004fac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa4:	f043 0202 	orr.w	r2, r3, #2
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <HAL_UART_IRQHandler+0xd0>
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d005      	beq.n	8004fcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc4:	f043 0204 	orr.w	r2, r3, #4
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00f      	beq.n	8004ff6 <HAL_UART_IRQHandler+0xfa>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f003 0320 	and.w	r3, r3, #32
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d104      	bne.n	8004fea <HAL_UART_IRQHandler+0xee>
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fee:	f043 0208 	orr.w	r2, r3, #8
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d077      	beq.n	80050ee <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d007      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f930 	bl	8005278 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	bf0c      	ite	eq
 8005026:	2301      	moveq	r3, #1
 8005028:	2300      	movne	r3, #0
 800502a:	b2db      	uxtb	r3, r3
 800502c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005032:	f003 0308 	and.w	r3, r3, #8
 8005036:	2b00      	cmp	r3, #0
 8005038:	d102      	bne.n	8005040 <HAL_UART_IRQHandler+0x144>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d031      	beq.n	80050a4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 f879 	bl	8005138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b40      	cmp	r3, #64	; 0x40
 8005052:	d123      	bne.n	800509c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	695a      	ldr	r2, [r3, #20]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005062:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005068:	2b00      	cmp	r3, #0
 800506a:	d013      	beq.n	8005094 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005070:	4a21      	ldr	r2, [pc, #132]	; (80050f8 <HAL_UART_IRQHandler+0x1fc>)
 8005072:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005078:	4618      	mov	r0, r3
 800507a:	f7fd fc6f 	bl	800295c <HAL_DMA_Abort_IT>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d016      	beq.n	80050b2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800508e:	4610      	mov	r0, r2
 8005090:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005092:	e00e      	b.n	80050b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f845 	bl	8005124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800509a:	e00a      	b.n	80050b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f841 	bl	8005124 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a2:	e006      	b.n	80050b2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 f83d 	bl	8005124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80050b0:	e01d      	b.n	80050ee <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b2:	bf00      	nop
    return;
 80050b4:	e01b      	b.n	80050ee <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d008      	beq.n	80050d2 <HAL_UART_IRQHandler+0x1d6>
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f866 	bl	800519c <UART_Transmit_IT>
    return;
 80050d0:	e00e      	b.n	80050f0 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d009      	beq.n	80050f0 <HAL_UART_IRQHandler+0x1f4>
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d004      	beq.n	80050f0 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f8ae 	bl	8005248 <UART_EndTransmit_IT>
    return;
 80050ec:	e000      	b.n	80050f0 <HAL_UART_IRQHandler+0x1f4>
    return;
 80050ee:	bf00      	nop
  }
}
 80050f0:	3720      	adds	r7, #32
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	08005175 	.word	0x08005175

080050fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800514e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b084      	sub	sp, #16
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2200      	movs	r2, #0
 800518c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f7ff ffc8 	bl	8005124 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005194:	bf00      	nop
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b21      	cmp	r3, #33	; 0x21
 80051ae:	d144      	bne.n	800523a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b8:	d11a      	bne.n	80051f0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	881b      	ldrh	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ce:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d105      	bne.n	80051e4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	1c9a      	adds	r2, r3, #2
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	621a      	str	r2, [r3, #32]
 80051e2:	e00e      	b.n	8005202 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1b      	ldr	r3, [r3, #32]
 80051e8:	1c5a      	adds	r2, r3, #1
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	621a      	str	r2, [r3, #32]
 80051ee:	e008      	b.n	8005202 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	1c59      	adds	r1, r3, #1
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	6211      	str	r1, [r2, #32]
 80051fa:	781a      	ldrb	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005206:	b29b      	uxth	r3, r3
 8005208:	3b01      	subs	r3, #1
 800520a:	b29b      	uxth	r3, r3
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	4619      	mov	r1, r3
 8005210:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68da      	ldr	r2, [r3, #12]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005224:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005234:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	e000      	b.n	800523c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800523a:	2302      	movs	r3, #2
  }
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff ff47 	bl	80050fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b22      	cmp	r3, #34	; 0x22
 800528a:	d171      	bne.n	8005370 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005294:	d123      	bne.n	80052de <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10e      	bne.n	80052c2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ba:	1c9a      	adds	r2, r3, #2
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	; 0x28
 80052c0:	e029      	b.n	8005316 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	1c5a      	adds	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28
 80052dc:	e01b      	b.n	8005316 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6858      	ldr	r0, [r3, #4]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f0:	1c59      	adds	r1, r3, #1
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	6291      	str	r1, [r2, #40]	; 0x28
 80052f6:	b2c2      	uxtb	r2, r0
 80052f8:	701a      	strb	r2, [r3, #0]
 80052fa:	e00c      	b.n	8005316 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	b2da      	uxtb	r2, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	1c58      	adds	r0, r3, #1
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	6288      	str	r0, [r1, #40]	; 0x28
 800530e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29b      	uxth	r3, r3
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	4619      	mov	r1, r3
 8005324:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005326:	2b00      	cmp	r3, #0
 8005328:	d120      	bne.n	800536c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68da      	ldr	r2, [r3, #12]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0220 	bic.w	r2, r2, #32
 8005338:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68da      	ldr	r2, [r3, #12]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005348:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	695a      	ldr	r2, [r3, #20]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fed4 	bl	8005110 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e002      	b.n	8005372 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800536c:	2300      	movs	r3, #0
 800536e:	e000      	b.n	8005372 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005370:	2302      	movs	r3, #2
  }
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800537c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005380:	b0bd      	sub	sp, #244	; 0xf4
 8005382:	af00      	add	r7, sp, #0
 8005384:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005398:	68d9      	ldr	r1, [r3, #12]
 800539a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	ea40 0301 	orr.w	r3, r0, r1
 80053a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053aa:	689a      	ldr	r2, [r3, #8]
 80053ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	431a      	orrs	r2, r3
 80053bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80053c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053d4:	f021 010c 	bic.w	r1, r1, #12
 80053d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80053e2:	430b      	orrs	r3, r1
 80053e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	6999      	ldr	r1, [r3, #24]
 80053f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	ea40 0301 	orr.w	r3, r0, r1
 8005402:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800540e:	f040 81a5 	bne.w	800575c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	4bcd      	ldr	r3, [pc, #820]	; (8005750 <UART_SetConfig+0x3d4>)
 800541a:	429a      	cmp	r2, r3
 800541c:	d006      	beq.n	800542c <UART_SetConfig+0xb0>
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	4bcb      	ldr	r3, [pc, #812]	; (8005754 <UART_SetConfig+0x3d8>)
 8005426:	429a      	cmp	r2, r3
 8005428:	f040 80cb 	bne.w	80055c2 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800542c:	f7fe fb46 	bl	8003abc <HAL_RCC_GetPCLK2Freq>
 8005430:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005434:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005438:	461c      	mov	r4, r3
 800543a:	f04f 0500 	mov.w	r5, #0
 800543e:	4622      	mov	r2, r4
 8005440:	462b      	mov	r3, r5
 8005442:	1891      	adds	r1, r2, r2
 8005444:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8005448:	415b      	adcs	r3, r3
 800544a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800544e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005452:	1912      	adds	r2, r2, r4
 8005454:	eb45 0303 	adc.w	r3, r5, r3
 8005458:	f04f 0000 	mov.w	r0, #0
 800545c:	f04f 0100 	mov.w	r1, #0
 8005460:	00d9      	lsls	r1, r3, #3
 8005462:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005466:	00d0      	lsls	r0, r2, #3
 8005468:	4602      	mov	r2, r0
 800546a:	460b      	mov	r3, r1
 800546c:	1911      	adds	r1, r2, r4
 800546e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005472:	416b      	adcs	r3, r5
 8005474:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	461a      	mov	r2, r3
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	1891      	adds	r1, r2, r2
 8005486:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800548a:	415b      	adcs	r3, r3
 800548c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005490:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005494:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005498:	f7fa fea8 	bl	80001ec <__aeabi_uldivmod>
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4bad      	ldr	r3, [pc, #692]	; (8005758 <UART_SetConfig+0x3dc>)
 80054a2:	fba3 2302 	umull	r2, r3, r3, r2
 80054a6:	095b      	lsrs	r3, r3, #5
 80054a8:	011e      	lsls	r6, r3, #4
 80054aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80054ae:	461c      	mov	r4, r3
 80054b0:	f04f 0500 	mov.w	r5, #0
 80054b4:	4622      	mov	r2, r4
 80054b6:	462b      	mov	r3, r5
 80054b8:	1891      	adds	r1, r2, r2
 80054ba:	67b9      	str	r1, [r7, #120]	; 0x78
 80054bc:	415b      	adcs	r3, r3
 80054be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054c0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80054c4:	1912      	adds	r2, r2, r4
 80054c6:	eb45 0303 	adc.w	r3, r5, r3
 80054ca:	f04f 0000 	mov.w	r0, #0
 80054ce:	f04f 0100 	mov.w	r1, #0
 80054d2:	00d9      	lsls	r1, r3, #3
 80054d4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80054d8:	00d0      	lsls	r0, r2, #3
 80054da:	4602      	mov	r2, r0
 80054dc:	460b      	mov	r3, r1
 80054de:	1911      	adds	r1, r2, r4
 80054e0:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80054e4:	416b      	adcs	r3, r5
 80054e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80054ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	461a      	mov	r2, r3
 80054f2:	f04f 0300 	mov.w	r3, #0
 80054f6:	1891      	adds	r1, r2, r2
 80054f8:	6739      	str	r1, [r7, #112]	; 0x70
 80054fa:	415b      	adcs	r3, r3
 80054fc:	677b      	str	r3, [r7, #116]	; 0x74
 80054fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8005502:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8005506:	f7fa fe71 	bl	80001ec <__aeabi_uldivmod>
 800550a:	4602      	mov	r2, r0
 800550c:	460b      	mov	r3, r1
 800550e:	4b92      	ldr	r3, [pc, #584]	; (8005758 <UART_SetConfig+0x3dc>)
 8005510:	fba3 1302 	umull	r1, r3, r3, r2
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	2164      	movs	r1, #100	; 0x64
 8005518:	fb01 f303 	mul.w	r3, r1, r3
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	00db      	lsls	r3, r3, #3
 8005520:	3332      	adds	r3, #50	; 0x32
 8005522:	4a8d      	ldr	r2, [pc, #564]	; (8005758 <UART_SetConfig+0x3dc>)
 8005524:	fba2 2303 	umull	r2, r3, r2, r3
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	005b      	lsls	r3, r3, #1
 800552c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005530:	441e      	add	r6, r3
 8005532:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005536:	4618      	mov	r0, r3
 8005538:	f04f 0100 	mov.w	r1, #0
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	1894      	adds	r4, r2, r2
 8005542:	66bc      	str	r4, [r7, #104]	; 0x68
 8005544:	415b      	adcs	r3, r3
 8005546:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005548:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800554c:	1812      	adds	r2, r2, r0
 800554e:	eb41 0303 	adc.w	r3, r1, r3
 8005552:	f04f 0400 	mov.w	r4, #0
 8005556:	f04f 0500 	mov.w	r5, #0
 800555a:	00dd      	lsls	r5, r3, #3
 800555c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005560:	00d4      	lsls	r4, r2, #3
 8005562:	4622      	mov	r2, r4
 8005564:	462b      	mov	r3, r5
 8005566:	1814      	adds	r4, r2, r0
 8005568:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800556c:	414b      	adcs	r3, r1
 800556e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	461a      	mov	r2, r3
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	1891      	adds	r1, r2, r2
 8005580:	6639      	str	r1, [r7, #96]	; 0x60
 8005582:	415b      	adcs	r3, r3
 8005584:	667b      	str	r3, [r7, #100]	; 0x64
 8005586:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800558a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800558e:	f7fa fe2d 	bl	80001ec <__aeabi_uldivmod>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4b70      	ldr	r3, [pc, #448]	; (8005758 <UART_SetConfig+0x3dc>)
 8005598:	fba3 1302 	umull	r1, r3, r3, r2
 800559c:	095b      	lsrs	r3, r3, #5
 800559e:	2164      	movs	r1, #100	; 0x64
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	00db      	lsls	r3, r3, #3
 80055a8:	3332      	adds	r3, #50	; 0x32
 80055aa:	4a6b      	ldr	r2, [pc, #428]	; (8005758 <UART_SetConfig+0x3dc>)
 80055ac:	fba2 2303 	umull	r2, r3, r2, r3
 80055b0:	095b      	lsrs	r3, r3, #5
 80055b2:	f003 0207 	and.w	r2, r3, #7
 80055b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4432      	add	r2, r6
 80055be:	609a      	str	r2, [r3, #8]
 80055c0:	e26d      	b.n	8005a9e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055c2:	f7fe fa67 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 80055c6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055ce:	461c      	mov	r4, r3
 80055d0:	f04f 0500 	mov.w	r5, #0
 80055d4:	4622      	mov	r2, r4
 80055d6:	462b      	mov	r3, r5
 80055d8:	1891      	adds	r1, r2, r2
 80055da:	65b9      	str	r1, [r7, #88]	; 0x58
 80055dc:	415b      	adcs	r3, r3
 80055de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80055e4:	1912      	adds	r2, r2, r4
 80055e6:	eb45 0303 	adc.w	r3, r5, r3
 80055ea:	f04f 0000 	mov.w	r0, #0
 80055ee:	f04f 0100 	mov.w	r1, #0
 80055f2:	00d9      	lsls	r1, r3, #3
 80055f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055f8:	00d0      	lsls	r0, r2, #3
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	1911      	adds	r1, r2, r4
 8005600:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8005604:	416b      	adcs	r3, r5
 8005606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800560a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	461a      	mov	r2, r3
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	1891      	adds	r1, r2, r2
 8005618:	6539      	str	r1, [r7, #80]	; 0x50
 800561a:	415b      	adcs	r3, r3
 800561c:	657b      	str	r3, [r7, #84]	; 0x54
 800561e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005622:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005626:	f7fa fde1 	bl	80001ec <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4b4a      	ldr	r3, [pc, #296]	; (8005758 <UART_SetConfig+0x3dc>)
 8005630:	fba3 2302 	umull	r2, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	011e      	lsls	r6, r3, #4
 8005638:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800563c:	461c      	mov	r4, r3
 800563e:	f04f 0500 	mov.w	r5, #0
 8005642:	4622      	mov	r2, r4
 8005644:	462b      	mov	r3, r5
 8005646:	1891      	adds	r1, r2, r2
 8005648:	64b9      	str	r1, [r7, #72]	; 0x48
 800564a:	415b      	adcs	r3, r3
 800564c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800564e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005652:	1912      	adds	r2, r2, r4
 8005654:	eb45 0303 	adc.w	r3, r5, r3
 8005658:	f04f 0000 	mov.w	r0, #0
 800565c:	f04f 0100 	mov.w	r1, #0
 8005660:	00d9      	lsls	r1, r3, #3
 8005662:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005666:	00d0      	lsls	r0, r2, #3
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	1911      	adds	r1, r2, r4
 800566e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005672:	416b      	adcs	r3, r5
 8005674:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	461a      	mov	r2, r3
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	1891      	adds	r1, r2, r2
 8005686:	6439      	str	r1, [r7, #64]	; 0x40
 8005688:	415b      	adcs	r3, r3
 800568a:	647b      	str	r3, [r7, #68]	; 0x44
 800568c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005690:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005694:	f7fa fdaa 	bl	80001ec <__aeabi_uldivmod>
 8005698:	4602      	mov	r2, r0
 800569a:	460b      	mov	r3, r1
 800569c:	4b2e      	ldr	r3, [pc, #184]	; (8005758 <UART_SetConfig+0x3dc>)
 800569e:	fba3 1302 	umull	r1, r3, r3, r2
 80056a2:	095b      	lsrs	r3, r3, #5
 80056a4:	2164      	movs	r1, #100	; 0x64
 80056a6:	fb01 f303 	mul.w	r3, r1, r3
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	3332      	adds	r3, #50	; 0x32
 80056b0:	4a29      	ldr	r2, [pc, #164]	; (8005758 <UART_SetConfig+0x3dc>)
 80056b2:	fba2 2303 	umull	r2, r3, r2, r3
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056be:	441e      	add	r6, r3
 80056c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056c4:	4618      	mov	r0, r3
 80056c6:	f04f 0100 	mov.w	r1, #0
 80056ca:	4602      	mov	r2, r0
 80056cc:	460b      	mov	r3, r1
 80056ce:	1894      	adds	r4, r2, r2
 80056d0:	63bc      	str	r4, [r7, #56]	; 0x38
 80056d2:	415b      	adcs	r3, r3
 80056d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80056da:	1812      	adds	r2, r2, r0
 80056dc:	eb41 0303 	adc.w	r3, r1, r3
 80056e0:	f04f 0400 	mov.w	r4, #0
 80056e4:	f04f 0500 	mov.w	r5, #0
 80056e8:	00dd      	lsls	r5, r3, #3
 80056ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056ee:	00d4      	lsls	r4, r2, #3
 80056f0:	4622      	mov	r2, r4
 80056f2:	462b      	mov	r3, r5
 80056f4:	1814      	adds	r4, r2, r0
 80056f6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80056fa:	414b      	adcs	r3, r1
 80056fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	461a      	mov	r2, r3
 8005708:	f04f 0300 	mov.w	r3, #0
 800570c:	1891      	adds	r1, r2, r2
 800570e:	6339      	str	r1, [r7, #48]	; 0x30
 8005710:	415b      	adcs	r3, r3
 8005712:	637b      	str	r3, [r7, #52]	; 0x34
 8005714:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005718:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800571c:	f7fa fd66 	bl	80001ec <__aeabi_uldivmod>
 8005720:	4602      	mov	r2, r0
 8005722:	460b      	mov	r3, r1
 8005724:	4b0c      	ldr	r3, [pc, #48]	; (8005758 <UART_SetConfig+0x3dc>)
 8005726:	fba3 1302 	umull	r1, r3, r3, r2
 800572a:	095b      	lsrs	r3, r3, #5
 800572c:	2164      	movs	r1, #100	; 0x64
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	3332      	adds	r3, #50	; 0x32
 8005738:	4a07      	ldr	r2, [pc, #28]	; (8005758 <UART_SetConfig+0x3dc>)
 800573a:	fba2 2303 	umull	r2, r3, r2, r3
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	f003 0207 	and.w	r2, r3, #7
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4432      	add	r2, r6
 800574c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800574e:	e1a6      	b.n	8005a9e <UART_SetConfig+0x722>
 8005750:	40011000 	.word	0x40011000
 8005754:	40011400 	.word	0x40011400
 8005758:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800575c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4bd1      	ldr	r3, [pc, #836]	; (8005aa8 <UART_SetConfig+0x72c>)
 8005764:	429a      	cmp	r2, r3
 8005766:	d006      	beq.n	8005776 <UART_SetConfig+0x3fa>
 8005768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4bcf      	ldr	r3, [pc, #828]	; (8005aac <UART_SetConfig+0x730>)
 8005770:	429a      	cmp	r2, r3
 8005772:	f040 80ca 	bne.w	800590a <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005776:	f7fe f9a1 	bl	8003abc <HAL_RCC_GetPCLK2Freq>
 800577a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800577e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005782:	461c      	mov	r4, r3
 8005784:	f04f 0500 	mov.w	r5, #0
 8005788:	4622      	mov	r2, r4
 800578a:	462b      	mov	r3, r5
 800578c:	1891      	adds	r1, r2, r2
 800578e:	62b9      	str	r1, [r7, #40]	; 0x28
 8005790:	415b      	adcs	r3, r3
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005794:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005798:	1912      	adds	r2, r2, r4
 800579a:	eb45 0303 	adc.w	r3, r5, r3
 800579e:	f04f 0000 	mov.w	r0, #0
 80057a2:	f04f 0100 	mov.w	r1, #0
 80057a6:	00d9      	lsls	r1, r3, #3
 80057a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ac:	00d0      	lsls	r0, r2, #3
 80057ae:	4602      	mov	r2, r0
 80057b0:	460b      	mov	r3, r1
 80057b2:	eb12 0a04 	adds.w	sl, r2, r4
 80057b6:	eb43 0b05 	adc.w	fp, r3, r5
 80057ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f04f 0100 	mov.w	r1, #0
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	008b      	lsls	r3, r1, #2
 80057d0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80057d4:	0082      	lsls	r2, r0, #2
 80057d6:	4650      	mov	r0, sl
 80057d8:	4659      	mov	r1, fp
 80057da:	f7fa fd07 	bl	80001ec <__aeabi_uldivmod>
 80057de:	4602      	mov	r2, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4bb3      	ldr	r3, [pc, #716]	; (8005ab0 <UART_SetConfig+0x734>)
 80057e4:	fba3 2302 	umull	r2, r3, r3, r2
 80057e8:	095b      	lsrs	r3, r3, #5
 80057ea:	011e      	lsls	r6, r3, #4
 80057ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057f0:	4618      	mov	r0, r3
 80057f2:	f04f 0100 	mov.w	r1, #0
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	1894      	adds	r4, r2, r2
 80057fc:	623c      	str	r4, [r7, #32]
 80057fe:	415b      	adcs	r3, r3
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
 8005802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005806:	1812      	adds	r2, r2, r0
 8005808:	eb41 0303 	adc.w	r3, r1, r3
 800580c:	f04f 0400 	mov.w	r4, #0
 8005810:	f04f 0500 	mov.w	r5, #0
 8005814:	00dd      	lsls	r5, r3, #3
 8005816:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800581a:	00d4      	lsls	r4, r2, #3
 800581c:	4622      	mov	r2, r4
 800581e:	462b      	mov	r3, r5
 8005820:	1814      	adds	r4, r2, r0
 8005822:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005826:	414b      	adcs	r3, r1
 8005828:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	4618      	mov	r0, r3
 8005834:	f04f 0100 	mov.w	r1, #0
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	008b      	lsls	r3, r1, #2
 8005842:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005846:	0082      	lsls	r2, r0, #2
 8005848:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 800584c:	f7fa fcce 	bl	80001ec <__aeabi_uldivmod>
 8005850:	4602      	mov	r2, r0
 8005852:	460b      	mov	r3, r1
 8005854:	4b96      	ldr	r3, [pc, #600]	; (8005ab0 <UART_SetConfig+0x734>)
 8005856:	fba3 1302 	umull	r1, r3, r3, r2
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2164      	movs	r1, #100	; 0x64
 800585e:	fb01 f303 	mul.w	r3, r1, r3
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	3332      	adds	r3, #50	; 0x32
 8005868:	4a91      	ldr	r2, [pc, #580]	; (8005ab0 <UART_SetConfig+0x734>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005874:	441e      	add	r6, r3
 8005876:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800587a:	4618      	mov	r0, r3
 800587c:	f04f 0100 	mov.w	r1, #0
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	1894      	adds	r4, r2, r2
 8005886:	61bc      	str	r4, [r7, #24]
 8005888:	415b      	adcs	r3, r3
 800588a:	61fb      	str	r3, [r7, #28]
 800588c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005890:	1812      	adds	r2, r2, r0
 8005892:	eb41 0303 	adc.w	r3, r1, r3
 8005896:	f04f 0400 	mov.w	r4, #0
 800589a:	f04f 0500 	mov.w	r5, #0
 800589e:	00dd      	lsls	r5, r3, #3
 80058a0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058a4:	00d4      	lsls	r4, r2, #3
 80058a6:	4622      	mov	r2, r4
 80058a8:	462b      	mov	r3, r5
 80058aa:	1814      	adds	r4, r2, r0
 80058ac:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 80058b0:	414b      	adcs	r3, r1
 80058b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80058b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	4618      	mov	r0, r3
 80058be:	f04f 0100 	mov.w	r1, #0
 80058c2:	f04f 0200 	mov.w	r2, #0
 80058c6:	f04f 0300 	mov.w	r3, #0
 80058ca:	008b      	lsls	r3, r1, #2
 80058cc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80058d0:	0082      	lsls	r2, r0, #2
 80058d2:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80058d6:	f7fa fc89 	bl	80001ec <__aeabi_uldivmod>
 80058da:	4602      	mov	r2, r0
 80058dc:	460b      	mov	r3, r1
 80058de:	4b74      	ldr	r3, [pc, #464]	; (8005ab0 <UART_SetConfig+0x734>)
 80058e0:	fba3 1302 	umull	r1, r3, r3, r2
 80058e4:	095b      	lsrs	r3, r3, #5
 80058e6:	2164      	movs	r1, #100	; 0x64
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	011b      	lsls	r3, r3, #4
 80058f0:	3332      	adds	r3, #50	; 0x32
 80058f2:	4a6f      	ldr	r2, [pc, #444]	; (8005ab0 <UART_SetConfig+0x734>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	f003 020f 	and.w	r2, r3, #15
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4432      	add	r2, r6
 8005906:	609a      	str	r2, [r3, #8]
 8005908:	e0c9      	b.n	8005a9e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 800590a:	f7fe f8c3 	bl	8003a94 <HAL_RCC_GetPCLK1Freq>
 800590e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005912:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005916:	461c      	mov	r4, r3
 8005918:	f04f 0500 	mov.w	r5, #0
 800591c:	4622      	mov	r2, r4
 800591e:	462b      	mov	r3, r5
 8005920:	1891      	adds	r1, r2, r2
 8005922:	6139      	str	r1, [r7, #16]
 8005924:	415b      	adcs	r3, r3
 8005926:	617b      	str	r3, [r7, #20]
 8005928:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800592c:	1912      	adds	r2, r2, r4
 800592e:	eb45 0303 	adc.w	r3, r5, r3
 8005932:	f04f 0000 	mov.w	r0, #0
 8005936:	f04f 0100 	mov.w	r1, #0
 800593a:	00d9      	lsls	r1, r3, #3
 800593c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005940:	00d0      	lsls	r0, r2, #3
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	eb12 0804 	adds.w	r8, r2, r4
 800594a:	eb43 0905 	adc.w	r9, r3, r5
 800594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	4618      	mov	r0, r3
 8005956:	f04f 0100 	mov.w	r1, #0
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	008b      	lsls	r3, r1, #2
 8005964:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005968:	0082      	lsls	r2, r0, #2
 800596a:	4640      	mov	r0, r8
 800596c:	4649      	mov	r1, r9
 800596e:	f7fa fc3d 	bl	80001ec <__aeabi_uldivmod>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4b4e      	ldr	r3, [pc, #312]	; (8005ab0 <UART_SetConfig+0x734>)
 8005978:	fba3 2302 	umull	r2, r3, r3, r2
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	011e      	lsls	r6, r3, #4
 8005980:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005984:	4618      	mov	r0, r3
 8005986:	f04f 0100 	mov.w	r1, #0
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	1894      	adds	r4, r2, r2
 8005990:	60bc      	str	r4, [r7, #8]
 8005992:	415b      	adcs	r3, r3
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800599a:	1812      	adds	r2, r2, r0
 800599c:	eb41 0303 	adc.w	r3, r1, r3
 80059a0:	f04f 0400 	mov.w	r4, #0
 80059a4:	f04f 0500 	mov.w	r5, #0
 80059a8:	00dd      	lsls	r5, r3, #3
 80059aa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80059ae:	00d4      	lsls	r4, r2, #3
 80059b0:	4622      	mov	r2, r4
 80059b2:	462b      	mov	r3, r5
 80059b4:	1814      	adds	r4, r2, r0
 80059b6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 80059ba:	414b      	adcs	r3, r1
 80059bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80059c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f04f 0100 	mov.w	r1, #0
 80059cc:	f04f 0200 	mov.w	r2, #0
 80059d0:	f04f 0300 	mov.w	r3, #0
 80059d4:	008b      	lsls	r3, r1, #2
 80059d6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059da:	0082      	lsls	r2, r0, #2
 80059dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80059e0:	f7fa fc04 	bl	80001ec <__aeabi_uldivmod>
 80059e4:	4602      	mov	r2, r0
 80059e6:	460b      	mov	r3, r1
 80059e8:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <UART_SetConfig+0x734>)
 80059ea:	fba3 1302 	umull	r1, r3, r3, r2
 80059ee:	095b      	lsrs	r3, r3, #5
 80059f0:	2164      	movs	r1, #100	; 0x64
 80059f2:	fb01 f303 	mul.w	r3, r1, r3
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	011b      	lsls	r3, r3, #4
 80059fa:	3332      	adds	r3, #50	; 0x32
 80059fc:	4a2c      	ldr	r2, [pc, #176]	; (8005ab0 <UART_SetConfig+0x734>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a08:	441e      	add	r6, r3
 8005a0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f04f 0100 	mov.w	r1, #0
 8005a14:	4602      	mov	r2, r0
 8005a16:	460b      	mov	r3, r1
 8005a18:	1894      	adds	r4, r2, r2
 8005a1a:	603c      	str	r4, [r7, #0]
 8005a1c:	415b      	adcs	r3, r3
 8005a1e:	607b      	str	r3, [r7, #4]
 8005a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a24:	1812      	adds	r2, r2, r0
 8005a26:	eb41 0303 	adc.w	r3, r1, r3
 8005a2a:	f04f 0400 	mov.w	r4, #0
 8005a2e:	f04f 0500 	mov.w	r5, #0
 8005a32:	00dd      	lsls	r5, r3, #3
 8005a34:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a38:	00d4      	lsls	r4, r2, #3
 8005a3a:	4622      	mov	r2, r4
 8005a3c:	462b      	mov	r3, r5
 8005a3e:	1814      	adds	r4, r2, r0
 8005a40:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005a44:	414b      	adcs	r3, r1
 8005a46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f04f 0100 	mov.w	r1, #0
 8005a56:	f04f 0200 	mov.w	r2, #0
 8005a5a:	f04f 0300 	mov.w	r3, #0
 8005a5e:	008b      	lsls	r3, r1, #2
 8005a60:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a64:	0082      	lsls	r2, r0, #2
 8005a66:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005a6a:	f7fa fbbf 	bl	80001ec <__aeabi_uldivmod>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	460b      	mov	r3, r1
 8005a72:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <UART_SetConfig+0x734>)
 8005a74:	fba3 1302 	umull	r1, r3, r3, r2
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	2164      	movs	r1, #100	; 0x64
 8005a7c:	fb01 f303 	mul.w	r3, r1, r3
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	3332      	adds	r3, #50	; 0x32
 8005a86:	4a0a      	ldr	r2, [pc, #40]	; (8005ab0 <UART_SetConfig+0x734>)
 8005a88:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8c:	095b      	lsrs	r3, r3, #5
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4432      	add	r2, r6
 8005a9a:	609a      	str	r2, [r3, #8]
}
 8005a9c:	e7ff      	b.n	8005a9e <UART_SetConfig+0x722>
 8005a9e:	bf00      	nop
 8005aa0:	37f4      	adds	r7, #244	; 0xf4
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa8:	40011000 	.word	0x40011000
 8005aac:	40011400 	.word	0x40011400
 8005ab0:	51eb851f 	.word	0x51eb851f

08005ab4 <GPIO_State_Init>:

/**
 * 	继电器全关
 * */
void GPIO_State_Init(void)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_1_Pin, GPIO_PIN_RESET);
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2110      	movs	r1, #16
 8005abc:	480e      	ldr	r0, [pc, #56]	; (8005af8 <GPIO_State_Init+0x44>)
 8005abe:	f7fd fb85 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin, GPIO_PIN_RESET);
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	480c      	ldr	r0, [pc, #48]	; (8005af8 <GPIO_State_Init+0x44>)
 8005ac8:	f7fd fb80 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_3_Pin, GPIO_PIN_RESET);
 8005acc:	2200      	movs	r2, #0
 8005ace:	2120      	movs	r1, #32
 8005ad0:	4809      	ldr	r0, [pc, #36]	; (8005af8 <GPIO_State_Init+0x44>)
 8005ad2:	f7fd fb7b 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_4_Pin, GPIO_PIN_RESET);
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2102      	movs	r1, #2
 8005ada:	4807      	ldr	r0, [pc, #28]	; (8005af8 <GPIO_State_Init+0x44>)
 8005adc:	f7fd fb76 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Windwill_Middle_5_Pin, GPIO_PIN_RESET);
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2120      	movs	r1, #32
 8005ae4:	4805      	ldr	r0, [pc, #20]	; (8005afc <GPIO_State_Init+0x48>)
 8005ae6:	f7fd fb71 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Windwill_Middle_None_Pin, GPIO_PIN_RESET);
 8005aea:	2200      	movs	r2, #0
 8005aec:	2110      	movs	r1, #16
 8005aee:	4803      	ldr	r0, [pc, #12]	; (8005afc <GPIO_State_Init+0x48>)
 8005af0:	f7fd fb6c 	bl	80031cc <HAL_GPIO_WritePin>
}
 8005af4:	bf00      	nop
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40020800 	.word	0x40020800
 8005afc:	40020000 	.word	0x40020000

08005b00 <GPIO_State_Open>:

/**
 * 	继电器全开
 * */
void GPIO_State_Open(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_1_Pin, GPIO_PIN_SET);
 8005b04:	2201      	movs	r2, #1
 8005b06:	2110      	movs	r1, #16
 8005b08:	480e      	ldr	r0, [pc, #56]	; (8005b44 <GPIO_State_Open+0x44>)
 8005b0a:	f7fd fb5f 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin, GPIO_PIN_SET);
 8005b0e:	2201      	movs	r2, #1
 8005b10:	2101      	movs	r1, #1
 8005b12:	480c      	ldr	r0, [pc, #48]	; (8005b44 <GPIO_State_Open+0x44>)
 8005b14:	f7fd fb5a 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_3_Pin, GPIO_PIN_SET);
 8005b18:	2201      	movs	r2, #1
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	4809      	ldr	r0, [pc, #36]	; (8005b44 <GPIO_State_Open+0x44>)
 8005b1e:	f7fd fb55 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Windwill_Middle_4_Pin, GPIO_PIN_SET);
 8005b22:	2201      	movs	r2, #1
 8005b24:	2102      	movs	r1, #2
 8005b26:	4807      	ldr	r0, [pc, #28]	; (8005b44 <GPIO_State_Open+0x44>)
 8005b28:	f7fd fb50 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Windwill_Middle_5_Pin, GPIO_PIN_SET);
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	2120      	movs	r1, #32
 8005b30:	4805      	ldr	r0, [pc, #20]	; (8005b48 <GPIO_State_Open+0x48>)
 8005b32:	f7fd fb4b 	bl	80031cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, Windwill_Middle_None_Pin, GPIO_PIN_SET);
 8005b36:	2201      	movs	r2, #1
 8005b38:	2110      	movs	r1, #16
 8005b3a:	4803      	ldr	r0, [pc, #12]	; (8005b48 <GPIO_State_Open+0x48>)
 8005b3c:	f7fd fb46 	bl	80031cc <HAL_GPIO_WritePin>
}
 8005b40:	bf00      	nop
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40020800 	.word	0x40020800
 8005b48:	40020000 	.word	0x40020000

08005b4c <GPIO_Single_line>:

/**
 * 	继电器单开函数
 * */
void GPIO_Single_line(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	807b      	strh	r3, [r7, #2]
	if( GPIOx ==  GPIOC )
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a6d      	ldr	r2, [pc, #436]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	f040 80b1 	bne.w	8005cc4 <GPIO_Single_line+0x178>
	{
		switch( GPIO_Pin )
 8005b62:	887b      	ldrh	r3, [r7, #2]
 8005b64:	3b01      	subs	r3, #1
 8005b66:	2b1f      	cmp	r3, #31
 8005b68:	f200 80ad 	bhi.w	8005cc6 <GPIO_Single_line+0x17a>
 8005b6c:	a201      	add	r2, pc, #4	; (adr r2, 8005b74 <GPIO_Single_line+0x28>)
 8005b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b72:	bf00      	nop
 8005b74:	08005c29 	.word	0x08005c29
 8005b78:	08005c91 	.word	0x08005c91
 8005b7c:	08005cc7 	.word	0x08005cc7
 8005b80:	08005cc7 	.word	0x08005cc7
 8005b84:	08005cc7 	.word	0x08005cc7
 8005b88:	08005cc7 	.word	0x08005cc7
 8005b8c:	08005cc7 	.word	0x08005cc7
 8005b90:	08005cc7 	.word	0x08005cc7
 8005b94:	08005cc7 	.word	0x08005cc7
 8005b98:	08005cc7 	.word	0x08005cc7
 8005b9c:	08005cc7 	.word	0x08005cc7
 8005ba0:	08005cc7 	.word	0x08005cc7
 8005ba4:	08005cc7 	.word	0x08005cc7
 8005ba8:	08005cc7 	.word	0x08005cc7
 8005bac:	08005cc7 	.word	0x08005cc7
 8005bb0:	08005bf5 	.word	0x08005bf5
 8005bb4:	08005cc7 	.word	0x08005cc7
 8005bb8:	08005cc7 	.word	0x08005cc7
 8005bbc:	08005cc7 	.word	0x08005cc7
 8005bc0:	08005cc7 	.word	0x08005cc7
 8005bc4:	08005cc7 	.word	0x08005cc7
 8005bc8:	08005cc7 	.word	0x08005cc7
 8005bcc:	08005cc7 	.word	0x08005cc7
 8005bd0:	08005cc7 	.word	0x08005cc7
 8005bd4:	08005cc7 	.word	0x08005cc7
 8005bd8:	08005cc7 	.word	0x08005cc7
 8005bdc:	08005cc7 	.word	0x08005cc7
 8005be0:	08005cc7 	.word	0x08005cc7
 8005be4:	08005cc7 	.word	0x08005cc7
 8005be8:	08005cc7 	.word	0x08005cc7
 8005bec:	08005cc7 	.word	0x08005cc7
 8005bf0:	08005c5d 	.word	0x08005c5d
		{
			case Windwill_Middle_1_Pin :
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_1_Pin, GPIO_PIN_SET);
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	2110      	movs	r1, #16
 8005bf8:	4845      	ldr	r0, [pc, #276]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005bfa:	f7fd fae7 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin, GPIO_PIN_RESET);
 8005bfe:	2200      	movs	r2, #0
 8005c00:	2101      	movs	r1, #1
 8005c02:	4843      	ldr	r0, [pc, #268]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c04:	f7fd fae2 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_3_Pin, GPIO_PIN_RESET);
 8005c08:	2200      	movs	r2, #0
 8005c0a:	2120      	movs	r1, #32
 8005c0c:	4840      	ldr	r0, [pc, #256]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c0e:	f7fd fadd 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_4_Pin, GPIO_PIN_RESET);
 8005c12:	2200      	movs	r2, #0
 8005c14:	2102      	movs	r1, #2
 8005c16:	483e      	ldr	r0, [pc, #248]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c18:	f7fd fad8 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, Windwill_Middle_5_Pin, GPIO_PIN_RESET);
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	2120      	movs	r1, #32
 8005c20:	483c      	ldr	r0, [pc, #240]	; (8005d14 <GPIO_Single_line+0x1c8>)
 8005c22:	f7fd fad3 	bl	80031cc <HAL_GPIO_WritePin>
				break;
 8005c26:	e04e      	b.n	8005cc6 <GPIO_Single_line+0x17a>

			case Windwill_Middle_2_Pin :
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_1_Pin, GPIO_PIN_RESET);
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2110      	movs	r1, #16
 8005c2c:	4838      	ldr	r0, [pc, #224]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c2e:	f7fd facd 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin, GPIO_PIN_SET);
 8005c32:	2201      	movs	r2, #1
 8005c34:	2101      	movs	r1, #1
 8005c36:	4836      	ldr	r0, [pc, #216]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c38:	f7fd fac8 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_3_Pin, GPIO_PIN_RESET);
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	2120      	movs	r1, #32
 8005c40:	4833      	ldr	r0, [pc, #204]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c42:	f7fd fac3 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_4_Pin, GPIO_PIN_RESET);
 8005c46:	2200      	movs	r2, #0
 8005c48:	2102      	movs	r1, #2
 8005c4a:	4831      	ldr	r0, [pc, #196]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c4c:	f7fd fabe 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, Windwill_Middle_5_Pin, GPIO_PIN_RESET);
 8005c50:	2200      	movs	r2, #0
 8005c52:	2120      	movs	r1, #32
 8005c54:	482f      	ldr	r0, [pc, #188]	; (8005d14 <GPIO_Single_line+0x1c8>)
 8005c56:	f7fd fab9 	bl	80031cc <HAL_GPIO_WritePin>
				break;
 8005c5a:	e034      	b.n	8005cc6 <GPIO_Single_line+0x17a>

			case Windwill_Middle_3_Pin :
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_1_Pin, GPIO_PIN_RESET);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2110      	movs	r1, #16
 8005c60:	482b      	ldr	r0, [pc, #172]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c62:	f7fd fab3 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin, GPIO_PIN_RESET);
 8005c66:	2200      	movs	r2, #0
 8005c68:	2101      	movs	r1, #1
 8005c6a:	4829      	ldr	r0, [pc, #164]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c6c:	f7fd faae 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_3_Pin, GPIO_PIN_SET);
 8005c70:	2201      	movs	r2, #1
 8005c72:	2120      	movs	r1, #32
 8005c74:	4826      	ldr	r0, [pc, #152]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c76:	f7fd faa9 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_4_Pin, GPIO_PIN_RESET);
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2102      	movs	r1, #2
 8005c7e:	4824      	ldr	r0, [pc, #144]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c80:	f7fd faa4 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, Windwill_Middle_5_Pin, GPIO_PIN_RESET);
 8005c84:	2200      	movs	r2, #0
 8005c86:	2120      	movs	r1, #32
 8005c88:	4822      	ldr	r0, [pc, #136]	; (8005d14 <GPIO_Single_line+0x1c8>)
 8005c8a:	f7fd fa9f 	bl	80031cc <HAL_GPIO_WritePin>
				break;
 8005c8e:	e01a      	b.n	8005cc6 <GPIO_Single_line+0x17a>

			case Windwill_Middle_4_Pin :
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_1_Pin, GPIO_PIN_RESET);
 8005c90:	2200      	movs	r2, #0
 8005c92:	2110      	movs	r1, #16
 8005c94:	481e      	ldr	r0, [pc, #120]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005c96:	f7fd fa99 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin, GPIO_PIN_RESET);
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2101      	movs	r1, #1
 8005c9e:	481c      	ldr	r0, [pc, #112]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005ca0:	f7fd fa94 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_3_Pin, GPIO_PIN_RESET);
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	2120      	movs	r1, #32
 8005ca8:	4819      	ldr	r0, [pc, #100]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005caa:	f7fd fa8f 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOC, Windwill_Middle_4_Pin, GPIO_PIN_SET);
 8005cae:	2201      	movs	r2, #1
 8005cb0:	2102      	movs	r1, #2
 8005cb2:	4817      	ldr	r0, [pc, #92]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005cb4:	f7fd fa8a 	bl	80031cc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, Windwill_Middle_5_Pin, GPIO_PIN_RESET);
 8005cb8:	2200      	movs	r2, #0
 8005cba:	2120      	movs	r1, #32
 8005cbc:	4815      	ldr	r0, [pc, #84]	; (8005d14 <GPIO_Single_line+0x1c8>)
 8005cbe:	f7fd fa85 	bl	80031cc <HAL_GPIO_WritePin>
				break;
 8005cc2:	e000      	b.n	8005cc6 <GPIO_Single_line+0x17a>
		}
	}
 8005cc4:	bf00      	nop
	if( GPIOx ==  GPIOA && GPIO_Pin == Windwill_Middle_5_Pin )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4a12      	ldr	r2, [pc, #72]	; (8005d14 <GPIO_Single_line+0x1c8>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d11b      	bne.n	8005d06 <GPIO_Single_line+0x1ba>
 8005cce:	887b      	ldrh	r3, [r7, #2]
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d118      	bne.n	8005d06 <GPIO_Single_line+0x1ba>
	{
		HAL_GPIO_WritePin(GPIOC, Windwill_Middle_1_Pin, GPIO_PIN_RESET);
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2110      	movs	r1, #16
 8005cd8:	480d      	ldr	r0, [pc, #52]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005cda:	f7fd fa77 	bl	80031cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Windwill_Middle_2_Pin, GPIO_PIN_RESET);
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	480b      	ldr	r0, [pc, #44]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005ce4:	f7fd fa72 	bl	80031cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Windwill_Middle_3_Pin, GPIO_PIN_RESET);
 8005ce8:	2200      	movs	r2, #0
 8005cea:	2120      	movs	r1, #32
 8005cec:	4808      	ldr	r0, [pc, #32]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005cee:	f7fd fa6d 	bl	80031cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, Windwill_Middle_4_Pin, GPIO_PIN_RESET);
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	2102      	movs	r1, #2
 8005cf6:	4806      	ldr	r0, [pc, #24]	; (8005d10 <GPIO_Single_line+0x1c4>)
 8005cf8:	f7fd fa68 	bl	80031cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, Windwill_Middle_5_Pin, GPIO_PIN_SET);
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	2120      	movs	r1, #32
 8005d00:	4804      	ldr	r0, [pc, #16]	; (8005d14 <GPIO_Single_line+0x1c8>)
 8005d02:	f7fd fa63 	bl	80031cc <HAL_GPIO_WritePin>
	}

}
 8005d06:	bf00      	nop
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40020800 	.word	0x40020800
 8005d14:	40020000 	.word	0x40020000

08005d18 <HAL_GPIO_EXTI_Callback>:
/**
 * 	外部中断回调函数
 * 	GPIO_Pin ：中断线
 * */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin)
 8005d22:	88fb      	ldrh	r3, [r7, #6]
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	dc49      	bgt.n	8005dbc <HAL_GPIO_EXTI_Callback+0xa4>
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f340 8106 	ble.w	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	2b1f      	cmp	r3, #31
 8005d32:	f200 8102 	bhi.w	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
 8005d36:	a201      	add	r2, pc, #4	; (adr r2, 8005d3c <HAL_GPIO_EXTI_Callback+0x24>)
 8005d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d3c:	08005e01 	.word	0x08005e01
 8005d40:	08005dc3 	.word	0x08005dc3
 8005d44:	08005f3b 	.word	0x08005f3b
 8005d48:	08005ef9 	.word	0x08005ef9
 8005d4c:	08005f3b 	.word	0x08005f3b
 8005d50:	08005f3b 	.word	0x08005f3b
 8005d54:	08005f3b 	.word	0x08005f3b
 8005d58:	08005f3b 	.word	0x08005f3b
 8005d5c:	08005f3b 	.word	0x08005f3b
 8005d60:	08005f3b 	.word	0x08005f3b
 8005d64:	08005f3b 	.word	0x08005f3b
 8005d68:	08005f3b 	.word	0x08005f3b
 8005d6c:	08005f3b 	.word	0x08005f3b
 8005d70:	08005f3b 	.word	0x08005f3b
 8005d74:	08005f3b 	.word	0x08005f3b
 8005d78:	08005e7b 	.word	0x08005e7b
 8005d7c:	08005f3b 	.word	0x08005f3b
 8005d80:	08005f3b 	.word	0x08005f3b
 8005d84:	08005f3b 	.word	0x08005f3b
 8005d88:	08005f3b 	.word	0x08005f3b
 8005d8c:	08005f3b 	.word	0x08005f3b
 8005d90:	08005f3b 	.word	0x08005f3b
 8005d94:	08005f3b 	.word	0x08005f3b
 8005d98:	08005f3b 	.word	0x08005f3b
 8005d9c:	08005f3b 	.word	0x08005f3b
 8005da0:	08005f3b 	.word	0x08005f3b
 8005da4:	08005f3b 	.word	0x08005f3b
 8005da8:	08005f3b 	.word	0x08005f3b
 8005dac:	08005f3b 	.word	0x08005f3b
 8005db0:	08005f3b 	.word	0x08005f3b
 8005db4:	08005f3b 	.word	0x08005f3b
 8005db8:	08005e3f 	.word	0x08005e3f
 8005dbc:	2b40      	cmp	r3, #64	; 0x40
 8005dbe:	d07a      	beq.n	8005eb6 <HAL_GPIO_EXTI_Callback+0x19e>
			windwill_num = 1;					// 装甲板标号归0
			break;
	}


}
 8005dc0:	e0bb      	b.n	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
			if( windwill_num == 1 )
 8005dc2:	4b60      	ldr	r3, [pc, #384]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	f040 80ae 	bne.w	8005f28 <HAL_GPIO_EXTI_Callback+0x210>
				windwill_state = 1;
 8005dcc:	4b5e      	ldr	r3, [pc, #376]	; (8005f48 <HAL_GPIO_EXTI_Callback+0x230>)
 8005dce:	2201      	movs	r2, #1
 8005dd0:	701a      	strb	r2, [r3, #0]
				ws2812_frame_send(&htim1, TIM_CHANNEL_1, Globle_State);		// 填充边框灯条
 8005dd2:	4b5e      	ldr	r3, [pc, #376]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	2100      	movs	r1, #0
 8005dda:	485d      	ldr	r0, [pc, #372]	; (8005f50 <HAL_GPIO_EXTI_Callback+0x238>)
 8005ddc:	f000 fcd8 	bl	8006790 <ws2812_frame_send>
				ws2812_frame_send(&htim8, TIM_CHANNEL_4, Globle_State);		// 填充中间灯条
 8005de0:	4b5a      	ldr	r3, [pc, #360]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	461a      	mov	r2, r3
 8005de6:	210c      	movs	r1, #12
 8005de8:	485a      	ldr	r0, [pc, #360]	; (8005f54 <HAL_GPIO_EXTI_Callback+0x23c>)
 8005dea:	f000 fcd1 	bl	8006790 <ws2812_frame_send>
				windwill_num = 2;
 8005dee:	4b55      	ldr	r3, [pc, #340]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005df0:	2202      	movs	r2, #2
 8005df2:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005df8:	4857      	ldr	r0, [pc, #348]	; (8005f58 <HAL_GPIO_EXTI_Callback+0x240>)
 8005dfa:	f7fd fa00 	bl	80031fe <HAL_GPIO_TogglePin>
			break;
 8005dfe:	e093      	b.n	8005f28 <HAL_GPIO_EXTI_Callback+0x210>
			if( windwill_num == 2 )
 8005e00:	4b50      	ldr	r3, [pc, #320]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	f040 8091 	bne.w	8005f2c <HAL_GPIO_EXTI_Callback+0x214>
				windwill_state = 1;
 8005e0a:	4b4f      	ldr	r3, [pc, #316]	; (8005f48 <HAL_GPIO_EXTI_Callback+0x230>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
				ws2812_frame_send(&htim1, TIM_CHANNEL_2, Globle_State);		// 填充边框灯条
 8005e10:	4b4e      	ldr	r3, [pc, #312]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	2104      	movs	r1, #4
 8005e18:	484d      	ldr	r0, [pc, #308]	; (8005f50 <HAL_GPIO_EXTI_Callback+0x238>)
 8005e1a:	f000 fcb9 	bl	8006790 <ws2812_frame_send>
				ws2812_frame_send(&htim8, TIM_CHANNEL_4, Globle_State);		// 填充中间灯条
 8005e1e:	4b4b      	ldr	r3, [pc, #300]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	461a      	mov	r2, r3
 8005e24:	210c      	movs	r1, #12
 8005e26:	484b      	ldr	r0, [pc, #300]	; (8005f54 <HAL_GPIO_EXTI_Callback+0x23c>)
 8005e28:	f000 fcb2 	bl	8006790 <ws2812_frame_send>
				windwill_num = 3;
 8005e2c:	4b45      	ldr	r3, [pc, #276]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005e2e:	2203      	movs	r2, #3
 8005e30:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005e32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e36:	4848      	ldr	r0, [pc, #288]	; (8005f58 <HAL_GPIO_EXTI_Callback+0x240>)
 8005e38:	f7fd f9e1 	bl	80031fe <HAL_GPIO_TogglePin>
			break;
 8005e3c:	e076      	b.n	8005f2c <HAL_GPIO_EXTI_Callback+0x214>
			if( windwill_num == 3 )
 8005e3e:	4b41      	ldr	r3, [pc, #260]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b03      	cmp	r3, #3
 8005e44:	d174      	bne.n	8005f30 <HAL_GPIO_EXTI_Callback+0x218>
				windwill_state = 1;
 8005e46:	4b40      	ldr	r3, [pc, #256]	; (8005f48 <HAL_GPIO_EXTI_Callback+0x230>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
				ws2812_frame_send(&htim1, TIM_CHANNEL_3, Globle_State);		// 填充边框灯条
 8005e4c:	4b3f      	ldr	r3, [pc, #252]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	2108      	movs	r1, #8
 8005e54:	483e      	ldr	r0, [pc, #248]	; (8005f50 <HAL_GPIO_EXTI_Callback+0x238>)
 8005e56:	f000 fc9b 	bl	8006790 <ws2812_frame_send>
				ws2812_frame_send(&htim8, TIM_CHANNEL_4, Globle_State);		// 填充中间灯条
 8005e5a:	4b3c      	ldr	r3, [pc, #240]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	210c      	movs	r1, #12
 8005e62:	483c      	ldr	r0, [pc, #240]	; (8005f54 <HAL_GPIO_EXTI_Callback+0x23c>)
 8005e64:	f000 fc94 	bl	8006790 <ws2812_frame_send>
				windwill_num = 4;
 8005e68:	4b36      	ldr	r3, [pc, #216]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005e6a:	2204      	movs	r2, #4
 8005e6c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005e6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005e72:	4839      	ldr	r0, [pc, #228]	; (8005f58 <HAL_GPIO_EXTI_Callback+0x240>)
 8005e74:	f7fd f9c3 	bl	80031fe <HAL_GPIO_TogglePin>
			break;
 8005e78:	e05a      	b.n	8005f30 <HAL_GPIO_EXTI_Callback+0x218>
			if( windwill_num == 4 )
 8005e7a:	4b32      	ldr	r3, [pc, #200]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	2b04      	cmp	r3, #4
 8005e80:	d158      	bne.n	8005f34 <HAL_GPIO_EXTI_Callback+0x21c>
				windwill_state = 1;
 8005e82:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <HAL_GPIO_EXTI_Callback+0x230>)
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
				ws2812_frame_send(&htim8, TIM_CHANNEL_2, Globle_State);		// 填充边框灯条
 8005e88:	4b30      	ldr	r3, [pc, #192]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005e8a:	781b      	ldrb	r3, [r3, #0]
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	2104      	movs	r1, #4
 8005e90:	4830      	ldr	r0, [pc, #192]	; (8005f54 <HAL_GPIO_EXTI_Callback+0x23c>)
 8005e92:	f000 fc7d 	bl	8006790 <ws2812_frame_send>
				ws2812_frame_send(&htim8, TIM_CHANNEL_4, Globle_State);		// 填充中间灯条
 8005e96:	4b2d      	ldr	r3, [pc, #180]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	210c      	movs	r1, #12
 8005e9e:	482d      	ldr	r0, [pc, #180]	; (8005f54 <HAL_GPIO_EXTI_Callback+0x23c>)
 8005ea0:	f000 fc76 	bl	8006790 <ws2812_frame_send>
				windwill_num = 5;
 8005ea4:	4b27      	ldr	r3, [pc, #156]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005ea6:	2205      	movs	r2, #5
 8005ea8:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005eaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005eae:	482a      	ldr	r0, [pc, #168]	; (8005f58 <HAL_GPIO_EXTI_Callback+0x240>)
 8005eb0:	f7fd f9a5 	bl	80031fe <HAL_GPIO_TogglePin>
			break;
 8005eb4:	e03e      	b.n	8005f34 <HAL_GPIO_EXTI_Callback+0x21c>
			if( windwill_num == 5 )
 8005eb6:	4b23      	ldr	r3, [pc, #140]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b05      	cmp	r3, #5
 8005ebc:	d13c      	bne.n	8005f38 <HAL_GPIO_EXTI_Callback+0x220>
				windwill_state = 1;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <HAL_GPIO_EXTI_Callback+0x230>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
				ws2812_frame_send(&htim8, TIM_CHANNEL_3, Globle_State);		// 填充边框灯条
 8005ec4:	4b21      	ldr	r3, [pc, #132]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	2108      	movs	r1, #8
 8005ecc:	4821      	ldr	r0, [pc, #132]	; (8005f54 <HAL_GPIO_EXTI_Callback+0x23c>)
 8005ece:	f000 fc5f 	bl	8006790 <ws2812_frame_send>
				ws2812_frame_send(&htim8, TIM_CHANNEL_4, Globle_State);		// 填充中间灯条
 8005ed2:	4b1e      	ldr	r3, [pc, #120]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	210c      	movs	r1, #12
 8005eda:	481e      	ldr	r0, [pc, #120]	; (8005f54 <HAL_GPIO_EXTI_Callback+0x23c>)
 8005edc:	f000 fc58 	bl	8006790 <ws2812_frame_send>
				windwill_strike_completed = 1;
 8005ee0:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <HAL_GPIO_EXTI_Callback+0x244>)
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	701a      	strb	r2, [r3, #0]
				windwill_num = 1;
 8005ee6:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005ee8:	2201      	movs	r2, #1
 8005eea:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005eec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005ef0:	4819      	ldr	r0, [pc, #100]	; (8005f58 <HAL_GPIO_EXTI_Callback+0x240>)
 8005ef2:	f7fd f984 	bl	80031fe <HAL_GPIO_TogglePin>
			break;
 8005ef6:	e01f      	b.n	8005f38 <HAL_GPIO_EXTI_Callback+0x220>
			windwill_state = 0;				// 初始化打击状�?
 8005ef8:	4b13      	ldr	r3, [pc, #76]	; (8005f48 <HAL_GPIO_EXTI_Callback+0x230>)
 8005efa:	2200      	movs	r2, #0
 8005efc:	701a      	strb	r2, [r3, #0]
			Globle_State = !Globle_State;
 8005efe:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bf0c      	ite	eq
 8005f06:	2301      	moveq	r3, #1
 8005f08:	2300      	movne	r3, #0
 8005f0a:	b2db      	uxtb	r3, r3
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <HAL_GPIO_EXTI_Callback+0x234>)
 8005f10:	701a      	strb	r2, [r3, #0]
			ws2812_lamp_strip_Init();			// 初始化灯�?
 8005f12:	f000 f911 	bl	8006138 <ws2812_lamp_strip_Init>
			GPIO_State_Init();
 8005f16:	f7ff fdcd 	bl	8005ab4 <GPIO_State_Init>
			windwill_strike_completed = 0;	// 清除打击完成标志�?
 8005f1a:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <HAL_GPIO_EXTI_Callback+0x244>)
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	701a      	strb	r2, [r3, #0]
			windwill_num = 1;					// 装甲板标号归0
 8005f20:	4b08      	ldr	r3, [pc, #32]	; (8005f44 <HAL_GPIO_EXTI_Callback+0x22c>)
 8005f22:	2201      	movs	r2, #1
 8005f24:	701a      	strb	r2, [r3, #0]
			break;
 8005f26:	e008      	b.n	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
			break;
 8005f28:	bf00      	nop
 8005f2a:	e006      	b.n	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
			break;
 8005f2c:	bf00      	nop
 8005f2e:	e004      	b.n	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
			break;
 8005f30:	bf00      	nop
 8005f32:	e002      	b.n	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
			break;
 8005f34:	bf00      	nop
 8005f36:	e000      	b.n	8005f3a <HAL_GPIO_EXTI_Callback+0x222>
			break;
 8005f38:	bf00      	nop
}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	20000000 	.word	0x20000000
 8005f48:	20000088 	.word	0x20000088
 8005f4c:	2000008a 	.word	0x2000008a
 8005f50:	2000aa8c 	.word	0x2000aa8c
 8005f54:	2000a92c 	.word	0x2000a92c
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	20000089 	.word	0x20000089

08005f60 <LC_Pwm_Init>:
#include "main.h"
#include "tim.h"
#include "lc_pwm.h"

void LC_Pwm_Init(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005f64:	2100      	movs	r1, #0
 8005f66:	480c      	ldr	r0, [pc, #48]	; (8005f98 <LC_Pwm_Init+0x38>)
 8005f68:	f7fd fe40 	bl	8003bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8005f6c:	2104      	movs	r1, #4
 8005f6e:	480a      	ldr	r0, [pc, #40]	; (8005f98 <LC_Pwm_Init+0x38>)
 8005f70:	f7fd fe3c 	bl	8003bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8005f74:	2108      	movs	r1, #8
 8005f76:	4808      	ldr	r0, [pc, #32]	; (8005f98 <LC_Pwm_Init+0x38>)
 8005f78:	f7fd fe38 	bl	8003bec <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8005f7c:	2104      	movs	r1, #4
 8005f7e:	4807      	ldr	r0, [pc, #28]	; (8005f9c <LC_Pwm_Init+0x3c>)
 8005f80:	f7fd fe34 	bl	8003bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8005f84:	2108      	movs	r1, #8
 8005f86:	4805      	ldr	r0, [pc, #20]	; (8005f9c <LC_Pwm_Init+0x3c>)
 8005f88:	f7fd fe30 	bl	8003bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8005f8c:	210c      	movs	r1, #12
 8005f8e:	4803      	ldr	r0, [pc, #12]	; (8005f9c <LC_Pwm_Init+0x3c>)
 8005f90:	f7fd fe2c 	bl	8003bec <HAL_TIM_PWM_Start>
}
 8005f94:	bf00      	nop
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	2000aa8c 	.word	0x2000aa8c
 8005f9c:	2000a92c 	.word	0x2000a92c

08005fa0 <LC_TimInterrupt_Init>:


int16_t shift_count = 24;

void LC_TimInterrupt_Init(void)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8005fa4:	4802      	ldr	r0, [pc, #8]	; (8005fb0 <LC_TimInterrupt_Init+0x10>)
 8005fa6:	f7fd fdc8 	bl	8003b3a <HAL_TIM_Base_Start_IT>
}
 8005faa:	bf00      	nop
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	2000aacc 	.word	0x2000aacc

08005fb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]

	if( htim->Instance == htim2.Instance )
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681a      	ldr	r2, [r3, #0]
 8005fc0:	4b4d      	ldr	r3, [pc, #308]	; (80060f8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	f040 8092 	bne.w	80060ee <HAL_TIM_PeriodElapsedCallback+0x13a>
	{
		if( windwill_strike_completed == 0 )
 8005fca:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <HAL_TIM_PeriodElapsedCallback+0x148>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 808d 	bne.w	80060ee <HAL_TIM_PeriodElapsedCallback+0x13a>
		{
			shift_count--;
 8005fd4:	4b4a      	ldr	r3, [pc, #296]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	3b01      	subs	r3, #1
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	b21a      	sxth	r2, r3
 8005fe2:	4b47      	ldr	r3, [pc, #284]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005fe4:	801a      	strh	r2, [r3, #0]
			shift_count = (shift_count < 0) ? 24 : shift_count;
 8005fe6:	4b46      	ldr	r3, [pc, #280]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005fe8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	db03      	blt.n	8005ff8 <HAL_TIM_PeriodElapsedCallback+0x44>
 8005ff0:	4b43      	ldr	r3, [pc, #268]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ff6:	e000      	b.n	8005ffa <HAL_TIM_PeriodElapsedCallback+0x46>
 8005ff8:	2318      	movs	r3, #24
 8005ffa:	4a41      	ldr	r2, [pc, #260]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8005ffc:	8013      	strh	r3, [r2, #0]
			Middle_Data_combination(shift_count);	// 组合数据
 8005ffe:	4b40      	ldr	r3, [pc, #256]	; (8006100 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8006000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006004:	b29b      	uxth	r3, r3
 8006006:	4618      	mov	r0, r3
 8006008:	f000 faa4 	bl	8006554 <Middle_Data_combination>
//			ws2812_frame_send(&htim8, TIM_CHANNEL_4, Globle_State);		// 填充中间灯条
			switch( windwill_num )
 800600c:	4b3d      	ldr	r3, [pc, #244]	; (8006104 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	3b01      	subs	r3, #1
 8006012:	2b04      	cmp	r3, #4
 8006014:	d86c      	bhi.n	80060f0 <HAL_TIM_PeriodElapsedCallback+0x13c>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006031 	.word	0x08006031
 8006020:	08006057 	.word	0x08006057
 8006024:	0800607d 	.word	0x0800607d
 8006028:	080060a3 	.word	0x080060a3
 800602c:	080060c9 	.word	0x080060c9
			{
				case 1:		// 扇叶1中间流水
					//1.发送组合数据 -> 发送
					// 1.1 接通继电器
//					GPIO_State_Init();
					GPIO_Single_line(GPIOC, Windwill_Middle_1_Pin);
 8006030:	2110      	movs	r1, #16
 8006032:	4835      	ldr	r0, [pc, #212]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8006034:	f7ff fd8a 	bl	8005b4c <GPIO_Single_line>
					// 1.2 启用PWM发送
					ws2812_middle_send(&htim8, TIM_CHANNEL_4, Globle_State);
 8006038:	4b34      	ldr	r3, [pc, #208]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	210c      	movs	r1, #12
 8006040:	4833      	ldr	r0, [pc, #204]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8006042:	f000 fbc7 	bl	80067d4 <ws2812_middle_send>
					// 1.3 风车上部分封闭矩形亮起
					ws2812_Wait_Hit_frame_send(&htim1, TIM_CHANNEL_1, Globle_State);	// 下一片扇叶进入带打击状态
 8006046:	4b31      	ldr	r3, [pc, #196]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	461a      	mov	r2, r3
 800604c:	2100      	movs	r1, #0
 800604e:	4831      	ldr	r0, [pc, #196]	; (8006114 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006050:	f000 fbe2 	bl	8006818 <ws2812_Wait_Hit_frame_send>

					break;
 8006054:	e04c      	b.n	80060f0 <HAL_TIM_PeriodElapsedCallback+0x13c>

				case 2:		// 扇叶2中间流水
					GPIO_Single_line(GPIOC, Windwill_Middle_2_Pin);
 8006056:	2101      	movs	r1, #1
 8006058:	482b      	ldr	r0, [pc, #172]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800605a:	f7ff fd77 	bl	8005b4c <GPIO_Single_line>
					ws2812_middle_send(&htim8, TIM_CHANNEL_4, Globle_State);
 800605e:	4b2b      	ldr	r3, [pc, #172]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	461a      	mov	r2, r3
 8006064:	210c      	movs	r1, #12
 8006066:	482a      	ldr	r0, [pc, #168]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8006068:	f000 fbb4 	bl	80067d4 <ws2812_middle_send>

					ws2812_Wait_Hit_frame_send(&htim1, TIM_CHANNEL_2, Globle_State);	// 下一片扇叶进入带打击状态
 800606c:	4b27      	ldr	r3, [pc, #156]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	461a      	mov	r2, r3
 8006072:	2104      	movs	r1, #4
 8006074:	4827      	ldr	r0, [pc, #156]	; (8006114 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8006076:	f000 fbcf 	bl	8006818 <ws2812_Wait_Hit_frame_send>
					break;
 800607a:	e039      	b.n	80060f0 <HAL_TIM_PeriodElapsedCallback+0x13c>

				case 3:		// 扇叶3中间流水
					GPIO_Single_line(GPIOC, Windwill_Middle_3_Pin);
 800607c:	2120      	movs	r1, #32
 800607e:	4822      	ldr	r0, [pc, #136]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8006080:	f7ff fd64 	bl	8005b4c <GPIO_Single_line>
					ws2812_middle_send(&htim8, TIM_CHANNEL_4, Globle_State);
 8006084:	4b21      	ldr	r3, [pc, #132]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	210c      	movs	r1, #12
 800608c:	4820      	ldr	r0, [pc, #128]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800608e:	f000 fba1 	bl	80067d4 <ws2812_middle_send>

					ws2812_Wait_Hit_frame_send(&htim1, TIM_CHANNEL_3, Globle_State);	// 下一片扇叶进入带打击状态
 8006092:	4b1e      	ldr	r3, [pc, #120]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	461a      	mov	r2, r3
 8006098:	2108      	movs	r1, #8
 800609a:	481e      	ldr	r0, [pc, #120]	; (8006114 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800609c:	f000 fbbc 	bl	8006818 <ws2812_Wait_Hit_frame_send>
					break;
 80060a0:	e026      	b.n	80060f0 <HAL_TIM_PeriodElapsedCallback+0x13c>

				case 4:		// 扇叶4中间流水
					GPIO_Single_line(GPIOC, Windwill_Middle_4_Pin);
 80060a2:	2102      	movs	r1, #2
 80060a4:	4818      	ldr	r0, [pc, #96]	; (8006108 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80060a6:	f7ff fd51 	bl	8005b4c <GPIO_Single_line>
					ws2812_middle_send(&htim8, TIM_CHANNEL_4, Globle_State);
 80060aa:	4b18      	ldr	r3, [pc, #96]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	210c      	movs	r1, #12
 80060b2:	4817      	ldr	r0, [pc, #92]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80060b4:	f000 fb8e 	bl	80067d4 <ws2812_middle_send>

					ws2812_Wait_Hit_frame_send(&htim8, TIM_CHANNEL_2, Globle_State);	// 下一片扇叶进入带打击状态
 80060b8:	4b14      	ldr	r3, [pc, #80]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	461a      	mov	r2, r3
 80060be:	2104      	movs	r1, #4
 80060c0:	4813      	ldr	r0, [pc, #76]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80060c2:	f000 fba9 	bl	8006818 <ws2812_Wait_Hit_frame_send>
					break;
 80060c6:	e013      	b.n	80060f0 <HAL_TIM_PeriodElapsedCallback+0x13c>

				case 5:		// 扇叶5中间流水
					GPIO_Single_line(GPIOA, Windwill_Middle_5_Pin);
 80060c8:	2120      	movs	r1, #32
 80060ca:	4813      	ldr	r0, [pc, #76]	; (8006118 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80060cc:	f7ff fd3e 	bl	8005b4c <GPIO_Single_line>
					ws2812_middle_send(&htim8, TIM_CHANNEL_4, Globle_State);
 80060d0:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	210c      	movs	r1, #12
 80060d8:	480d      	ldr	r0, [pc, #52]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80060da:	f000 fb7b 	bl	80067d4 <ws2812_middle_send>

					ws2812_Wait_Hit_frame_send(&htim8, TIM_CHANNEL_3, Globle_State);	// 下一片扇叶进入带打击状态
 80060de:	4b0b      	ldr	r3, [pc, #44]	; (800610c <HAL_TIM_PeriodElapsedCallback+0x158>)
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	2108      	movs	r1, #8
 80060e6:	480a      	ldr	r0, [pc, #40]	; (8006110 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80060e8:	f000 fb96 	bl	8006818 <ws2812_Wait_Hit_frame_send>
					break;
 80060ec:	e000      	b.n	80060f0 <HAL_TIM_PeriodElapsedCallback+0x13c>
			}
		}
 80060ee:	bf00      	nop
	}

}
 80060f0:	bf00      	nop
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	2000aacc 	.word	0x2000aacc
 80060fc:	20000089 	.word	0x20000089
 8006100:	2000000e 	.word	0x2000000e
 8006104:	20000000 	.word	0x20000000
 8006108:	40020800 	.word	0x40020800
 800610c:	2000008a 	.word	0x2000008a
 8006110:	2000a92c 	.word	0x2000a92c
 8006114:	2000aa8c 	.word	0x2000aa8c
 8006118:	40020000 	.word	0x40020000

0800611c <LC_Ws2812_Init>:
// 保存即将需要发送的中间数组的数据(blue)（上述三个的组合 25+25+25 ）
uint16_t RGB_Middle_Blue_buffur[RESET_PULSE + WS2812_DATA_LEN2] = {0};

// WS2812 初始化
void LC_Ws2812_Init(void)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	af00      	add	r7, sp, #0
	// 初始化边框数据（red&blue）
	array_set_init();
 8006120:	f000 fbae 	bl	8006880 <array_set_init>
	// 初始化复位清零数据（rst）
	array_set_rst();
 8006124:	f000 fbdc 	bl	80068e0 <array_set_rst>
	// 初始化中间灯条数据
	Middle_Array_Init();
 8006128:	f000 f97a 	bl	8006420 <Middle_Array_Init>
	// * 初始化待打击状态数组数据 *****
	array_wait_hit_set_init(27, 64);
 800612c:	2140      	movs	r1, #64	; 0x40
 800612e:	201b      	movs	r0, #27
 8006130:	f000 fbf0 	bl	8006914 <array_wait_hit_set_init>
	// 初始化灯条

}
 8006134:	bf00      	nop
 8006136:	bd80      	pop	{r7, pc}

08006138 <ws2812_lamp_strip_Init>:

/**
 * 	初始化灯条
 * */
void ws2812_lamp_strip_Init(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
	ws2812_rst_send( &htim1, TIM_CHANNEL_1);
 800613c:	2100      	movs	r1, #0
 800613e:	4819      	ldr	r0, [pc, #100]	; (80061a4 <ws2812_lamp_strip_Init+0x6c>)
 8006140:	f000 fb8c 	bl	800685c <ws2812_rst_send>
	HAL_Delay(1);
 8006144:	2001      	movs	r0, #1
 8006146:	f7fb fb6b 	bl	8001820 <HAL_Delay>
	ws2812_rst_send( &htim1, TIM_CHANNEL_2);
 800614a:	2104      	movs	r1, #4
 800614c:	4815      	ldr	r0, [pc, #84]	; (80061a4 <ws2812_lamp_strip_Init+0x6c>)
 800614e:	f000 fb85 	bl	800685c <ws2812_rst_send>
	HAL_Delay(1);
 8006152:	2001      	movs	r0, #1
 8006154:	f7fb fb64 	bl	8001820 <HAL_Delay>
	ws2812_rst_send( &htim1, TIM_CHANNEL_3);
 8006158:	2108      	movs	r1, #8
 800615a:	4812      	ldr	r0, [pc, #72]	; (80061a4 <ws2812_lamp_strip_Init+0x6c>)
 800615c:	f000 fb7e 	bl	800685c <ws2812_rst_send>
	HAL_Delay(1);
 8006160:	2001      	movs	r0, #1
 8006162:	f7fb fb5d 	bl	8001820 <HAL_Delay>

	ws2812_rst_send( &htim8, TIM_CHANNEL_2);
 8006166:	2104      	movs	r1, #4
 8006168:	480f      	ldr	r0, [pc, #60]	; (80061a8 <ws2812_lamp_strip_Init+0x70>)
 800616a:	f000 fb77 	bl	800685c <ws2812_rst_send>
	HAL_Delay(1);
 800616e:	2001      	movs	r0, #1
 8006170:	f7fb fb56 	bl	8001820 <HAL_Delay>
	ws2812_rst_send( &htim8, TIM_CHANNEL_3);
 8006174:	2108      	movs	r1, #8
 8006176:	480c      	ldr	r0, [pc, #48]	; (80061a8 <ws2812_lamp_strip_Init+0x70>)
 8006178:	f000 fb70 	bl	800685c <ws2812_rst_send>
	HAL_Delay(1);
 800617c:	2001      	movs	r0, #1
 800617e:	f7fb fb4f 	bl	8001820 <HAL_Delay>


	GPIO_State_Open();
 8006182:	f7ff fcbd 	bl	8005b00 <GPIO_State_Open>
	HAL_Delay(100);
 8006186:	2064      	movs	r0, #100	; 0x64
 8006188:	f7fb fb4a 	bl	8001820 <HAL_Delay>
	ws2812_rst_send( &htim8, TIM_CHANNEL_4);
 800618c:	210c      	movs	r1, #12
 800618e:	4806      	ldr	r0, [pc, #24]	; (80061a8 <ws2812_lamp_strip_Init+0x70>)
 8006190:	f000 fb64 	bl	800685c <ws2812_rst_send>
	HAL_Delay(100);						// 需要一个延迟
 8006194:	2064      	movs	r0, #100	; 0x64
 8006196:	f7fb fb43 	bl	8001820 <HAL_Delay>
	GPIO_State_Init();					// 继电器初始化
 800619a:	f7ff fc8b 	bl	8005ab4 <GPIO_State_Init>

}
 800619e:	bf00      	nop
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	2000aa8c 	.word	0x2000aa8c
 80061a8:	2000a92c 	.word	0x2000a92c

080061ac <ws2812_set_RGB_data_Init>:
/**
   *   将颜色数据转换为占空比数据保存进数组中
 *
 * */
void ws2812_set_RGB_data_Init(uint8_t R, uint8_t G, uint8_t B, uint16_t num, uint8_t state)
{
 80061ac:	b490      	push	{r4, r7}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4604      	mov	r4, r0
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4623      	mov	r3, r4
 80061bc:	71fb      	strb	r3, [r7, #7]
 80061be:	4603      	mov	r3, r0
 80061c0:	71bb      	strb	r3, [r7, #6]
 80061c2:	460b      	mov	r3, r1
 80061c4:	717b      	strb	r3, [r7, #5]
 80061c6:	4613      	mov	r3, r2
 80061c8:	807b      	strh	r3, [r7, #2]
    //指针偏移:需要跳过复位信号的N个0
	uint16_t* p;
	if( state == 0 )
 80061ca:	7e3b      	ldrb	r3, [r7, #24]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d109      	bne.n	80061e4 <ws2812_set_RGB_data_Init+0x38>
		p = (RGB_Blade_Red_buffur  + RESET_PULSE) + (num * LED_DATA_LEN);
 80061d0:	887a      	ldrh	r2, [r7, #2]
 80061d2:	4613      	mov	r3, r2
 80061d4:	005b      	lsls	r3, r3, #1
 80061d6:	4413      	add	r3, r2
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	3350      	adds	r3, #80	; 0x50
 80061dc:	4a28      	ldr	r2, [pc, #160]	; (8006280 <ws2812_set_RGB_data_Init+0xd4>)
 80061de:	4413      	add	r3, r2
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	e008      	b.n	80061f6 <ws2812_set_RGB_data_Init+0x4a>
	else
		p = (RGB_Blade_Blue_buffur + RESET_PULSE) + (num * LED_DATA_LEN);
 80061e4:	887a      	ldrh	r2, [r7, #2]
 80061e6:	4613      	mov	r3, r2
 80061e8:	005b      	lsls	r3, r3, #1
 80061ea:	4413      	add	r3, r2
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	3350      	adds	r3, #80	; 0x50
 80061f0:	4a24      	ldr	r2, [pc, #144]	; (8006284 <ws2812_set_RGB_data_Init+0xd8>)
 80061f2:	4413      	add	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0;i < 8;i++)
 80061f6:	2300      	movs	r3, #0
 80061f8:	817b      	strh	r3, [r7, #10]
 80061fa:	e037      	b.n	800626c <ws2812_set_RGB_data_Init+0xc0>
	{
		//填充数组
		p[i]      = (G << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80061fc:	79ba      	ldrb	r2, [r7, #6]
 80061fe:	897b      	ldrh	r3, [r7, #10]
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006208:	2b00      	cmp	r3, #0
 800620a:	d001      	beq.n	8006210 <ws2812_set_RGB_data_Init+0x64>
 800620c:	2145      	movs	r1, #69	; 0x45
 800620e:	e000      	b.n	8006212 <ws2812_set_RGB_data_Init+0x66>
 8006210:	2122      	movs	r1, #34	; 0x22
 8006212:	897b      	ldrh	r3, [r7, #10]
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	460a      	mov	r2, r1
 800621c:	801a      	strh	r2, [r3, #0]
		p[i + 8]  = (R << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800621e:	79fa      	ldrb	r2, [r7, #7]
 8006220:	897b      	ldrh	r3, [r7, #10]
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622a:	2b00      	cmp	r3, #0
 800622c:	d001      	beq.n	8006232 <ws2812_set_RGB_data_Init+0x86>
 800622e:	2145      	movs	r1, #69	; 0x45
 8006230:	e000      	b.n	8006234 <ws2812_set_RGB_data_Init+0x88>
 8006232:	2122      	movs	r1, #34	; 0x22
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	3308      	adds	r3, #8
 8006238:	005b      	lsls	r3, r3, #1
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4413      	add	r3, r2
 800623e:	460a      	mov	r2, r1
 8006240:	801a      	strh	r2, [r3, #0]
		p[i + 16] = (B << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 8006242:	797a      	ldrb	r2, [r7, #5]
 8006244:	897b      	ldrh	r3, [r7, #10]
 8006246:	fa02 f303 	lsl.w	r3, r2, r3
 800624a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <ws2812_set_RGB_data_Init+0xaa>
 8006252:	2145      	movs	r1, #69	; 0x45
 8006254:	e000      	b.n	8006258 <ws2812_set_RGB_data_Init+0xac>
 8006256:	2122      	movs	r1, #34	; 0x22
 8006258:	897b      	ldrh	r3, [r7, #10]
 800625a:	3310      	adds	r3, #16
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	460a      	mov	r2, r1
 8006264:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0;i < 8;i++)
 8006266:	897b      	ldrh	r3, [r7, #10]
 8006268:	3301      	adds	r3, #1
 800626a:	817b      	strh	r3, [r7, #10]
 800626c:	897b      	ldrh	r3, [r7, #10]
 800626e:	2b07      	cmp	r3, #7
 8006270:	d9c4      	bls.n	80061fc <ws2812_set_RGB_data_Init+0x50>
	}
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bc90      	pop	{r4, r7}
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	20000090 	.word	0x20000090
 8006284:	200047d0 	.word	0x200047d0

08006288 <ws2812_Set_Wait_Hit_RGB_data_Init>:
 * 	R\G\B 为颜色数据
 * 	num 为灯的编号
 * 	state 选择比赛方（0 ：红方；1 ：蓝方）
 * **/
void ws2812_Set_Wait_Hit_RGB_data_Init(uint8_t R, uint8_t G, uint8_t B, uint16_t num, uint8_t state)
{
 8006288:	b490      	push	{r4, r7}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	4611      	mov	r1, r2
 8006294:	461a      	mov	r2, r3
 8006296:	4623      	mov	r3, r4
 8006298:	71fb      	strb	r3, [r7, #7]
 800629a:	4603      	mov	r3, r0
 800629c:	71bb      	strb	r3, [r7, #6]
 800629e:	460b      	mov	r3, r1
 80062a0:	717b      	strb	r3, [r7, #5]
 80062a2:	4613      	mov	r3, r2
 80062a4:	807b      	strh	r3, [r7, #2]
    //指针偏移:需要跳过复位信号的N个0
	uint16_t* p;
	if( state == 0 )
 80062a6:	7e3b      	ldrb	r3, [r7, #24]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d109      	bne.n	80062c0 <ws2812_Set_Wait_Hit_RGB_data_Init+0x38>
		p = (RGB_Red_Wait_Hit_buffur  + RESET_PULSE) + (num * LED_DATA_LEN);
 80062ac:	887a      	ldrh	r2, [r7, #2]
 80062ae:	4613      	mov	r3, r2
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	4413      	add	r3, r2
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	3350      	adds	r3, #80	; 0x50
 80062b8:	4a28      	ldr	r2, [pc, #160]	; (800635c <ws2812_Set_Wait_Hit_RGB_data_Init+0xd4>)
 80062ba:	4413      	add	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	e008      	b.n	80062d2 <ws2812_Set_Wait_Hit_RGB_data_Init+0x4a>
	else
		p = (RGB_Bule_Wait_Hit_buffur + RESET_PULSE) + (num * LED_DATA_LEN);
 80062c0:	887a      	ldrh	r2, [r7, #2]
 80062c2:	4613      	mov	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	4413      	add	r3, r2
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	3350      	adds	r3, #80	; 0x50
 80062cc:	4a24      	ldr	r2, [pc, #144]	; (8006360 <ws2812_Set_Wait_Hit_RGB_data_Init+0xd8>)
 80062ce:	4413      	add	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

	for (uint16_t i = 0;i < 8;i++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	817b      	strh	r3, [r7, #10]
 80062d6:	e037      	b.n	8006348 <ws2812_Set_Wait_Hit_RGB_data_Init+0xc0>
	{
		//填充数组
		p[i]      = (G << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80062d8:	79ba      	ldrb	r2, [r7, #6]
 80062da:	897b      	ldrh	r3, [r7, #10]
 80062dc:	fa02 f303 	lsl.w	r3, r2, r3
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d001      	beq.n	80062ec <ws2812_Set_Wait_Hit_RGB_data_Init+0x64>
 80062e8:	2145      	movs	r1, #69	; 0x45
 80062ea:	e000      	b.n	80062ee <ws2812_Set_Wait_Hit_RGB_data_Init+0x66>
 80062ec:	2122      	movs	r1, #34	; 0x22
 80062ee:	897b      	ldrh	r3, [r7, #10]
 80062f0:	005b      	lsls	r3, r3, #1
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	460a      	mov	r2, r1
 80062f8:	801a      	strh	r2, [r3, #0]
		p[i + 8]  = (R << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80062fa:	79fa      	ldrb	r2, [r7, #7]
 80062fc:	897b      	ldrh	r3, [r7, #10]
 80062fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <ws2812_Set_Wait_Hit_RGB_data_Init+0x86>
 800630a:	2145      	movs	r1, #69	; 0x45
 800630c:	e000      	b.n	8006310 <ws2812_Set_Wait_Hit_RGB_data_Init+0x88>
 800630e:	2122      	movs	r1, #34	; 0x22
 8006310:	897b      	ldrh	r3, [r7, #10]
 8006312:	3308      	adds	r3, #8
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	460a      	mov	r2, r1
 800631c:	801a      	strh	r2, [r3, #0]
		p[i + 16] = (B << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800631e:	797a      	ldrb	r2, [r7, #5]
 8006320:	897b      	ldrh	r3, [r7, #10]
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <ws2812_Set_Wait_Hit_RGB_data_Init+0xaa>
 800632e:	2145      	movs	r1, #69	; 0x45
 8006330:	e000      	b.n	8006334 <ws2812_Set_Wait_Hit_RGB_data_Init+0xac>
 8006332:	2122      	movs	r1, #34	; 0x22
 8006334:	897b      	ldrh	r3, [r7, #10]
 8006336:	3310      	adds	r3, #16
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	460a      	mov	r2, r1
 8006340:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0;i < 8;i++)
 8006342:	897b      	ldrh	r3, [r7, #10]
 8006344:	3301      	adds	r3, #1
 8006346:	817b      	strh	r3, [r7, #10]
 8006348:	897b      	ldrh	r3, [r7, #10]
 800634a:	2b07      	cmp	r3, #7
 800634c:	d9c4      	bls.n	80062d8 <ws2812_Set_Wait_Hit_RGB_data_Init+0x50>
	}
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bc90      	pop	{r4, r7}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	20001850 	.word	0x20001850
 8006360:	20003010 	.word	0x20003010

08006364 <ws2812_set_RGB_rst_Init>:
/**
 * 	将复位数据转换为占空比数据保存进数组中
 *
 * */
void ws2812_set_RGB_rst_Init(uint8_t R, uint8_t G, uint8_t B, uint16_t num)
{
 8006364:	b490      	push	{r4, r7}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	4604      	mov	r4, r0
 800636c:	4608      	mov	r0, r1
 800636e:	4611      	mov	r1, r2
 8006370:	461a      	mov	r2, r3
 8006372:	4623      	mov	r3, r4
 8006374:	71fb      	strb	r3, [r7, #7]
 8006376:	4603      	mov	r3, r0
 8006378:	71bb      	strb	r3, [r7, #6]
 800637a:	460b      	mov	r3, r1
 800637c:	717b      	strb	r3, [r7, #5]
 800637e:	4613      	mov	r3, r2
 8006380:	807b      	strh	r3, [r7, #2]
    //指针偏移:需要跳过复位信号的N个0
	uint16_t* p = (RGB_Rst_buffur + RESET_PULSE) + (num * LED_DATA_LEN);
 8006382:	887a      	ldrh	r2, [r7, #2]
 8006384:	4613      	mov	r3, r2
 8006386:	005b      	lsls	r3, r3, #1
 8006388:	4413      	add	r3, r2
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	3350      	adds	r3, #80	; 0x50
 800638e:	4a23      	ldr	r2, [pc, #140]	; (800641c <ws2812_set_RGB_rst_Init+0xb8>)
 8006390:	4413      	add	r3, r2
 8006392:	60bb      	str	r3, [r7, #8]

	for (uint16_t i = 0;i < 8;i++)
 8006394:	2300      	movs	r3, #0
 8006396:	81fb      	strh	r3, [r7, #14]
 8006398:	e037      	b.n	800640a <ws2812_set_RGB_rst_Init+0xa6>
	{
		//填充数组
		p[i]      = (G << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800639a:	79ba      	ldrb	r2, [r7, #6]
 800639c:	89fb      	ldrh	r3, [r7, #14]
 800639e:	fa02 f303 	lsl.w	r3, r2, r3
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d001      	beq.n	80063ae <ws2812_set_RGB_rst_Init+0x4a>
 80063aa:	2145      	movs	r1, #69	; 0x45
 80063ac:	e000      	b.n	80063b0 <ws2812_set_RGB_rst_Init+0x4c>
 80063ae:	2122      	movs	r1, #34	; 0x22
 80063b0:	89fb      	ldrh	r3, [r7, #14]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	68ba      	ldr	r2, [r7, #8]
 80063b6:	4413      	add	r3, r2
 80063b8:	460a      	mov	r2, r1
 80063ba:	801a      	strh	r2, [r3, #0]
		p[i + 8]  = (R << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80063bc:	79fa      	ldrb	r2, [r7, #7]
 80063be:	89fb      	ldrh	r3, [r7, #14]
 80063c0:	fa02 f303 	lsl.w	r3, r2, r3
 80063c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <ws2812_set_RGB_rst_Init+0x6c>
 80063cc:	2145      	movs	r1, #69	; 0x45
 80063ce:	e000      	b.n	80063d2 <ws2812_set_RGB_rst_Init+0x6e>
 80063d0:	2122      	movs	r1, #34	; 0x22
 80063d2:	89fb      	ldrh	r3, [r7, #14]
 80063d4:	3308      	adds	r3, #8
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	4413      	add	r3, r2
 80063dc:	460a      	mov	r2, r1
 80063de:	801a      	strh	r2, [r3, #0]
		p[i + 16] = (B << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80063e0:	797a      	ldrb	r2, [r7, #5]
 80063e2:	89fb      	ldrh	r3, [r7, #14]
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <ws2812_set_RGB_rst_Init+0x90>
 80063f0:	2145      	movs	r1, #69	; 0x45
 80063f2:	e000      	b.n	80063f6 <ws2812_set_RGB_rst_Init+0x92>
 80063f4:	2122      	movs	r1, #34	; 0x22
 80063f6:	89fb      	ldrh	r3, [r7, #14]
 80063f8:	3310      	adds	r3, #16
 80063fa:	005b      	lsls	r3, r3, #1
 80063fc:	68ba      	ldr	r2, [r7, #8]
 80063fe:	4413      	add	r3, r2
 8006400:	460a      	mov	r2, r1
 8006402:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0;i < 8;i++)
 8006404:	89fb      	ldrh	r3, [r7, #14]
 8006406:	3301      	adds	r3, #1
 8006408:	81fb      	strh	r3, [r7, #14]
 800640a:	89fb      	ldrh	r3, [r7, #14]
 800640c:	2b07      	cmp	r3, #7
 800640e:	d9c4      	bls.n	800639a <ws2812_set_RGB_rst_Init+0x36>
	}
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	3710      	adds	r7, #16
 8006416:	46bd      	mov	sp, r7
 8006418:	bc90      	pop	{r4, r7}
 800641a:	4770      	bx	lr
 800641c:	20005f90 	.word	0x20005f90

08006420 <Middle_Array_Init>:
    *   给数组添加数据
    *  箭头数据
 *
 * */
void Middle_Array_Init(void)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t j;
	for( i = 0; i < 50 ; i++ )
 8006426:	2300      	movs	r3, #0
 8006428:	71fb      	strb	r3, [r7, #7]
 800642a:	e080      	b.n	800652e <Middle_Array_Init+0x10e>
	{
		j = i % 7;
 800642c:	79fa      	ldrb	r2, [r7, #7]
 800642e:	4b45      	ldr	r3, [pc, #276]	; (8006544 <Middle_Array_Init+0x124>)
 8006430:	fba3 1302 	umull	r1, r3, r3, r2
 8006434:	1ad1      	subs	r1, r2, r3
 8006436:	0849      	lsrs	r1, r1, #1
 8006438:	440b      	add	r3, r1
 800643a:	0899      	lsrs	r1, r3, #2
 800643c:	460b      	mov	r3, r1
 800643e:	00db      	lsls	r3, r3, #3
 8006440:	1a5b      	subs	r3, r3, r1
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	71bb      	strb	r3, [r7, #6]
		switch(j)
 8006446:	79bb      	ldrb	r3, [r7, #6]
 8006448:	2b04      	cmp	r3, #4
 800644a:	d85d      	bhi.n	8006508 <Middle_Array_Init+0xe8>
 800644c:	a201      	add	r2, pc, #4	; (adr r2, 8006454 <Middle_Array_Init+0x34>)
 800644e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006452:	bf00      	nop
 8006454:	08006469 	.word	0x08006469
 8006458:	08006489 	.word	0x08006489
 800645c:	080064a9 	.word	0x080064a9
 8006460:	080064c9 	.word	0x080064c9
 8006464:	080064e9 	.word	0x080064e9
		{
		case 0:
			RGB_Array1[i] = 1;
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	4a37      	ldr	r2, [pc, #220]	; (8006548 <Middle_Array_Init+0x128>)
 800646c:	2101      	movs	r1, #1
 800646e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array2[i] = 0;
 8006472:	79fb      	ldrb	r3, [r7, #7]
 8006474:	4a35      	ldr	r2, [pc, #212]	; (800654c <Middle_Array_Init+0x12c>)
 8006476:	2100      	movs	r1, #0
 8006478:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array3[i] = 0;
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	4a34      	ldr	r2, [pc, #208]	; (8006550 <Middle_Array_Init+0x130>)
 8006480:	2100      	movs	r1, #0
 8006482:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 8006486:	e04f      	b.n	8006528 <Middle_Array_Init+0x108>

		case 1:
			RGB_Array1[i] = 1;
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	4a2f      	ldr	r2, [pc, #188]	; (8006548 <Middle_Array_Init+0x128>)
 800648c:	2101      	movs	r1, #1
 800648e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array2[i] = 1;
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	4a2d      	ldr	r2, [pc, #180]	; (800654c <Middle_Array_Init+0x12c>)
 8006496:	2101      	movs	r1, #1
 8006498:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array3[i] = 0;
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	4a2c      	ldr	r2, [pc, #176]	; (8006550 <Middle_Array_Init+0x130>)
 80064a0:	2100      	movs	r1, #0
 80064a2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 80064a6:	e03f      	b.n	8006528 <Middle_Array_Init+0x108>

		case 2:
			RGB_Array1[i] = 1;
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	4a27      	ldr	r2, [pc, #156]	; (8006548 <Middle_Array_Init+0x128>)
 80064ac:	2101      	movs	r1, #1
 80064ae:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array2[i] = 1;
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	4a25      	ldr	r2, [pc, #148]	; (800654c <Middle_Array_Init+0x12c>)
 80064b6:	2101      	movs	r1, #1
 80064b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array3[i] = 1;
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	4a24      	ldr	r2, [pc, #144]	; (8006550 <Middle_Array_Init+0x130>)
 80064c0:	2101      	movs	r1, #1
 80064c2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 80064c6:	e02f      	b.n	8006528 <Middle_Array_Init+0x108>

		case 3:
			RGB_Array1[i] = 0;
 80064c8:	79fb      	ldrb	r3, [r7, #7]
 80064ca:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <Middle_Array_Init+0x128>)
 80064cc:	2100      	movs	r1, #0
 80064ce:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array2[i] = 1;
 80064d2:	79fb      	ldrb	r3, [r7, #7]
 80064d4:	4a1d      	ldr	r2, [pc, #116]	; (800654c <Middle_Array_Init+0x12c>)
 80064d6:	2101      	movs	r1, #1
 80064d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array3[i] = 1;
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	4a1c      	ldr	r2, [pc, #112]	; (8006550 <Middle_Array_Init+0x130>)
 80064e0:	2101      	movs	r1, #1
 80064e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 80064e6:	e01f      	b.n	8006528 <Middle_Array_Init+0x108>

		case 4:
			RGB_Array1[i] = 0;
 80064e8:	79fb      	ldrb	r3, [r7, #7]
 80064ea:	4a17      	ldr	r2, [pc, #92]	; (8006548 <Middle_Array_Init+0x128>)
 80064ec:	2100      	movs	r1, #0
 80064ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array2[i] = 0;
 80064f2:	79fb      	ldrb	r3, [r7, #7]
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <Middle_Array_Init+0x12c>)
 80064f6:	2100      	movs	r1, #0
 80064f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array3[i] = 1;
 80064fc:	79fb      	ldrb	r3, [r7, #7]
 80064fe:	4a14      	ldr	r2, [pc, #80]	; (8006550 <Middle_Array_Init+0x130>)
 8006500:	2101      	movs	r1, #1
 8006502:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 8006506:	e00f      	b.n	8006528 <Middle_Array_Init+0x108>
		default:
			RGB_Array1[i] = 0;
 8006508:	79fb      	ldrb	r3, [r7, #7]
 800650a:	4a0f      	ldr	r2, [pc, #60]	; (8006548 <Middle_Array_Init+0x128>)
 800650c:	2100      	movs	r1, #0
 800650e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array2[i] = 0;
 8006512:	79fb      	ldrb	r3, [r7, #7]
 8006514:	4a0d      	ldr	r2, [pc, #52]	; (800654c <Middle_Array_Init+0x12c>)
 8006516:	2100      	movs	r1, #0
 8006518:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			RGB_Array3[i] = 0;
 800651c:	79fb      	ldrb	r3, [r7, #7]
 800651e:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <Middle_Array_Init+0x130>)
 8006520:	2100      	movs	r1, #0
 8006522:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			break;
 8006526:	bf00      	nop
	for( i = 0; i < 50 ; i++ )
 8006528:	79fb      	ldrb	r3, [r7, #7]
 800652a:	3301      	adds	r3, #1
 800652c:	71fb      	strb	r3, [r7, #7]
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	2b31      	cmp	r3, #49	; 0x31
 8006532:	f67f af7b 	bls.w	800642c <Middle_Array_Init+0xc>

		}
	}
}
 8006536:	bf00      	nop
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	24924925 	.word	0x24924925
 8006548:	20007750 	.word	0x20007750
 800654c:	200077b4 	.word	0x200077b4
 8006550:	20007818 	.word	0x20007818

08006554 <Middle_Data_combination>:
/**
 * 	中间灯条数据组合
 *
 * */
void Middle_Data_combination(uint16_t count)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	4603      	mov	r3, r0
 800655c:	80fb      	strh	r3, [r7, #6]
	uint8_t i;
	for( i = 0; i < Middle_RGB_SIZE ; i++ )		// 填充数据
 800655e:	2300      	movs	r3, #0
 8006560:	73fb      	strb	r3, [r7, #15]
 8006562:	e06b      	b.n	800663c <Middle_Data_combination+0xe8>
	{
		if(RGB_Array1[i+/*+ 移位量*/count] == 1)
 8006564:	7bfa      	ldrb	r2, [r7, #15]
 8006566:	88fb      	ldrh	r3, [r7, #6]
 8006568:	4413      	add	r3, r2
 800656a:	4a38      	ldr	r2, [pc, #224]	; (800664c <Middle_Data_combination+0xf8>)
 800656c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006570:	2b01      	cmp	r3, #1
 8006572:	d10e      	bne.n	8006592 <Middle_Data_combination+0x3e>
		{
			ws2812_Middle_Data_fill( Middle_RGB_1_5+i, 1);
 8006574:	7bfb      	ldrb	r3, [r7, #15]
 8006576:	b29b      	uxth	r3, r3
 8006578:	2101      	movs	r1, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f000 f86c 	bl	8006658 <ws2812_Middle_Data_fill>
			ws2812_Middle_Data_fill( Middle_RGB_5_5+i, 1);
 8006580:	7bfb      	ldrb	r3, [r7, #15]
 8006582:	b29b      	uxth	r3, r3
 8006584:	3364      	adds	r3, #100	; 0x64
 8006586:	b29b      	uxth	r3, r3
 8006588:	2101      	movs	r1, #1
 800658a:	4618      	mov	r0, r3
 800658c:	f000 f864 	bl	8006658 <ws2812_Middle_Data_fill>
 8006590:	e00d      	b.n	80065ae <Middle_Data_combination+0x5a>
		} else {
			ws2812_Middle_Data_fill( Middle_RGB_1_5+i, 0);
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	b29b      	uxth	r3, r3
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f000 f85d 	bl	8006658 <ws2812_Middle_Data_fill>
			ws2812_Middle_Data_fill( Middle_RGB_5_5+i, 0);
 800659e:	7bfb      	ldrb	r3, [r7, #15]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	3364      	adds	r3, #100	; 0x64
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	2100      	movs	r1, #0
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f855 	bl	8006658 <ws2812_Middle_Data_fill>
		}

		if(RGB_Array2[25-i-1+/*+ 移位量*/count] == 1)
 80065ae:	7bfb      	ldrb	r3, [r7, #15]
 80065b0:	f1c3 0218 	rsb	r2, r3, #24
 80065b4:	88fb      	ldrh	r3, [r7, #6]
 80065b6:	4413      	add	r3, r2
 80065b8:	4a25      	ldr	r2, [pc, #148]	; (8006650 <Middle_Data_combination+0xfc>)
 80065ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d110      	bne.n	80065e4 <Middle_Data_combination+0x90>
		{
			ws2812_Middle_Data_fill( Middle_RGB_2_5+i, 1);
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3319      	adds	r3, #25
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	2101      	movs	r1, #1
 80065cc:	4618      	mov	r0, r3
 80065ce:	f000 f843 	bl	8006658 <ws2812_Middle_Data_fill>
			ws2812_Middle_Data_fill( Middle_RGB_4_5+i, 1);
 80065d2:	7bfb      	ldrb	r3, [r7, #15]
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	334b      	adds	r3, #75	; 0x4b
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2101      	movs	r1, #1
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 f83b 	bl	8006658 <ws2812_Middle_Data_fill>
 80065e2:	e00f      	b.n	8006604 <Middle_Data_combination+0xb0>
		} else {
			ws2812_Middle_Data_fill( Middle_RGB_2_5+i, 0);
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	3319      	adds	r3, #25
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	2100      	movs	r1, #0
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 f832 	bl	8006658 <ws2812_Middle_Data_fill>
			ws2812_Middle_Data_fill( Middle_RGB_4_5+i, 0);
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	b29b      	uxth	r3, r3
 80065f8:	334b      	adds	r3, #75	; 0x4b
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 f82a 	bl	8006658 <ws2812_Middle_Data_fill>
		}

		if(RGB_Array3[i+/*+ 移位量*/count] == 1)
 8006604:	7bfa      	ldrb	r2, [r7, #15]
 8006606:	88fb      	ldrh	r3, [r7, #6]
 8006608:	4413      	add	r3, r2
 800660a:	4a12      	ldr	r2, [pc, #72]	; (8006654 <Middle_Data_combination+0x100>)
 800660c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d108      	bne.n	8006626 <Middle_Data_combination+0xd2>
		{
			ws2812_Middle_Data_fill( Middle_RGB_3_5+i, 1);
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	b29b      	uxth	r3, r3
 8006618:	3332      	adds	r3, #50	; 0x32
 800661a:	b29b      	uxth	r3, r3
 800661c:	2101      	movs	r1, #1
 800661e:	4618      	mov	r0, r3
 8006620:	f000 f81a 	bl	8006658 <ws2812_Middle_Data_fill>
 8006624:	e007      	b.n	8006636 <Middle_Data_combination+0xe2>
		} else {
			ws2812_Middle_Data_fill( Middle_RGB_3_5+i, 0);
 8006626:	7bfb      	ldrb	r3, [r7, #15]
 8006628:	b29b      	uxth	r3, r3
 800662a:	3332      	adds	r3, #50	; 0x32
 800662c:	b29b      	uxth	r3, r3
 800662e:	2100      	movs	r1, #0
 8006630:	4618      	mov	r0, r3
 8006632:	f000 f811 	bl	8006658 <ws2812_Middle_Data_fill>
	for( i = 0; i < Middle_RGB_SIZE ; i++ )		// 填充数据
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	3301      	adds	r3, #1
 800663a:	73fb      	strb	r3, [r7, #15]
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	2b18      	cmp	r3, #24
 8006640:	d990      	bls.n	8006564 <Middle_Data_combination+0x10>
		}
	}
}
 8006642:	bf00      	nop
 8006644:	bf00      	nop
 8006646:	3710      	adds	r7, #16
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20007750 	.word	0x20007750
 8006650:	200077b4 	.word	0x200077b4
 8006654:	20007818 	.word	0x20007818

08006658 <ws2812_Middle_Data_fill>:
 *	风车中间灯条数组填充
 *	num : 灯珠序号
 *	state : 填入颜色或空白
 * */
void ws2812_Middle_Data_fill( uint16_t num , uint8_t state)
{
 8006658:	b480      	push	{r7}
 800665a:	b087      	sub	sp, #28
 800665c:	af00      	add	r7, sp, #0
 800665e:	4603      	mov	r3, r0
 8006660:	460a      	mov	r2, r1
 8006662:	80fb      	strh	r3, [r7, #6]
 8006664:	4613      	mov	r3, r2
 8006666:	717b      	strb	r3, [r7, #5]
	uint16_t* p ;
	uint8_t R ;
	uint8_t G ;
	uint8_t B ;

	if( Globle_State == 0 )
 8006668:	4b43      	ldr	r3, [pc, #268]	; (8006778 <ws2812_Middle_Data_fill+0x120>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d11f      	bne.n	80066b0 <ws2812_Middle_Data_fill+0x58>
	{
		p = (RGB_Middle_Red_buffur  + RESET_PULSE) + (num * LED_DATA_LEN);
 8006670:	88fa      	ldrh	r2, [r7, #6]
 8006672:	4613      	mov	r3, r2
 8006674:	005b      	lsls	r3, r3, #1
 8006676:	4413      	add	r3, r2
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	3350      	adds	r3, #80	; 0x50
 800667c:	4a3f      	ldr	r2, [pc, #252]	; (800677c <ws2812_Middle_Data_fill+0x124>)
 800667e:	4413      	add	r3, r2
 8006680:	617b      	str	r3, [r7, #20]
		if( state == 1 )
 8006682:	797b      	ldrb	r3, [r7, #5]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d109      	bne.n	800669c <ws2812_Middle_Data_fill+0x44>
		{
			R = red_value[0];
 8006688:	4b3d      	ldr	r3, [pc, #244]	; (8006780 <ws2812_Middle_Data_fill+0x128>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	74fb      	strb	r3, [r7, #19]
			G = red_value[1];
 800668e:	4b3c      	ldr	r3, [pc, #240]	; (8006780 <ws2812_Middle_Data_fill+0x128>)
 8006690:	785b      	ldrb	r3, [r3, #1]
 8006692:	74bb      	strb	r3, [r7, #18]
			B = red_value[2];
 8006694:	4b3a      	ldr	r3, [pc, #232]	; (8006780 <ws2812_Middle_Data_fill+0x128>)
 8006696:	789b      	ldrb	r3, [r3, #2]
 8006698:	747b      	strb	r3, [r7, #17]
 800669a:	e028      	b.n	80066ee <ws2812_Middle_Data_fill+0x96>
		} else {
			R = rst_value[0];
 800669c:	4b39      	ldr	r3, [pc, #228]	; (8006784 <ws2812_Middle_Data_fill+0x12c>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	74fb      	strb	r3, [r7, #19]
			G = rst_value[1];
 80066a2:	4b38      	ldr	r3, [pc, #224]	; (8006784 <ws2812_Middle_Data_fill+0x12c>)
 80066a4:	785b      	ldrb	r3, [r3, #1]
 80066a6:	74bb      	strb	r3, [r7, #18]
			B = rst_value[2];
 80066a8:	4b36      	ldr	r3, [pc, #216]	; (8006784 <ws2812_Middle_Data_fill+0x12c>)
 80066aa:	789b      	ldrb	r3, [r3, #2]
 80066ac:	747b      	strb	r3, [r7, #17]
 80066ae:	e01e      	b.n	80066ee <ws2812_Middle_Data_fill+0x96>
		}

	} else {
		p = (RGB_Middle_Blue_buffur + RESET_PULSE) + (num * LED_DATA_LEN);
 80066b0:	88fa      	ldrh	r2, [r7, #6]
 80066b2:	4613      	mov	r3, r2
 80066b4:	005b      	lsls	r3, r3, #1
 80066b6:	4413      	add	r3, r2
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	3350      	adds	r3, #80	; 0x50
 80066bc:	4a32      	ldr	r2, [pc, #200]	; (8006788 <ws2812_Middle_Data_fill+0x130>)
 80066be:	4413      	add	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]
		if( state == 1 )
 80066c2:	797b      	ldrb	r3, [r7, #5]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d109      	bne.n	80066dc <ws2812_Middle_Data_fill+0x84>
		{
			R = blue_value[0];
 80066c8:	4b30      	ldr	r3, [pc, #192]	; (800678c <ws2812_Middle_Data_fill+0x134>)
 80066ca:	781b      	ldrb	r3, [r3, #0]
 80066cc:	74fb      	strb	r3, [r7, #19]
			G = blue_value[1];
 80066ce:	4b2f      	ldr	r3, [pc, #188]	; (800678c <ws2812_Middle_Data_fill+0x134>)
 80066d0:	785b      	ldrb	r3, [r3, #1]
 80066d2:	74bb      	strb	r3, [r7, #18]
			B = blue_value[2];
 80066d4:	4b2d      	ldr	r3, [pc, #180]	; (800678c <ws2812_Middle_Data_fill+0x134>)
 80066d6:	789b      	ldrb	r3, [r3, #2]
 80066d8:	747b      	strb	r3, [r7, #17]
 80066da:	e008      	b.n	80066ee <ws2812_Middle_Data_fill+0x96>
		} else {
			R = rst_value[0];
 80066dc:	4b29      	ldr	r3, [pc, #164]	; (8006784 <ws2812_Middle_Data_fill+0x12c>)
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	74fb      	strb	r3, [r7, #19]
			G = rst_value[1];
 80066e2:	4b28      	ldr	r3, [pc, #160]	; (8006784 <ws2812_Middle_Data_fill+0x12c>)
 80066e4:	785b      	ldrb	r3, [r3, #1]
 80066e6:	74bb      	strb	r3, [r7, #18]
			B = rst_value[2];
 80066e8:	4b26      	ldr	r3, [pc, #152]	; (8006784 <ws2812_Middle_Data_fill+0x12c>)
 80066ea:	789b      	ldrb	r3, [r3, #2]
 80066ec:	747b      	strb	r3, [r7, #17]
		}
	}


	for (uint16_t i = 0;i < 8;i++)
 80066ee:	2300      	movs	r3, #0
 80066f0:	81fb      	strh	r3, [r7, #14]
 80066f2:	e037      	b.n	8006764 <ws2812_Middle_Data_fill+0x10c>
	{
		//填充数组
		p[i]      = (G << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80066f4:	7cba      	ldrb	r2, [r7, #18]
 80066f6:	89fb      	ldrh	r3, [r7, #14]
 80066f8:	fa02 f303 	lsl.w	r3, r2, r3
 80066fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006700:	2b00      	cmp	r3, #0
 8006702:	d001      	beq.n	8006708 <ws2812_Middle_Data_fill+0xb0>
 8006704:	2145      	movs	r1, #69	; 0x45
 8006706:	e000      	b.n	800670a <ws2812_Middle_Data_fill+0xb2>
 8006708:	2122      	movs	r1, #34	; 0x22
 800670a:	89fb      	ldrh	r3, [r7, #14]
 800670c:	005b      	lsls	r3, r3, #1
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4413      	add	r3, r2
 8006712:	460a      	mov	r2, r1
 8006714:	801a      	strh	r2, [r3, #0]
		p[i + 8]  = (R << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 8006716:	7cfa      	ldrb	r2, [r7, #19]
 8006718:	89fb      	ldrh	r3, [r7, #14]
 800671a:	fa02 f303 	lsl.w	r3, r2, r3
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <ws2812_Middle_Data_fill+0xd2>
 8006726:	2145      	movs	r1, #69	; 0x45
 8006728:	e000      	b.n	800672c <ws2812_Middle_Data_fill+0xd4>
 800672a:	2122      	movs	r1, #34	; 0x22
 800672c:	89fb      	ldrh	r3, [r7, #14]
 800672e:	3308      	adds	r3, #8
 8006730:	005b      	lsls	r3, r3, #1
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4413      	add	r3, r2
 8006736:	460a      	mov	r2, r1
 8006738:	801a      	strh	r2, [r3, #0]
		p[i + 16] = (B << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800673a:	7c7a      	ldrb	r2, [r7, #17]
 800673c:	89fb      	ldrh	r3, [r7, #14]
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006746:	2b00      	cmp	r3, #0
 8006748:	d001      	beq.n	800674e <ws2812_Middle_Data_fill+0xf6>
 800674a:	2145      	movs	r1, #69	; 0x45
 800674c:	e000      	b.n	8006750 <ws2812_Middle_Data_fill+0xf8>
 800674e:	2122      	movs	r1, #34	; 0x22
 8006750:	89fb      	ldrh	r3, [r7, #14]
 8006752:	3310      	adds	r3, #16
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	697a      	ldr	r2, [r7, #20]
 8006758:	4413      	add	r3, r2
 800675a:	460a      	mov	r2, r1
 800675c:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0;i < 8;i++)
 800675e:	89fb      	ldrh	r3, [r7, #14]
 8006760:	3301      	adds	r3, #1
 8006762:	81fb      	strh	r3, [r7, #14]
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	2b07      	cmp	r3, #7
 8006768:	d9c4      	bls.n	80066f4 <ws2812_Middle_Data_fill+0x9c>
	}

}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	371c      	adds	r7, #28
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	2000008a 	.word	0x2000008a
 800677c:	2000787c 	.word	0x2000787c
 8006780:	20000010 	.word	0x20000010
 8006784:	2000008c 	.word	0x2000008c
 8006788:	2000903c 	.word	0x2000903c
 800678c:	20000014 	.word	0x20000014

08006790 <ws2812_frame_send>:
/**
 * 	发送边框数据
 * 	state ：选择阵容 （0 ：红方；1 ：蓝方）
 * */
void ws2812_frame_send(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t state)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	4613      	mov	r3, r2
 800679c:	71fb      	strb	r3, [r7, #7]
	if( state == 0 )
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d107      	bne.n	80067b4 <ws2812_frame_send+0x24>
		HAL_TIM_PWM_Start_DMA(htim, Channel,
 80067a4:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
 80067a8:	4a08      	ldr	r2, [pc, #32]	; (80067cc <ws2812_frame_send+0x3c>)
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	68f8      	ldr	r0, [r7, #12]
 80067ae:	f7fd fa5b 	bl	8003c68 <HAL_TIM_PWM_Start_DMA>
				(uint32_t *)RGB_Blade_Red_buffur, (RESET_PULSE + WS2812_DATA_LEN1));
	else
		HAL_TIM_PWM_Start_DMA(htim, Channel,
				(uint32_t *)RGB_Blade_Blue_buffur, (RESET_PULSE + WS2812_DATA_LEN1));
}
 80067b2:	e006      	b.n	80067c2 <ws2812_frame_send+0x32>
		HAL_TIM_PWM_Start_DMA(htim, Channel,
 80067b4:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
 80067b8:	4a05      	ldr	r2, [pc, #20]	; (80067d0 <ws2812_frame_send+0x40>)
 80067ba:	68b9      	ldr	r1, [r7, #8]
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f7fd fa53 	bl	8003c68 <HAL_TIM_PWM_Start_DMA>
}
 80067c2:	bf00      	nop
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000090 	.word	0x20000090
 80067d0:	200047d0 	.word	0x200047d0

080067d4 <ws2812_middle_send>:

/**
 * 	发送中间灯条边框数据
 * */
void ws2812_middle_send(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t state)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	4613      	mov	r3, r2
 80067e0:	71fb      	strb	r3, [r7, #7]
	if( state == 0 )
 80067e2:	79fb      	ldrb	r3, [r7, #7]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d107      	bne.n	80067f8 <ws2812_middle_send+0x24>
			HAL_TIM_PWM_Start_DMA(htim, Channel,
 80067e8:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
 80067ec:	4a08      	ldr	r2, [pc, #32]	; (8006810 <ws2812_middle_send+0x3c>)
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f7fd fa39 	bl	8003c68 <HAL_TIM_PWM_Start_DMA>
					(uint32_t *)RGB_Middle_Red_buffur, (RESET_PULSE + WS2812_DATA_LEN1));
		else
			HAL_TIM_PWM_Start_DMA(htim, Channel,
					(uint32_t *)RGB_Middle_Blue_buffur, (RESET_PULSE + WS2812_DATA_LEN1));
}
 80067f6:	e006      	b.n	8006806 <ws2812_middle_send+0x32>
			HAL_TIM_PWM_Start_DMA(htim, Channel,
 80067f8:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
 80067fc:	4a05      	ldr	r2, [pc, #20]	; (8006814 <ws2812_middle_send+0x40>)
 80067fe:	68b9      	ldr	r1, [r7, #8]
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f7fd fa31 	bl	8003c68 <HAL_TIM_PWM_Start_DMA>
}
 8006806:	bf00      	nop
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	2000787c 	.word	0x2000787c
 8006814:	2000903c 	.word	0x2000903c

08006818 <ws2812_Wait_Hit_frame_send>:
/**
 * 	发送边框数据
 * 	state ：选择阵容 （0 ：红方；1 ：蓝方）
 * */
void ws2812_Wait_Hit_frame_send(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t state)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	4613      	mov	r3, r2
 8006824:	71fb      	strb	r3, [r7, #7]
	if( state == 0 )
 8006826:	79fb      	ldrb	r3, [r7, #7]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d107      	bne.n	800683c <ws2812_Wait_Hit_frame_send+0x24>
		HAL_TIM_PWM_Start_DMA(htim, Channel,
 800682c:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
 8006830:	4a08      	ldr	r2, [pc, #32]	; (8006854 <ws2812_Wait_Hit_frame_send+0x3c>)
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	68f8      	ldr	r0, [r7, #12]
 8006836:	f7fd fa17 	bl	8003c68 <HAL_TIM_PWM_Start_DMA>
				(uint32_t *)RGB_Red_Wait_Hit_buffur, (RESET_PULSE + WS2812_DATA_LEN1));
	else
		HAL_TIM_PWM_Start_DMA(htim, Channel,
				(uint32_t *)RGB_Bule_Wait_Hit_buffur, (RESET_PULSE + WS2812_DATA_LEN1));
}
 800683a:	e006      	b.n	800684a <ws2812_Wait_Hit_frame_send+0x32>
		HAL_TIM_PWM_Start_DMA(htim, Channel,
 800683c:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
 8006840:	4a05      	ldr	r2, [pc, #20]	; (8006858 <ws2812_Wait_Hit_frame_send+0x40>)
 8006842:	68b9      	ldr	r1, [r7, #8]
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f7fd fa0f 	bl	8003c68 <HAL_TIM_PWM_Start_DMA>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20001850 	.word	0x20001850
 8006858:	20003010 	.word	0x20003010

0800685c <ws2812_rst_send>:

/**
 * 	发送复位信号
 * */
void ws2812_rst_send(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	HAL_TIM_PWM_Start_DMA(htim, Channel,
 8006866:	f44f 633e 	mov.w	r3, #3040	; 0xbe0
 800686a:	4a04      	ldr	r2, [pc, #16]	; (800687c <ws2812_rst_send+0x20>)
 800686c:	6839      	ldr	r1, [r7, #0]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fd f9fa 	bl	8003c68 <HAL_TIM_PWM_Start_DMA>
					(uint32_t *)RGB_Rst_buffur, (RESET_PULSE + WS2812_DATA_LEN1));
}
 8006874:	bf00      	nop
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	20005f90 	.word	0x20005f90

08006880 <array_set_init>:
 *	添加大风车边框颜色数据
 * 	红蓝 数据同时初始化
 *	（填充数据）
 * */
void array_set_init(void)
{
 8006880:	b590      	push	{r4, r7, lr}
 8006882:	b085      	sub	sp, #20
 8006884:	af02      	add	r7, sp, #8
	uint8_t i = 0;
 8006886:	2300      	movs	r3, #0
 8006888:	71fb      	strb	r3, [r7, #7]

	for( i = 0; i < LED_NUM1; i++)
 800688a:	2300      	movs	r3, #0
 800688c:	71fb      	strb	r3, [r7, #7]
 800688e:	e01a      	b.n	80068c6 <array_set_init+0x46>
	{
		ws2812_set_RGB_data_Init(red_value[0] , red_value[1] , red_value[2] , i, 0);
 8006890:	4b11      	ldr	r3, [pc, #68]	; (80068d8 <array_set_init+0x58>)
 8006892:	7818      	ldrb	r0, [r3, #0]
 8006894:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <array_set_init+0x58>)
 8006896:	7859      	ldrb	r1, [r3, #1]
 8006898:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <array_set_init+0x58>)
 800689a:	789a      	ldrb	r2, [r3, #2]
 800689c:	79fb      	ldrb	r3, [r7, #7]
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2400      	movs	r4, #0
 80068a2:	9400      	str	r4, [sp, #0]
 80068a4:	f7ff fc82 	bl	80061ac <ws2812_set_RGB_data_Init>
		ws2812_set_RGB_data_Init(blue_value[0], blue_value[1], blue_value[2], i, 1);
 80068a8:	4b0c      	ldr	r3, [pc, #48]	; (80068dc <array_set_init+0x5c>)
 80068aa:	7818      	ldrb	r0, [r3, #0]
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <array_set_init+0x5c>)
 80068ae:	7859      	ldrb	r1, [r3, #1]
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <array_set_init+0x5c>)
 80068b2:	789a      	ldrb	r2, [r3, #2]
 80068b4:	79fb      	ldrb	r3, [r7, #7]
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	2401      	movs	r4, #1
 80068ba:	9400      	str	r4, [sp, #0]
 80068bc:	f7ff fc76 	bl	80061ac <ws2812_set_RGB_data_Init>
	for( i = 0; i < LED_NUM1; i++)
 80068c0:	79fb      	ldrb	r3, [r7, #7]
 80068c2:	3301      	adds	r3, #1
 80068c4:	71fb      	strb	r3, [r7, #7]
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	2b7c      	cmp	r3, #124	; 0x7c
 80068ca:	d9e1      	bls.n	8006890 <array_set_init+0x10>
	}
}
 80068cc:	bf00      	nop
 80068ce:	bf00      	nop
 80068d0:	370c      	adds	r7, #12
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd90      	pop	{r4, r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000010 	.word	0x20000010
 80068dc:	20000014 	.word	0x20000014

080068e0 <array_set_rst>:
 * 	添加大风车清零数据
 * 	需要逐一发送
 *
 * */
void array_set_rst(void)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80068e6:	2300      	movs	r3, #0
 80068e8:	71fb      	strb	r3, [r7, #7]

	for( i = 0; i < LED_NUM1; i++)
 80068ea:	2300      	movs	r3, #0
 80068ec:	71fb      	strb	r3, [r7, #7]
 80068ee:	e009      	b.n	8006904 <array_set_rst+0x24>
	{
		ws2812_set_RGB_rst_Init(0x00, 0x00, 0x00, i);
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	2200      	movs	r2, #0
 80068f6:	2100      	movs	r1, #0
 80068f8:	2000      	movs	r0, #0
 80068fa:	f7ff fd33 	bl	8006364 <ws2812_set_RGB_rst_Init>
	for( i = 0; i < LED_NUM1; i++)
 80068fe:	79fb      	ldrb	r3, [r7, #7]
 8006900:	3301      	adds	r3, #1
 8006902:	71fb      	strb	r3, [r7, #7]
 8006904:	79fb      	ldrb	r3, [r7, #7]
 8006906:	2b7c      	cmp	r3, #124	; 0x7c
 8006908:	d9f2      	bls.n	80068f0 <array_set_rst+0x10>
	}
}
 800690a:	bf00      	nop
 800690c:	bf00      	nop
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <array_wait_hit_set_init>:
 *	填充准备过程的数据
 *	num_start : 开始的点
 *	num_end ：结束的点
 * */
void array_wait_hit_set_init(uint8_t num_start, uint8_t num_end)
{
 8006914:	b590      	push	{r4, r7, lr}
 8006916:	b087      	sub	sp, #28
 8006918:	af02      	add	r7, sp, #8
 800691a:	4603      	mov	r3, r0
 800691c:	460a      	mov	r2, r1
 800691e:	71fb      	strb	r3, [r7, #7]
 8006920:	4613      	mov	r3, r2
 8006922:	71bb      	strb	r3, [r7, #6]
	uint8_t i = 0;
 8006924:	2300      	movs	r3, #0
 8006926:	73fb      	strb	r3, [r7, #15]

	for( i = 0; i < LED_NUM1; i++)
 8006928:	2300      	movs	r3, #0
 800692a:	73fb      	strb	r3, [r7, #15]
 800692c:	e03b      	b.n	80069a6 <array_wait_hit_set_init+0x92>
	{
		if( i < num_start || i > num_end )
 800692e:	7bfa      	ldrb	r2, [r7, #15]
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	429a      	cmp	r2, r3
 8006934:	d303      	bcc.n	800693e <array_wait_hit_set_init+0x2a>
 8006936:	7bfa      	ldrb	r2, [r7, #15]
 8006938:	79bb      	ldrb	r3, [r7, #6]
 800693a:	429a      	cmp	r2, r3
 800693c:	d918      	bls.n	8006970 <array_wait_hit_set_init+0x5c>
		{
			ws2812_Set_Wait_Hit_RGB_data_Init(rst_value[0] , rst_value[1] , rst_value[2] , i, 0);
 800693e:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <array_wait_hit_set_init+0xa4>)
 8006940:	7818      	ldrb	r0, [r3, #0]
 8006942:	4b1d      	ldr	r3, [pc, #116]	; (80069b8 <array_wait_hit_set_init+0xa4>)
 8006944:	7859      	ldrb	r1, [r3, #1]
 8006946:	4b1c      	ldr	r3, [pc, #112]	; (80069b8 <array_wait_hit_set_init+0xa4>)
 8006948:	789a      	ldrb	r2, [r3, #2]
 800694a:	7bfb      	ldrb	r3, [r7, #15]
 800694c:	b29b      	uxth	r3, r3
 800694e:	2400      	movs	r4, #0
 8006950:	9400      	str	r4, [sp, #0]
 8006952:	f7ff fc99 	bl	8006288 <ws2812_Set_Wait_Hit_RGB_data_Init>
			ws2812_Set_Wait_Hit_RGB_data_Init(rst_value[0], rst_value[1], rst_value[2], i, 1);
 8006956:	4b18      	ldr	r3, [pc, #96]	; (80069b8 <array_wait_hit_set_init+0xa4>)
 8006958:	7818      	ldrb	r0, [r3, #0]
 800695a:	4b17      	ldr	r3, [pc, #92]	; (80069b8 <array_wait_hit_set_init+0xa4>)
 800695c:	7859      	ldrb	r1, [r3, #1]
 800695e:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <array_wait_hit_set_init+0xa4>)
 8006960:	789a      	ldrb	r2, [r3, #2]
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	b29b      	uxth	r3, r3
 8006966:	2401      	movs	r4, #1
 8006968:	9400      	str	r4, [sp, #0]
 800696a:	f7ff fc8d 	bl	8006288 <ws2812_Set_Wait_Hit_RGB_data_Init>
 800696e:	e017      	b.n	80069a0 <array_wait_hit_set_init+0x8c>

		}else {

			ws2812_Set_Wait_Hit_RGB_data_Init(red_value[0] , red_value[1] , red_value[2] , i, 0);
 8006970:	4b12      	ldr	r3, [pc, #72]	; (80069bc <array_wait_hit_set_init+0xa8>)
 8006972:	7818      	ldrb	r0, [r3, #0]
 8006974:	4b11      	ldr	r3, [pc, #68]	; (80069bc <array_wait_hit_set_init+0xa8>)
 8006976:	7859      	ldrb	r1, [r3, #1]
 8006978:	4b10      	ldr	r3, [pc, #64]	; (80069bc <array_wait_hit_set_init+0xa8>)
 800697a:	789a      	ldrb	r2, [r3, #2]
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	b29b      	uxth	r3, r3
 8006980:	2400      	movs	r4, #0
 8006982:	9400      	str	r4, [sp, #0]
 8006984:	f7ff fc80 	bl	8006288 <ws2812_Set_Wait_Hit_RGB_data_Init>
			ws2812_Set_Wait_Hit_RGB_data_Init(blue_value[0], blue_value[1], blue_value[2], i, 1);
 8006988:	4b0d      	ldr	r3, [pc, #52]	; (80069c0 <array_wait_hit_set_init+0xac>)
 800698a:	7818      	ldrb	r0, [r3, #0]
 800698c:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <array_wait_hit_set_init+0xac>)
 800698e:	7859      	ldrb	r1, [r3, #1]
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <array_wait_hit_set_init+0xac>)
 8006992:	789a      	ldrb	r2, [r3, #2]
 8006994:	7bfb      	ldrb	r3, [r7, #15]
 8006996:	b29b      	uxth	r3, r3
 8006998:	2401      	movs	r4, #1
 800699a:	9400      	str	r4, [sp, #0]
 800699c:	f7ff fc74 	bl	8006288 <ws2812_Set_Wait_Hit_RGB_data_Init>
	for( i = 0; i < LED_NUM1; i++)
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	3301      	adds	r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	7bfb      	ldrb	r3, [r7, #15]
 80069a8:	2b7c      	cmp	r3, #124	; 0x7c
 80069aa:	d9c0      	bls.n	800692e <array_wait_hit_set_init+0x1a>
		}
	}
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	3714      	adds	r7, #20
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd90      	pop	{r4, r7, pc}
 80069b6:	bf00      	nop
 80069b8:	2000008c 	.word	0x2000008c
 80069bc:	20000010 	.word	0x20000010
 80069c0:	20000014 	.word	0x20000014

080069c4 <HAL_TIM_PWM_PulseFinishedCallback>:

/**
 * 	PWM DMA中断传输结束回调函数
 * */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]

	if ((htim->Instance == htim1.Instance)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	4b2d      	ldr	r3, [pc, #180]	; (8006a88 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d108      	bne.n	80069ea <HAL_TIM_PWM_PulseFinishedCallback+0x26>
			&& (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	7f1b      	ldrb	r3, [r3, #28]
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d104      	bne.n	80069ea <HAL_TIM_PWM_PulseFinishedCallback+0x26>
		HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_1);
 80069e0:	2100      	movs	r1, #0
 80069e2:	4829      	ldr	r0, [pc, #164]	; (8006a88 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 80069e4:	f7fd fa52 	bl	8003e8c <HAL_TIM_PWM_Stop_DMA>
 80069e8:	e04a      	b.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>

	} else if ((htim->Instance == htim1.Instance)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	4b26      	ldr	r3, [pc, #152]	; (8006a88 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d108      	bne.n	8006a08 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
			&& (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	7f1b      	ldrb	r3, [r3, #28]
 80069fa:	2b02      	cmp	r3, #2
 80069fc:	d104      	bne.n	8006a08 <HAL_TIM_PWM_PulseFinishedCallback+0x44>
		HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_2);
 80069fe:	2104      	movs	r1, #4
 8006a00:	4821      	ldr	r0, [pc, #132]	; (8006a88 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8006a02:	f7fd fa43 	bl	8003e8c <HAL_TIM_PWM_Stop_DMA>
 8006a06:	e03b      	b.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>

	} else if ((htim->Instance == htim1.Instance)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d108      	bne.n	8006a26 <HAL_TIM_PWM_PulseFinishedCallback+0x62>
			&& (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)) {
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7f1b      	ldrb	r3, [r3, #28]
 8006a18:	2b04      	cmp	r3, #4
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_PulseFinishedCallback+0x62>
		HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_3);
 8006a1c:	2108      	movs	r1, #8
 8006a1e:	481a      	ldr	r0, [pc, #104]	; (8006a88 <HAL_TIM_PWM_PulseFinishedCallback+0xc4>)
 8006a20:	f7fd fa34 	bl	8003e8c <HAL_TIM_PWM_Stop_DMA>
 8006a24:	e02c      	b.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>

	} else if ((htim->Instance == htim8.Instance)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d108      	bne.n	8006a44 <HAL_TIM_PWM_PulseFinishedCallback+0x80>
			&& (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7f1b      	ldrb	r3, [r3, #28]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d104      	bne.n	8006a44 <HAL_TIM_PWM_PulseFinishedCallback+0x80>
		HAL_TIM_PWM_Stop_DMA(&htim8,TIM_CHANNEL_2);
 8006a3a:	2104      	movs	r1, #4
 8006a3c:	4813      	ldr	r0, [pc, #76]	; (8006a8c <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8006a3e:	f7fd fa25 	bl	8003e8c <HAL_TIM_PWM_Stop_DMA>
 8006a42:	e01d      	b.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>

	} else if ((htim->Instance == htim8.Instance)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d108      	bne.n	8006a62 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
			&& (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)) {
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	7f1b      	ldrb	r3, [r3, #28]
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	d104      	bne.n	8006a62 <HAL_TIM_PWM_PulseFinishedCallback+0x9e>
		HAL_TIM_PWM_Stop_DMA(&htim8,TIM_CHANNEL_3);
 8006a58:	2108      	movs	r1, #8
 8006a5a:	480c      	ldr	r0, [pc, #48]	; (8006a8c <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8006a5c:	f7fd fa16 	bl	8003e8c <HAL_TIM_PWM_Stop_DMA>
 8006a60:	e00e      	b.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>

	} else if((htim->Instance == htim8.Instance)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681a      	ldr	r2, [r3, #0]
 8006a66:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d108      	bne.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
			&& (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	7f1b      	ldrb	r3, [r3, #28]
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d104      	bne.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
		HAL_TIM_PWM_Stop_DMA(&htim8,TIM_CHANNEL_4);
 8006a76:	210c      	movs	r1, #12
 8006a78:	4804      	ldr	r0, [pc, #16]	; (8006a8c <HAL_TIM_PWM_PulseFinishedCallback+0xc8>)
 8006a7a:	f7fd fa07 	bl	8003e8c <HAL_TIM_PWM_Stop_DMA>
	}

}
 8006a7e:	e7ff      	b.n	8006a80 <HAL_TIM_PWM_PulseFinishedCallback+0xbc>
 8006a80:	bf00      	nop
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	2000aa8c 	.word	0x2000aa8c
 8006a8c:	2000a92c 	.word	0x2000a92c

08006a90 <ws2812_Mission_Accomplished>:
/**
 * 	打击完成后的响应函数
 * 	Mission accomplished
 * */
void ws2812_Mission_Accomplished(void)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
	GPIO_State_Open();				// 开启所有继电器
 8006a96:	f7ff f833 	bl	8005b00 <GPIO_State_Open>
	for( uint8_t i = 0; i < 5 ; i++ )
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	71fb      	strb	r3, [r7, #7]
 8006a9e:	e015      	b.n	8006acc <ws2812_Mission_Accomplished+0x3c>
	{
		ws2812_frame_send(&htim8, TIM_CHANNEL_4, Globle_State);		// 填充中间灯条
 8006aa0:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <ws2812_Mission_Accomplished+0x4c>)
 8006aa2:	781b      	ldrb	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	210c      	movs	r1, #12
 8006aa8:	480d      	ldr	r0, [pc, #52]	; (8006ae0 <ws2812_Mission_Accomplished+0x50>)
 8006aaa:	f7ff fe71 	bl	8006790 <ws2812_frame_send>
		HAL_Delay(500);
 8006aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ab2:	f7fa feb5 	bl	8001820 <HAL_Delay>
		ws2812_rst_send( &htim8, TIM_CHANNEL_4);
 8006ab6:	210c      	movs	r1, #12
 8006ab8:	4809      	ldr	r0, [pc, #36]	; (8006ae0 <ws2812_Mission_Accomplished+0x50>)
 8006aba:	f7ff fecf 	bl	800685c <ws2812_rst_send>
		HAL_Delay(500);
 8006abe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ac2:	f7fa fead 	bl	8001820 <HAL_Delay>
	for( uint8_t i = 0; i < 5 ; i++ )
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	71fb      	strb	r3, [r7, #7]
 8006acc:	79fb      	ldrb	r3, [r7, #7]
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d9e6      	bls.n	8006aa0 <ws2812_Mission_Accomplished+0x10>
	}


}
 8006ad2:	bf00      	nop
 8006ad4:	bf00      	nop
 8006ad6:	3708      	adds	r7, #8
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	2000008a 	.word	0x2000008a
 8006ae0:	2000a92c 	.word	0x2000a92c

08006ae4 <can_user_init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void can_user_init(CAN_HandleTypeDef* hcan )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b08c      	sub	sp, #48	; 0x30
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef  can_filter;

  can_filter.FilterBank = 0;                       // filter 0
 8006aec:	2300      	movs	r3, #0
 8006aee:	61fb      	str	r3, [r7, #28]
  can_filter.FilterMode =  CAN_FILTERMODE_IDMASK;  // mask mode
 8006af0:	2300      	movs	r3, #0
 8006af2:	623b      	str	r3, [r7, #32]
  can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8006af4:	2301      	movs	r3, #1
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter.FilterIdHigh = 0;
 8006af8:	2300      	movs	r3, #0
 8006afa:	60bb      	str	r3, [r7, #8]
  can_filter.FilterIdLow  = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	60fb      	str	r3, [r7, #12]
  can_filter.FilterMaskIdHigh = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	613b      	str	r3, [r7, #16]
  can_filter.FilterMaskIdLow  = 0;                // set mask 0 to receive all can id
 8006b04:	2300      	movs	r3, #0
 8006b06:	617b      	str	r3, [r7, #20]
  can_filter.FilterFIFOAssignment = CAN_RX_FIFO0; // assign to fifo0
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61bb      	str	r3, [r7, #24]
  can_filter.FilterActivation = ENABLE;           // enable can filter
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  can_filter.SlaveStartFilterBank  = 14;          // only meaningful in dual can mode
 8006b10:	230e      	movs	r3, #14
 8006b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  HAL_CAN_ConfigFilter(hcan, &can_filter);        // init can filter
 8006b14:	f107 0308 	add.w	r3, r7, #8
 8006b18:	4619      	mov	r1, r3
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7fa ffa0 	bl	8001a60 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(hcan);                          // start can1
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fb f87d 	bl	8001c20 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // enable can1 rx interrupt
 8006b26:	2102      	movs	r1, #2
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7fb faaa 	bl	8002082 <HAL_CAN_ActivateNotification>
}
 8006b2e:	bf00      	nop
 8006b30:	3730      	adds	r7, #48	; 0x30
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b08c      	sub	sp, #48	; 0x30
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t             rx_data[8];
  if(hcan->Instance == CAN1)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a3d      	ldr	r2, [pc, #244]	; (8006c3c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d107      	bne.n	8006b5a <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
  {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //receive can data
 8006b4a:	f107 0308 	add.w	r3, r7, #8
 8006b4e:	f107 0210 	add.w	r2, r7, #16
 8006b52:	2100      	movs	r1, #0
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fb f982 	bl	8001e5e <HAL_CAN_GetRxMessage>
  }
  if ((rx_header.StdId >= FEEDBACK_ID_BASE_1)
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b60:	d95f      	bls.n	8006c22 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
   && (rx_header.StdId <=  FEEDBACK_ID_BASE_2 + MOTOR_MAX_NUM))                  // judge the can id
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8006b68:	d85b      	bhi.n	8006c22 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
  {
    can_cnt ++;
 8006b6a:	4b35      	ldr	r3, [pc, #212]	; (8006c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8006b6c:	881b      	ldrh	r3, [r3, #0]
 8006b6e:	3301      	adds	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	4b33      	ldr	r3, [pc, #204]	; (8006c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8006b74:	801a      	strh	r2, [r3, #0]
		uint8_t index  = 0 ;
 8006b76:	2300      	movs	r3, #0
 8006b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(rx_header.StdId < 0x207 )
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f240 2206 	movw	r2, #518	; 0x206
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d805      	bhi.n	8006b92 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
		  index = rx_header.StdId - FEEDBACK_ID_BASE_1; // get motor index by can_id 
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006b90:	e004      	b.n	8006b9c <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
    else index = rx_header.StdId - FEEDBACK_ID_BASE_2;                
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	3b05      	subs	r3, #5
 8006b98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    motor_info[index].rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);
 8006b9c:	7a3b      	ldrb	r3, [r7, #8]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	b21a      	sxth	r2, r3
 8006ba2:	7a7b      	ldrb	r3, [r7, #9]
 8006ba4:	b21b      	sxth	r3, r3
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	b21b      	sxth	r3, r3
 8006baa:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006bae:	b298      	uxth	r0, r3
 8006bb0:	4924      	ldr	r1, [pc, #144]	; (8006c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	4413      	add	r3, r2
 8006bb8:	009b      	lsls	r3, r3, #2
 8006bba:	440b      	add	r3, r1
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	801a      	strh	r2, [r3, #0]
    motor_info[index].rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);
 8006bc2:	7abb      	ldrb	r3, [r7, #10]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	b219      	sxth	r1, r3
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	b21b      	sxth	r3, r3
 8006bcc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006bd0:	430b      	orrs	r3, r1
 8006bd2:	b218      	sxth	r0, r3
 8006bd4:	491b      	ldr	r1, [pc, #108]	; (8006c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	005b      	lsls	r3, r3, #1
 8006bda:	4413      	add	r3, r2
 8006bdc:	009b      	lsls	r3, r3, #2
 8006bde:	440b      	add	r3, r1
 8006be0:	3306      	adds	r3, #6
 8006be2:	4602      	mov	r2, r0
 8006be4:	801a      	strh	r2, [r3, #0]
    motor_info[index].torque_current = ((rx_data[4] << 8) | rx_data[5]);
 8006be6:	7b3b      	ldrb	r3, [r7, #12]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	b219      	sxth	r1, r3
 8006bec:	7b7b      	ldrb	r3, [r7, #13]
 8006bee:	b21b      	sxth	r3, r3
 8006bf0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006bf4:	430b      	orrs	r3, r1
 8006bf6:	b218      	sxth	r0, r3
 8006bf8:	4912      	ldr	r1, [pc, #72]	; (8006c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4413      	add	r3, r2
 8006c00:	009b      	lsls	r3, r3, #2
 8006c02:	440b      	add	r3, r1
 8006c04:	3308      	adds	r3, #8
 8006c06:	4602      	mov	r2, r0
 8006c08:	801a      	strh	r2, [r3, #0]
    motor_info[index].temp           =   rx_data[6];
 8006c0a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006c0e:	7bb8      	ldrb	r0, [r7, #14]
 8006c10:	490c      	ldr	r1, [pc, #48]	; (8006c44 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8006c12:	4613      	mov	r3, r2
 8006c14:	005b      	lsls	r3, r3, #1
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	440b      	add	r3, r1
 8006c1c:	330a      	adds	r3, #10
 8006c1e:	4602      	mov	r2, r0
 8006c20:	701a      	strb	r2, [r3, #0]
  }
  if (can_cnt == 500)
 8006c22:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006c2a:	d102      	bne.n	8006c32 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
  {
    can_cnt = 0;
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	801a      	strh	r2, [r3, #0]
  }
}
 8006c32:	bf00      	nop
 8006c34:	3730      	adds	r7, #48	; 0x30
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	40006400 	.word	0x40006400
 8006c40:	2000ac50 	.word	0x2000ac50
 8006c44:	20000018 	.word	0x20000018

08006c48 <set_motor_voltage>:
  * @param  motor voltage 1,2,3,4 or 5,6,7
  * @retval None
  */

void set_motor_voltage(uint8_t id_range, int16_t v1, int16_t v2, int16_t v3, int16_t v4)
{
 8006c48:	b590      	push	{r4, r7, lr}
 8006c4a:	b08b      	sub	sp, #44	; 0x2c
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4623      	mov	r3, r4
 8006c58:	71fb      	strb	r3, [r7, #7]
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	80bb      	strh	r3, [r7, #4]
 8006c5e:	460b      	mov	r3, r1
 8006c60:	807b      	strh	r3, [r7, #2]
 8006c62:	4613      	mov	r3, r2
 8006c64:	803b      	strh	r3, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;
  uint8_t             tx_data[8];
    if(id_range == 2 )
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	2b02      	cmp	r3, #2
 8006c6a:	d103      	bne.n	8006c74 <set_motor_voltage+0x2c>
    	tx_header.StdId = 0x2ff ;
 8006c6c:	f240 23ff 	movw	r3, #767	; 0x2ff
 8006c70:	613b      	str	r3, [r7, #16]
 8006c72:	e008      	b.n	8006c86 <set_motor_voltage+0x3e>
	else
		tx_header.StdId = (id_range == 0)?(0x1ff):(0x200);
 8006c74:	79fb      	ldrb	r3, [r7, #7]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d102      	bne.n	8006c80 <set_motor_voltage+0x38>
 8006c7a:	f240 13ff 	movw	r3, #511	; 0x1ff
 8006c7e:	e001      	b.n	8006c84 <set_motor_voltage+0x3c>
 8006c80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c84:	613b      	str	r3, [r7, #16]
			
      
  tx_header.IDE   = CAN_ID_STD;
 8006c86:	2300      	movs	r3, #0
 8006c88:	61bb      	str	r3, [r7, #24]
  tx_header.RTR   = CAN_RTR_DATA;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61fb      	str	r3, [r7, #28]
  tx_header.DLC   = 8;
 8006c8e:	2308      	movs	r3, #8
 8006c90:	623b      	str	r3, [r7, #32]

  tx_data[0] = (v1>>8)&0xff;
 8006c92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8006c96:	121b      	asrs	r3, r3, #8
 8006c98:	b21b      	sxth	r3, r3
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	723b      	strb	r3, [r7, #8]
  tx_data[1] =    (v1)&0xff;
 8006c9e:	88bb      	ldrh	r3, [r7, #4]
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	727b      	strb	r3, [r7, #9]
  tx_data[2] = (v2>>8)&0xff;
 8006ca4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006ca8:	121b      	asrs	r3, r3, #8
 8006caa:	b21b      	sxth	r3, r3
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	72bb      	strb	r3, [r7, #10]
  tx_data[3] =    (v2)&0xff;
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	72fb      	strb	r3, [r7, #11]
  tx_data[4] = (v3>>8)&0xff;
 8006cb6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8006cba:	121b      	asrs	r3, r3, #8
 8006cbc:	b21b      	sxth	r3, r3
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	733b      	strb	r3, [r7, #12]
  tx_data[5] =    (v3)&0xff;
 8006cc2:	883b      	ldrh	r3, [r7, #0]
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	737b      	strb	r3, [r7, #13]
  tx_data[6] = (v4>>8)&0xff;
 8006cc8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8006ccc:	121b      	asrs	r3, r3, #8
 8006cce:	b21b      	sxth	r3, r3
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	73bb      	strb	r3, [r7, #14]
  tx_data[7] =    (v4)&0xff;
 8006cd4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data,(uint32_t*)CAN_TX_MAILBOX0); 
 8006cda:	f107 0208 	add.w	r2, r7, #8
 8006cde:	f107 0110 	add.w	r1, r7, #16
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4803      	ldr	r0, [pc, #12]	; (8006cf4 <set_motor_voltage+0xac>)
 8006ce6:	f7fa ffdf 	bl	8001ca8 <HAL_CAN_AddTxMessage>
}
 8006cea:	bf00      	nop
 8006cec:	372c      	adds	r7, #44	; 0x2c
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd90      	pop	{r4, r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	2000a7fc 	.word	0x2000a7fc

08006cf8 <pid_init>:
              float ki,
              float kd,
              float i_max,
              float out_max,
			  float deadband)
	{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b089      	sub	sp, #36	; 0x24
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	61f8      	str	r0, [r7, #28]
 8006d00:	61b9      	str	r1, [r7, #24]
 8006d02:	ed87 0a05 	vstr	s0, [r7, #20]
 8006d06:	edc7 0a04 	vstr	s1, [r7, #16]
 8006d0a:	ed87 1a03 	vstr	s2, [r7, #12]
 8006d0e:	edc7 1a02 	vstr	s3, [r7, #8]
 8006d12:	ed87 2a01 	vstr	s4, [r7, #4]
 8006d16:	edc7 2a00 	vstr	s5, [r7]
	  pid->pid_mode = mode;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	61da      	str	r2, [r3, #28]
	  pid->kp      = kp;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	601a      	str	r2, [r3, #0]
	  pid->ki      = ki;
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	605a      	str	r2, [r3, #4]
	  pid->kd      = kd;
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	609a      	str	r2, [r3, #8]
	  pid->i_max   = i_max;
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	60da      	str	r2, [r3, #12]
	  pid->out_max = out_max;
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	611a      	str	r2, [r3, #16]
	  pid->deadband = deadband;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	619a      	str	r2, [r3, #24]
	}
 8006d44:	bf00      	nop
 8006d46:	3724      	adds	r7, #36	; 0x24
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <pid_calc>:
    @param  reference value // 参考值
    @param  feedback value  // 反馈值
  * @retval calculation result
  */
float pid_calc(pid_struct_t *pid, float ref, float fdb)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	ed87 0a02 	vstr	s0, [r7, #8]
 8006d5c:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->ref = ref;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	68ba      	ldr	r2, [r7, #8]
 8006d64:	621a      	str	r2, [r3, #32]
  pid->fdb = fdb;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	625a      	str	r2, [r3, #36]	; 0x24
  pid->err[2] = pid->err[1];
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	631a      	str	r2, [r3, #48]	; 0x30
  pid->err[1] = pid->err[0];
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->err[0] = pid->ref - pid->fdb;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	ed93 7a08 	vldr	s14, [r3, #32]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006d88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	
	if (pid->deadband != 0 && ABS(pid->err[0]) < pid->deadband)               //��errС������ʱ������pid����
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	edd3 7a06 	vldr	s15, [r3, #24]
 8006d98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006da0:	d01b      	beq.n	8006dda <pid_calc+0x8a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006da8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db0:	dd03      	ble.n	8006dba <pid_calc+0x6a>
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006db8:	e004      	b.n	8006dc4 <pid_calc+0x74>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006dc0:	eef1 7a67 	vneg.f32	s15, s15
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	ed93 7a06 	vldr	s14, [r3, #24]
 8006dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd2:	d502      	bpl.n	8006dda <pid_calc+0x8a>
		return 0;
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	e133      	b.n	8007042 <pid_calc+0x2f2>
		
		
	if(pid->pid_mode == POSITION_PID) //λ��ʽ
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	69db      	ldr	r3, [r3, #28]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f040 808c 	bne.w	8006efc <pid_calc+0x1ac>
	{
	  pid->p_out  = pid->kp * pid->err[0];
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	ed93 7a00 	vldr	s14, [r3]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006df0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  pid->i_out += pid->ki * pid->err[0];
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	edd3 6a01 	vldr	s13, [r3, #4]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006e0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  pid->d_out  = pid->kd * (pid->err[0] - pid->err[1]);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	ed93 7a02 	vldr	s14, [r3, #8]
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006e2c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  LIMIT_MIN_MAX(pid->i_out, -pid->i_max, pid->i_max);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e46:	eef1 7a67 	vneg.f32	s15, s15
 8006e4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e52:	d805      	bhi.n	8006e60 <pid_calc+0x110>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e5a:	eef1 7a67 	vneg.f32	s15, s15
 8006e5e:	e011      	b.n	8006e84 <pid_calc+0x134>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e74:	db03      	blt.n	8006e7e <pid_calc+0x12e>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	edd3 7a03 	vldr	s15, [r3, #12]
 8006e7c:	e002      	b.n	8006e84 <pid_calc+0x134>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	  pid->output = pid->p_out + pid->i_out + pid->d_out;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006e96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006ea0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	  LIMIT_MIN_MAX(pid->output, -pid->out_max, pid->out_max);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	edd3 7a04 	vldr	s15, [r3, #16]
 8006eb6:	eef1 7a67 	vneg.f32	s15, s15
 8006eba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	d805      	bhi.n	8006ed0 <pid_calc+0x180>
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	edd3 7a04 	vldr	s15, [r3, #16]
 8006eca:	eef1 7a67 	vneg.f32	s15, s15
 8006ece:	e011      	b.n	8006ef4 <pid_calc+0x1a4>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	edd3 7a04 	vldr	s15, [r3, #16]
 8006edc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee4:	db03      	blt.n	8006eee <pid_calc+0x19e>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	edd3 7a04 	vldr	s15, [r3, #16]
 8006eec:	e002      	b.n	8006ef4 <pid_calc+0x1a4>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8006efa:	e0a0      	b.n	800703e <pid_calc+0x2ee>
	//  return pid->output;
	}
	else if(pid->pid_mode == DELTA_PID)//����ʽ
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	f040 809c 	bne.w	800703e <pid_calc+0x2ee>
	{
	  pid->p_out  = pid->kp * pid->err[0]-pid->kp * pid->err[1];
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	ed93 7a00 	vldr	s14, [r3]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006f12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	edd3 6a00 	vldr	s13, [r3]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006f22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  pid->i_out  = pid->ki * pid->err[0];
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	ed93 7a01 	vldr	s14, [r3, #4]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  pid->d_out  = pid->kd * (pid->err[0] - 2*pid->err[1]+pid->err[2]);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	ed93 7a02 	vldr	s14, [r3, #8]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006f58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006f5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  LIMIT_MIN_MAX(pid->i_out, -pid->i_max, pid->i_max);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f80:	eef1 7a67 	vneg.f32	s15, s15
 8006f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f8c:	d805      	bhi.n	8006f9a <pid_calc+0x24a>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	edd3 7a03 	vldr	s15, [r3, #12]
 8006f94:	eef1 7a67 	vneg.f32	s15, s15
 8006f98:	e011      	b.n	8006fbe <pid_calc+0x26e>
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fa6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fae:	db03      	blt.n	8006fb8 <pid_calc+0x268>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	edd3 7a03 	vldr	s15, [r3, #12]
 8006fb6:	e002      	b.n	8006fbe <pid_calc+0x26e>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	  pid->output += (pid->p_out + pid->i_out + pid->d_out);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8006fd6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006fe0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	  LIMIT_MIN_MAX(pid->output, -pid->out_max, pid->out_max);
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	edd3 7a04 	vldr	s15, [r3, #16]
 8006ffa:	eef1 7a67 	vneg.f32	s15, s15
 8006ffe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007006:	d805      	bhi.n	8007014 <pid_calc+0x2c4>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	edd3 7a04 	vldr	s15, [r3, #16]
 800700e:	eef1 7a67 	vneg.f32	s15, s15
 8007012:	e011      	b.n	8007038 <pid_calc+0x2e8>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007028:	db03      	blt.n	8007032 <pid_calc+0x2e2>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	edd3 7a04 	vldr	s15, [r3, #16]
 8007030:	e002      	b.n	8007038 <pid_calc+0x2e8>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	return pid->output;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007042:	ee07 3a90 	vmov	s15, r3
}
 8007046:	eeb0 0a67 	vmov.f32	s0, s15
 800704a:	3714      	adds	r7, #20
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <__libc_init_array>:
 8007054:	b570      	push	{r4, r5, r6, lr}
 8007056:	4d0d      	ldr	r5, [pc, #52]	; (800708c <__libc_init_array+0x38>)
 8007058:	4c0d      	ldr	r4, [pc, #52]	; (8007090 <__libc_init_array+0x3c>)
 800705a:	1b64      	subs	r4, r4, r5
 800705c:	10a4      	asrs	r4, r4, #2
 800705e:	2600      	movs	r6, #0
 8007060:	42a6      	cmp	r6, r4
 8007062:	d109      	bne.n	8007078 <__libc_init_array+0x24>
 8007064:	4d0b      	ldr	r5, [pc, #44]	; (8007094 <__libc_init_array+0x40>)
 8007066:	4c0c      	ldr	r4, [pc, #48]	; (8007098 <__libc_init_array+0x44>)
 8007068:	f000 f820 	bl	80070ac <_init>
 800706c:	1b64      	subs	r4, r4, r5
 800706e:	10a4      	asrs	r4, r4, #2
 8007070:	2600      	movs	r6, #0
 8007072:	42a6      	cmp	r6, r4
 8007074:	d105      	bne.n	8007082 <__libc_init_array+0x2e>
 8007076:	bd70      	pop	{r4, r5, r6, pc}
 8007078:	f855 3b04 	ldr.w	r3, [r5], #4
 800707c:	4798      	blx	r3
 800707e:	3601      	adds	r6, #1
 8007080:	e7ee      	b.n	8007060 <__libc_init_array+0xc>
 8007082:	f855 3b04 	ldr.w	r3, [r5], #4
 8007086:	4798      	blx	r3
 8007088:	3601      	adds	r6, #1
 800708a:	e7f2      	b.n	8007072 <__libc_init_array+0x1e>
 800708c:	080070ec 	.word	0x080070ec
 8007090:	080070ec 	.word	0x080070ec
 8007094:	080070ec 	.word	0x080070ec
 8007098:	080070f0 	.word	0x080070f0

0800709c <memset>:
 800709c:	4402      	add	r2, r0
 800709e:	4603      	mov	r3, r0
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d100      	bne.n	80070a6 <memset+0xa>
 80070a4:	4770      	bx	lr
 80070a6:	f803 1b01 	strb.w	r1, [r3], #1
 80070aa:	e7f9      	b.n	80070a0 <memset+0x4>

080070ac <_init>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr

080070b8 <_fini>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr
