
WINDWILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c78  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005e24  08005e24  00015e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e44  08005e44  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08005e44  08005e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e4c  08005e4c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e4c  08005e4c  00015e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08005e54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b18  20000064  08005eb8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002b7c  08005eb8  00022b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff59  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000270e  00000000  00000000  0002ffed  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e98  00000000  00000000  00032700  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d30  00000000  00000000  00033598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239e0  00000000  00000000  000342c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d20a  00000000  00000000  00057ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d556f  00000000  00000000  00064eb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013a421  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  0013a49c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000064 	.word	0x20000064
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005e0c 	.word	0x08005e0c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000068 	.word	0x20000068
 80001e8:	08005e0c 	.word	0x08005e0c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 80004f0:	4b17      	ldr	r3, [pc, #92]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f2:	4a18      	ldr	r2, [pc, #96]	; (8000554 <MX_CAN1_Init+0x68>)
 80004f4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_CAN1_Init+0x64>)
 80004f8:	2203      	movs	r2, #3
 80004fa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80004fc:	4b14      	ldr	r3, [pc, #80]	; (8000550 <MX_CAN1_Init+0x64>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000502:	4b13      	ldr	r3, [pc, #76]	; (8000550 <MX_CAN1_Init+0x64>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_9TQ;
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <MX_CAN1_Init+0x64>)
 800050a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800050e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MX_CAN1_Init+0x64>)
 8000512:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000516:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <MX_CAN1_Init+0x64>)
 800051a:	2200      	movs	r2, #0
 800051c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800051e:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MX_CAN1_Init+0x64>)
 8000520:	2201      	movs	r2, #1
 8000522:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000524:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <MX_CAN1_Init+0x64>)
 8000526:	2200      	movs	r2, #0
 8000528:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800052a:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MX_CAN1_Init+0x64>)
 800052c:	2200      	movs	r2, #0
 800052e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000530:	4b07      	ldr	r3, [pc, #28]	; (8000550 <MX_CAN1_Init+0x64>)
 8000532:	2200      	movs	r2, #0
 8000534:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000536:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MX_CAN1_Init+0x64>)
 8000538:	2200      	movs	r2, #0
 800053a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800053c:	4804      	ldr	r0, [pc, #16]	; (8000550 <MX_CAN1_Init+0x64>)
 800053e:	f001 f83d 	bl	80015bc <HAL_CAN_Init>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000548:	f000 fa7a 	bl	8000a40 <Error_Handler>
  }

}
 800054c:	bf00      	nop
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200027c4 	.word	0x200027c4
 8000554:	40006400 	.word	0x40006400

08000558 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000560:	f107 0314 	add.w	r3, r7, #20
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
 8000568:	605a      	str	r2, [r3, #4]
 800056a:	609a      	str	r2, [r3, #8]
 800056c:	60da      	str	r2, [r3, #12]
 800056e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a21      	ldr	r2, [pc, #132]	; (80005fc <HAL_CAN_MspInit+0xa4>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d13b      	bne.n	80005f2 <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800057a:	2300      	movs	r3, #0
 800057c:	613b      	str	r3, [r7, #16]
 800057e:	4b20      	ldr	r3, [pc, #128]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 8000580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000582:	4a1f      	ldr	r2, [pc, #124]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 8000584:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000588:	6413      	str	r3, [r2, #64]	; 0x40
 800058a:	4b1d      	ldr	r3, [pc, #116]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 800058c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000592:	613b      	str	r3, [r7, #16]
 8000594:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	4b19      	ldr	r3, [pc, #100]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b16      	ldr	r3, [pc, #88]	; (8000600 <HAL_CAN_MspInit+0xa8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0308 	and.w	r3, r3, #8
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005b2:	2303      	movs	r3, #3
 80005b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005b6:	2302      	movs	r3, #2
 80005b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005be:	2303      	movs	r3, #3
 80005c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80005c2:	2309      	movs	r3, #9
 80005c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	4619      	mov	r1, r3
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <HAL_CAN_MspInit+0xac>)
 80005ce:	f002 faf3 	bl	8002bb8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2013      	movs	r0, #19
 80005d8:	f001 ff27 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80005dc:	2013      	movs	r0, #19
 80005de:	f001 ff40 	bl	8002462 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	2014      	movs	r0, #20
 80005e8:	f001 ff1f 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80005ec:	2014      	movs	r0, #20
 80005ee:	f001 ff38 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80005f2:	bf00      	nop
 80005f4:	3728      	adds	r7, #40	; 0x28
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40006400 	.word	0x40006400
 8000600:	40023800 	.word	0x40023800
 8000604:	40020c00 	.word	0x40020c00

08000608 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	4b20      	ldr	r3, [pc, #128]	; (8000694 <MX_DMA_Init+0x8c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a1f      	ldr	r2, [pc, #124]	; (8000694 <MX_DMA_Init+0x8c>)
 8000618:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_DMA_Init+0x8c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800062a:	2200      	movs	r2, #0
 800062c:	2100      	movs	r1, #0
 800062e:	2039      	movs	r0, #57	; 0x39
 8000630:	f001 fefb 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000634:	2039      	movs	r0, #57	; 0x39
 8000636:	f001 ff14 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2100      	movs	r1, #0
 800063e:	203a      	movs	r0, #58	; 0x3a
 8000640:	f001 fef3 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000644:	203a      	movs	r0, #58	; 0x3a
 8000646:	f001 ff0c 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	203b      	movs	r0, #59	; 0x3b
 8000650:	f001 feeb 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000654:	203b      	movs	r0, #59	; 0x3b
 8000656:	f001 ff04 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	203c      	movs	r0, #60	; 0x3c
 8000660:	f001 fee3 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000664:	203c      	movs	r0, #60	; 0x3c
 8000666:	f001 fefc 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2044      	movs	r0, #68	; 0x44
 8000670:	f001 fedb 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000674:	2044      	movs	r0, #68	; 0x44
 8000676:	f001 fef4 	bl	8002462 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	2045      	movs	r0, #69	; 0x45
 8000680:	f001 fed3 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000684:	2045      	movs	r0, #69	; 0x45
 8000686:	f001 feec 	bl	8002462 <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	4b63      	ldr	r3, [pc, #396]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a62      	ldr	r2, [pc, #392]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006b8:	f043 0310 	orr.w	r3, r3, #16
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b60      	ldr	r3, [pc, #384]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0310 	and.w	r3, r3, #16
 80006c6:	61bb      	str	r3, [r7, #24]
 80006c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	4b5c      	ldr	r3, [pc, #368]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a5b      	ldr	r2, [pc, #364]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b59      	ldr	r3, [pc, #356]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	617b      	str	r3, [r7, #20]
 80006e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
 80006ea:	4b55      	ldr	r3, [pc, #340]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	4a54      	ldr	r2, [pc, #336]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006f0:	f043 0302 	orr.w	r3, r3, #2
 80006f4:	6313      	str	r3, [r2, #48]	; 0x30
 80006f6:	4b52      	ldr	r3, [pc, #328]	; (8000840 <MX_GPIO_Init+0x1a8>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	f003 0302 	and.w	r3, r3, #2
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	4b4e      	ldr	r3, [pc, #312]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a4d      	ldr	r2, [pc, #308]	; (8000840 <MX_GPIO_Init+0x1a8>)
 800070c:	f043 0308 	orr.w	r3, r3, #8
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b4b      	ldr	r3, [pc, #300]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f003 0308 	and.w	r3, r3, #8
 800071a:	60fb      	str	r3, [r7, #12]
 800071c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	4b47      	ldr	r3, [pc, #284]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a46      	ldr	r2, [pc, #280]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b44      	ldr	r3, [pc, #272]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	4b40      	ldr	r3, [pc, #256]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a3f      	ldr	r2, [pc, #252]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000744:	f043 0320 	orr.w	r3, r3, #32
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b3d      	ldr	r3, [pc, #244]	; (8000840 <MX_GPIO_Init+0x1a8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0320 	and.w	r3, r3, #32
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <MX_GPIO_Init+0x1a8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	4a38      	ldr	r2, [pc, #224]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000764:	6313      	str	r3, [r2, #48]	; 0x30
 8000766:	4b36      	ldr	r3, [pc, #216]	; (8000840 <MX_GPIO_Init+0x1a8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000778:	4832      	ldr	r0, [pc, #200]	; (8000844 <MX_GPIO_Init+0x1ac>)
 800077a:	f002 fbc7 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000784:	4830      	ldr	r0, [pc, #192]	; (8000848 <MX_GPIO_Init+0x1b0>)
 8000786:	f002 fbc1 	bl	8002f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = windwill_4_Pin|windwill_3_Pin|windwill_5_Pin;
 800078a:	2370      	movs	r3, #112	; 0x70
 800078c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078e:	4b2f      	ldr	r3, [pc, #188]	; (800084c <MX_GPIO_Init+0x1b4>)
 8000790:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	4619      	mov	r1, r3
 800079c:	4829      	ldr	r0, [pc, #164]	; (8000844 <MX_GPIO_Init+0x1ac>)
 800079e:	f002 fa0b 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = windwill_2_Pin|windwill_1_Pin;
 80007a2:	2303      	movs	r3, #3
 80007a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a6:	4b29      	ldr	r3, [pc, #164]	; (800084c <MX_GPIO_Init+0x1b4>)
 80007a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4824      	ldr	r0, [pc, #144]	; (8000848 <MX_GPIO_Init+0x1b0>)
 80007b6:	f002 f9ff 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80007be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80007cc:	f107 031c 	add.w	r3, r7, #28
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_GPIO_Init+0x1ac>)
 80007d4:	f002 f9f0 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED2_Pin;
 80007d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4815      	ldr	r0, [pc, #84]	; (8000848 <MX_GPIO_Init+0x1b0>)
 80007f2:	f002 f9e1 	bl	8002bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	2006      	movs	r0, #6
 80007fc:	f001 fe15 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000800:	2006      	movs	r0, #6
 8000802:	f001 fe2e 	bl	8002462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2007      	movs	r0, #7
 800080c:	f001 fe0d 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000810:	2007      	movs	r0, #7
 8000812:	f001 fe26 	bl	8002462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	200a      	movs	r0, #10
 800081c:	f001 fe05 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000820:	200a      	movs	r0, #10
 8000822:	f001 fe1e 	bl	8002462 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2017      	movs	r0, #23
 800082c:	f001 fdfd 	bl	800242a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000830:	2017      	movs	r0, #23
 8000832:	f001 fe16 	bl	8002462 <HAL_NVIC_EnableIRQ>

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40021000 	.word	0x40021000
 8000848:	40021400 	.word	0x40021400
 800084c:	10210000 	.word	0x10210000

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fe3f 	bl	80014d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f887 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff ff1b 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 8000862:	f7ff fed1 	bl	8000608 <MX_DMA_Init>
  MX_TIM1_Init();
 8000866:	f000 f9d9 	bl	8000c1c <MX_TIM1_Init>
  MX_TIM8_Init();
 800086a:	f000 fa8f 	bl	8000d8c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800086e:	f000 fd27 	bl	80012c0 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8000872:	f7ff fe3b 	bl	80004ec <MX_CAN1_Init>
  MX_UART8_Init();
 8000876:	f000 fcf9 	bl	800126c <MX_UART8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800087a:	2100      	movs	r1, #0
 800087c:	4831      	ldr	r0, [pc, #196]	; (8000944 <main+0xf4>)
 800087e:	f003 f82d 	bl	80038dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000882:	2104      	movs	r1, #4
 8000884:	482f      	ldr	r0, [pc, #188]	; (8000944 <main+0xf4>)
 8000886:	f003 f829 	bl	80038dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800088a:	2108      	movs	r1, #8
 800088c:	482d      	ldr	r0, [pc, #180]	; (8000944 <main+0xf4>)
 800088e:	f003 f825 	bl	80038dc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000892:	2104      	movs	r1, #4
 8000894:	482c      	ldr	r0, [pc, #176]	; (8000948 <main+0xf8>)
 8000896:	f003 f821 	bl	80038dc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800089a:	2108      	movs	r1, #8
 800089c:	482a      	ldr	r0, [pc, #168]	; (8000948 <main+0xf8>)
 800089e:	f003 f81d 	bl	80038dc <HAL_TIM_PWM_Start>

  array_set_red();
 80008a2:	f004 ff9d 	bl	80057e0 <array_set_red>
  array_set_rst();
 80008a6:	f004 ffb4 	bl	8005812 <array_set_rst>

  can_user_init(&hcan1);             // CAN用户初始化
 80008aa:	4828      	ldr	r0, [pc, #160]	; (800094c <main+0xfc>)
 80008ac:	f004 ffca 	bl	8005844 <can_user_init>

  pid_init(&windwill_motor_PID, DELTA_PID      //1号电机
 80008b0:	eddf 2a27 	vldr	s5, [pc, #156]	; 8000950 <main+0x100>
 80008b4:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8000954 <main+0x104>
 80008b8:	eddf 1a25 	vldr	s3, [pc, #148]	; 8000950 <main+0x100>
 80008bc:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8000950 <main+0x100>
 80008c0:	eddf 0a23 	vldr	s1, [pc, #140]	; 8000950 <main+0x100>
 80008c4:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80008c8:	2101      	movs	r1, #1
 80008ca:	4823      	ldr	r0, [pc, #140]	; (8000958 <main+0x108>)
 80008cc:	f005 f8c4 	bl	8005a58 <pid_init>

  while (1)
  {
	  motor_info[0].set_voltage = pid_calc(&windwill_motor_PID
										, 500
										,motor_info[0].set_voltage );
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <main+0x10c>)
 80008d2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	  motor_info[0].set_voltage = pid_calc(&windwill_motor_PID
 80008d6:	ee07 3a90 	vmov	s15, r3
 80008da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008de:	eef0 0a67 	vmov.f32	s1, s15
 80008e2:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8000960 <main+0x110>
 80008e6:	481c      	ldr	r0, [pc, #112]	; (8000958 <main+0x108>)
 80008e8:	f005 f8e2 	bl	8005ab0 <pid_calc>
 80008ec:	eef0 7a40 	vmov.f32	s15, s0
 80008f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008f4:	ee17 3a90 	vmov	r3, s15
 80008f8:	b21a      	sxth	r2, r3
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <main+0x10c>)
 80008fc:	805a      	strh	r2, [r3, #2]
	  set_motor_voltage(1 ,motor_info[0].set_voltage
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <main+0x10c>)
 8000900:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8000904:	2300      	movs	r3, #0
 8000906:	9300      	str	r3, [sp, #0]
 8000908:	2300      	movs	r3, #0
 800090a:	2200      	movs	r2, #0
 800090c:	2001      	movs	r0, #1
 800090e:	f005 f84b 	bl	80059a8 <set_motor_voltage>
								,0
								,0
								,0
						 );
	  if( windwill_state == 1 )
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <main+0x114>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d108      	bne.n	800092c <main+0xdc>
	  {
		  windwill_state = 0;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <main+0x114>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
		  windwill_num++;
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <main+0x118>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	3301      	adds	r3, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <main+0x118>)
 800092a:	701a      	strb	r2, [r3, #0]
	  }
	  windwill_num = (windwill_num > 6)?1:windwill_num;
 800092c:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <main+0x118>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b06      	cmp	r3, #6
 8000932:	d802      	bhi.n	800093a <main+0xea>
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <main+0x118>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	e000      	b.n	800093c <main+0xec>
 800093a:	2301      	movs	r3, #1
 800093c:	4a0a      	ldr	r2, [pc, #40]	; (8000968 <main+0x118>)
 800093e:	7013      	strb	r3, [r2, #0]
	  motor_info[0].set_voltage = pid_calc(&windwill_motor_PID
 8000940:	e7c6      	b.n	80008d0 <main+0x80>
 8000942:	bf00      	nop
 8000944:	200029f4 	.word	0x200029f4
 8000948:	200028f4 	.word	0x200028f4
 800094c:	200027c4 	.word	0x200027c4
 8000950:	00000000 	.word	0x00000000
 8000954:	44a28000 	.word	0x44a28000
 8000958:	200027ec 	.word	0x200027ec
 800095c:	20000010 	.word	0x20000010
 8000960:	43fa0000 	.word	0x43fa0000
 8000964:	20000080 	.word	0x20000080
 8000968:	20000000 	.word	0x20000000

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	; 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	; 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fa3e 	bl	8005dfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <SystemClock_Config+0xcc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000998:	4a27      	ldr	r2, [pc, #156]	; (8000a38 <SystemClock_Config+0xcc>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	; 0x40
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <SystemClock_Config+0xcc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <SystemClock_Config+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <SystemClock_Config+0xd0>)
 80009b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ba:	6013      	str	r3, [r2, #0]
 80009bc:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <SystemClock_Config+0xd0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c8:	2301      	movs	r3, #1
 80009ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d2:	2302      	movs	r3, #2
 80009d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80009dc:	230c      	movs	r3, #12
 80009de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80009e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e6:	2302      	movs	r3, #2
 80009e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	f107 0320 	add.w	r3, r7, #32
 80009f2:	4618      	mov	r0, r3
 80009f4:	f002 fad6 	bl	8002fa4 <HAL_RCC_OscConfig>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80009fe:	f000 f81f 	bl	8000a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a02:	230f      	movs	r3, #15
 8000a04:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a06:	2302      	movs	r3, #2
 8000a08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a0e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000a14:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a18:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	2105      	movs	r1, #5
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fd2f 	bl	8003484 <HAL_RCC_ClockConfig>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a2c:	f000 f808 	bl	8000a40 <Error_Handler>
  }
}
 8000a30:	bf00      	nop
 8000a32:	3750      	adds	r7, #80	; 0x50
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40007000 	.word	0x40007000

08000a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a44:	bf00      	nop
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
	...

08000a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	4b10      	ldr	r3, [pc, #64]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a64:	6453      	str	r3, [r2, #68]	; 0x44
 8000a66:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a08      	ldr	r2, [pc, #32]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_MspInit+0x4c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 fd42 	bl	800157c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f002 fa37 	bl	8002f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b0e:	2002      	movs	r0, #2
 8000b10:	f002 fa30 	bl	8002f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000b1c:	2010      	movs	r0, #16
 8000b1e:	f002 fa29 	bl	8002f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <CAN1_TX_IRQHandler+0x10>)
 8000b2e:	f001 f978 	bl	8001e22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	200027c4 	.word	0x200027c4

08000b3c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <CAN1_RX0_IRQHandler+0x10>)
 8000b42:	f001 f96e 	bl	8001e22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200027c4 	.word	0x200027c4

08000b50 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b54:	2020      	movs	r0, #32
 8000b56:	f002 fa0d 	bl	8002f74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b5a:	2040      	movs	r0, #64	; 0x40
 8000b5c:	f002 fa0a 	bl	8002f74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <USART1_IRQHandler+0x10>)
 8000b6a:	f003 fef9 	bl	8004960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20002af4 	.word	0x20002af4

08000b78 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000b7c:	4802      	ldr	r0, [pc, #8]	; (8000b88 <DMA2_Stream1_IRQHandler+0x10>)
 8000b7e:	f001 fdb3 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20002834 	.word	0x20002834

08000b8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch2);
 8000b90:	4802      	ldr	r0, [pc, #8]	; (8000b9c <DMA2_Stream2_IRQHandler+0x10>)
 8000b92:	f001 fda9 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20002994 	.word	0x20002994

08000ba0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch2);
 8000ba4:	4802      	ldr	r0, [pc, #8]	; (8000bb0 <DMA2_Stream3_IRQHandler+0x10>)
 8000ba6:	f001 fd9f 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	20002894 	.word	0x20002894

08000bb4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch3);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <DMA2_Stream4_IRQHandler+0x10>)
 8000bba:	f001 fd95 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20002a34 	.word	0x20002a34

08000bc8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <DMA2_Stream5_IRQHandler+0x10>)
 8000bce:	f001 fd8b 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20002a94 	.word	0x20002a94

08000bdc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch3);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <DMA2_Stream6_IRQHandler+0x10>)
 8000be2:	f001 fd81 	bl	80026e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20002934 	.word	0x20002934

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <SystemInit+0x28>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <SystemInit+0x28>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SystemInit+0x28>)
 8000c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim8_ch2;
DMA_HandleTypeDef hdma_tim8_ch3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b096      	sub	sp, #88	; 0x58
 8000c20:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
 8000c48:	611a      	str	r2, [r3, #16]
 8000c4a:	615a      	str	r2, [r3, #20]
 8000c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2220      	movs	r2, #32
 8000c52:	2100      	movs	r1, #0
 8000c54:	4618      	mov	r0, r3
 8000c56:	f005 f8d1 	bl	8005dfc <memset>

  htim1.Instance = TIM1;
 8000c5a:	4b4a      	ldr	r3, [pc, #296]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c5c:	4a4a      	ldr	r2, [pc, #296]	; (8000d88 <MX_TIM1_Init+0x16c>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1-1;
 8000c60:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b47      	ldr	r3, [pc, #284]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 105-1;
 8000c6c:	4b45      	ldr	r3, [pc, #276]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c6e:	2268      	movs	r2, #104	; 0x68
 8000c70:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c72:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c78:	4b42      	ldr	r3, [pc, #264]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c84:	483f      	ldr	r0, [pc, #252]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000c86:	f002 fdc9 	bl	800381c <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000c90:	f7ff fed6 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4838      	ldr	r0, [pc, #224]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000ca2:	f003 f8e3 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000cac:	f7ff fec8 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb0:	4834      	ldr	r0, [pc, #208]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000cb2:	f002 fdde 	bl	8003872 <HAL_TIM_PWM_Init>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000cbc:	f7ff fec0 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ccc:	4619      	mov	r1, r3
 8000cce:	482d      	ldr	r0, [pc, #180]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000cd0:	f003 fd2a 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000cda:	f7ff feb1 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cde:	2360      	movs	r3, #96	; 0x60
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cea:	2300      	movs	r3, #0
 8000cec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cfe:	2200      	movs	r2, #0
 8000d00:	4619      	mov	r1, r3
 8000d02:	4820      	ldr	r0, [pc, #128]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000d04:	f002 ffec 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000d0e:	f7ff fe97 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d16:	2204      	movs	r2, #4
 8000d18:	4619      	mov	r1, r3
 8000d1a:	481a      	ldr	r0, [pc, #104]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000d1c:	f002 ffe0 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000d26:	f7ff fe8b 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2e:	2208      	movs	r2, #8
 8000d30:	4619      	mov	r1, r3
 8000d32:	4814      	ldr	r0, [pc, #80]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000d34:	f002 ffd4 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000d3e:	f7ff fe7f 	bl	8000a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d5a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4807      	ldr	r0, [pc, #28]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000d66:	f003 fd5b 	bl	8004820 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000d70:	f7ff fe66 	bl	8000a40 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <MX_TIM1_Init+0x168>)
 8000d76:	f000 f9f5 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8000d7a:	bf00      	nop
 8000d7c:	3758      	adds	r7, #88	; 0x58
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200029f4 	.word	0x200029f4
 8000d88:	40010000 	.word	0x40010000

08000d8c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b096      	sub	sp, #88	; 0x58
 8000d90:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
 8000dba:	615a      	str	r2, [r3, #20]
 8000dbc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2220      	movs	r2, #32
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f005 f819 	bl	8005dfc <memset>

  htim8.Instance = TIM8;
 8000dca:	4b44      	ldr	r3, [pc, #272]	; (8000edc <MX_TIM8_Init+0x150>)
 8000dcc:	4a44      	ldr	r2, [pc, #272]	; (8000ee0 <MX_TIM8_Init+0x154>)
 8000dce:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 1-1;
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <MX_TIM8_Init+0x150>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b41      	ldr	r3, [pc, #260]	; (8000edc <MX_TIM8_Init+0x150>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 105-1;
 8000ddc:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <MX_TIM8_Init+0x150>)
 8000dde:	2268      	movs	r2, #104	; 0x68
 8000de0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de2:	4b3e      	ldr	r3, [pc, #248]	; (8000edc <MX_TIM8_Init+0x150>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000de8:	4b3c      	ldr	r3, [pc, #240]	; (8000edc <MX_TIM8_Init+0x150>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dee:	4b3b      	ldr	r3, [pc, #236]	; (8000edc <MX_TIM8_Init+0x150>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000df4:	4839      	ldr	r0, [pc, #228]	; (8000edc <MX_TIM8_Init+0x150>)
 8000df6:	f002 fd11 	bl	800381c <HAL_TIM_Base_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000e00:	f7ff fe1e 	bl	8000a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e08:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4832      	ldr	r0, [pc, #200]	; (8000edc <MX_TIM8_Init+0x150>)
 8000e12:	f003 f82b 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8000e1c:	f7ff fe10 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e20:	482e      	ldr	r0, [pc, #184]	; (8000edc <MX_TIM8_Init+0x150>)
 8000e22:	f002 fd26 	bl	8003872 <HAL_TIM_PWM_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8000e2c:	f7ff fe08 	bl	8000a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e30:	2300      	movs	r3, #0
 8000e32:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	2300      	movs	r3, #0
 8000e36:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4827      	ldr	r0, [pc, #156]	; (8000edc <MX_TIM8_Init+0x150>)
 8000e40:	f003 fc72 	bl	8004728 <HAL_TIMEx_MasterConfigSynchronization>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8000e4a:	f7ff fdf9 	bl	8000a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2360      	movs	r3, #96	; 0x60
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	2204      	movs	r2, #4
 8000e70:	4619      	mov	r1, r3
 8000e72:	481a      	ldr	r0, [pc, #104]	; (8000edc <MX_TIM8_Init+0x150>)
 8000e74:	f002 ff34 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8000e7e:	f7ff fddf 	bl	8000a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	2208      	movs	r2, #8
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4814      	ldr	r0, [pc, #80]	; (8000edc <MX_TIM8_Init+0x150>)
 8000e8c:	f002 ff28 	bl	8003ce0 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM8_Init+0x10e>
  {
    Error_Handler();
 8000e96:	f7ff fdd3 	bl	8000a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM8_Init+0x150>)
 8000ebe:	f003 fcaf 	bl	8004820 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8000ec8:	f7ff fdba 	bl	8000a40 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM8_Init+0x150>)
 8000ece:	f000 f949 	bl	8001164 <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3758      	adds	r7, #88	; 0x58
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200028f4 	.word	0x200028f4
 8000ee0:	40010400 	.word	0x40010400

08000ee4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a8f      	ldr	r2, [pc, #572]	; (8001130 <HAL_TIM_Base_MspInit+0x24c>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	f040 80a2 	bne.w	800103c <HAL_TIM_Base_MspInit+0x158>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <HAL_TIM_Base_MspInit+0x250>)
 8000efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f00:	4a8c      	ldr	r2, [pc, #560]	; (8001134 <HAL_TIM_Base_MspInit+0x250>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6453      	str	r3, [r2, #68]	; 0x44
 8000f08:	4b8a      	ldr	r3, [pc, #552]	; (8001134 <HAL_TIM_Base_MspInit+0x250>)
 8000f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000f14:	4b88      	ldr	r3, [pc, #544]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f16:	4a89      	ldr	r2, [pc, #548]	; (800113c <HAL_TIM_Base_MspInit+0x258>)
 8000f18:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000f1a:	4b87      	ldr	r3, [pc, #540]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f1c:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f20:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f22:	4b85      	ldr	r3, [pc, #532]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f24:	2240      	movs	r2, #64	; 0x40
 8000f26:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f28:	4b83      	ldr	r3, [pc, #524]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f2e:	4b82      	ldr	r3, [pc, #520]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f34:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f36:	4b80      	ldr	r3, [pc, #512]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f3c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f3e:	4b7e      	ldr	r3, [pc, #504]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f40:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f44:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000f46:	4b7c      	ldr	r3, [pc, #496]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f4c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f4e:	4b7a      	ldr	r3, [pc, #488]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f54:	4b78      	ldr	r3, [pc, #480]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000f5a:	4877      	ldr	r0, [pc, #476]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f5c:	f001 fa9c 	bl	8002498 <HAL_DMA_Init>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_TIM_Base_MspInit+0x86>
    {
      Error_Handler();
 8000f66:	f7ff fd6b 	bl	8000a40 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a72      	ldr	r2, [pc, #456]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f6e:	625a      	str	r2, [r3, #36]	; 0x24
 8000f70:	4a71      	ldr	r2, [pc, #452]	; (8001138 <HAL_TIM_Base_MspInit+0x254>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH2 Init */
    hdma_tim1_ch2.Instance = DMA2_Stream2;
 8000f76:	4b72      	ldr	r3, [pc, #456]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000f78:	4a72      	ldr	r2, [pc, #456]	; (8001144 <HAL_TIM_Base_MspInit+0x260>)
 8000f7a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch2.Init.Channel = DMA_CHANNEL_6;
 8000f7c:	4b70      	ldr	r3, [pc, #448]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000f7e:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000f82:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f84:	4b6e      	ldr	r3, [pc, #440]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000f86:	2240      	movs	r2, #64	; 0x40
 8000f88:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8a:	4b6d      	ldr	r3, [pc, #436]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000f90:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f96:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f98:	4b69      	ldr	r3, [pc, #420]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000f9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f9e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa0:	4b67      	ldr	r3, [pc, #412]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fa6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch2.Init.Mode = DMA_CIRCULAR;
 8000fa8:	4b65      	ldr	r3, [pc, #404]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fae:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8000fb0:	4b63      	ldr	r3, [pc, #396]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb6:	4b62      	ldr	r3, [pc, #392]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch2) != HAL_OK)
 8000fbc:	4860      	ldr	r0, [pc, #384]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000fbe:	f001 fa6b 	bl	8002498 <HAL_DMA_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_TIM_Base_MspInit+0xe8>
    {
      Error_Handler();
 8000fc8:	f7ff fd3a 	bl	8000a40 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim1_ch2);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a5c      	ldr	r2, [pc, #368]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000fd0:	629a      	str	r2, [r3, #40]	; 0x28
 8000fd2:	4a5b      	ldr	r2, [pc, #364]	; (8001140 <HAL_TIM_Base_MspInit+0x25c>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1_CH3 Init */
    hdma_tim1_ch3.Instance = DMA2_Stream6;
 8000fd8:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8000fda:	4a5c      	ldr	r2, [pc, #368]	; (800114c <HAL_TIM_Base_MspInit+0x268>)
 8000fdc:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch3.Init.Channel = DMA_CHANNEL_6;
 8000fde:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8000fe0:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000fe4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fe6:	4b58      	ldr	r3, [pc, #352]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8000fe8:	2240      	movs	r2, #64	; 0x40
 8000fea:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fec:	4b56      	ldr	r3, [pc, #344]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8000ff2:	4b55      	ldr	r3, [pc, #340]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8000ff4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ff8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ffa:	4b53      	ldr	r3, [pc, #332]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8000ffc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001000:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001002:	4b51      	ldr	r3, [pc, #324]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8001004:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001008:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch3.Init.Mode = DMA_CIRCULAR;
 800100a:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 800100c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001010:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8001012:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8001014:	2200      	movs	r2, #0
 8001016:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001018:	4b4b      	ldr	r3, [pc, #300]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 800101a:	2200      	movs	r2, #0
 800101c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch3) != HAL_OK)
 800101e:	484a      	ldr	r0, [pc, #296]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8001020:	f001 fa3a 	bl	8002498 <HAL_DMA_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_TIM_Base_MspInit+0x14a>
    {
      Error_Handler();
 800102a:	f7ff fd09 	bl	8000a40 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim1_ch3);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a45      	ldr	r2, [pc, #276]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8001032:	62da      	str	r2, [r3, #44]	; 0x2c
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <HAL_TIM_Base_MspInit+0x264>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800103a:	e074      	b.n	8001126 <HAL_TIM_Base_MspInit+0x242>
  else if(tim_baseHandle->Instance==TIM8)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a43      	ldr	r2, [pc, #268]	; (8001150 <HAL_TIM_Base_MspInit+0x26c>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d16f      	bne.n	8001126 <HAL_TIM_Base_MspInit+0x242>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b3a      	ldr	r3, [pc, #232]	; (8001134 <HAL_TIM_Base_MspInit+0x250>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a39      	ldr	r2, [pc, #228]	; (8001134 <HAL_TIM_Base_MspInit+0x250>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b37      	ldr	r3, [pc, #220]	; (8001134 <HAL_TIM_Base_MspInit+0x250>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
    hdma_tim8_ch2.Instance = DMA2_Stream3;
 8001062:	4b3c      	ldr	r3, [pc, #240]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 8001064:	4a3c      	ldr	r2, [pc, #240]	; (8001158 <HAL_TIM_Base_MspInit+0x274>)
 8001066:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch2.Init.Channel = DMA_CHANNEL_7;
 8001068:	4b3a      	ldr	r3, [pc, #232]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 800106a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800106e:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001070:	4b38      	ldr	r3, [pc, #224]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 8001072:	2240      	movs	r2, #64	; 0x40
 8001074:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001076:	4b37      	ldr	r3, [pc, #220]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 8001078:	2200      	movs	r2, #0
 800107a:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800107c:	4b35      	ldr	r3, [pc, #212]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 800107e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001082:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001084:	4b33      	ldr	r3, [pc, #204]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 8001086:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800108a:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 800108e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001092:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch2.Init.Mode = DMA_CIRCULAR;
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 8001096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800109a:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800109c:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 800109e:	2200      	movs	r2, #0
 80010a0:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010a2:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch2) != HAL_OK)
 80010a8:	482a      	ldr	r0, [pc, #168]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 80010aa:	f001 f9f5 	bl	8002498 <HAL_DMA_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_TIM_Base_MspInit+0x1d4>
      Error_Handler();
 80010b4:	f7ff fcc4 	bl	8000a40 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch2);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4a26      	ldr	r2, [pc, #152]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
 80010be:	4a25      	ldr	r2, [pc, #148]	; (8001154 <HAL_TIM_Base_MspInit+0x270>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim8_ch3.Instance = DMA2_Stream4;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010c6:	4a26      	ldr	r2, [pc, #152]	; (8001160 <HAL_TIM_Base_MspInit+0x27c>)
 80010c8:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch3.Init.Channel = DMA_CHANNEL_7;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010cc:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d2:	4b22      	ldr	r3, [pc, #136]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010d4:	2240      	movs	r2, #64	; 0x40
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010e4:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010ec:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010f4:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch3.Init.Mode = DMA_CIRCULAR;
 80010f6:	4b19      	ldr	r3, [pc, #100]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 80010f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010fc:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 8001100:	2200      	movs	r2, #0
 8001102:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 8001106:	2200      	movs	r2, #0
 8001108:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch3) != HAL_OK)
 800110a:	4814      	ldr	r0, [pc, #80]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 800110c:	f001 f9c4 	bl	8002498 <HAL_DMA_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_TIM_Base_MspInit+0x236>
      Error_Handler();
 8001116:	f7ff fc93 	bl	8000a40 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch3);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a0f      	ldr	r2, [pc, #60]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001120:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_TIM_Base_MspInit+0x278>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40010000 	.word	0x40010000
 8001134:	40023800 	.word	0x40023800
 8001138:	20002834 	.word	0x20002834
 800113c:	40026428 	.word	0x40026428
 8001140:	20002994 	.word	0x20002994
 8001144:	40026440 	.word	0x40026440
 8001148:	20002934 	.word	0x20002934
 800114c:	400264a0 	.word	0x400264a0
 8001150:	40010400 	.word	0x40010400
 8001154:	20002894 	.word	0x20002894
 8001158:	40026458 	.word	0x40026458
 800115c:	20002a34 	.word	0x20002a34
 8001160:	40026470 	.word	0x40026470

08001164 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	; 0x28
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	605a      	str	r2, [r3, #4]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a34      	ldr	r2, [pc, #208]	; (8001254 <HAL_TIM_MspPostInit+0xf0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d13e      	bne.n	8001204 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	4b33      	ldr	r3, [pc, #204]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	4a32      	ldr	r2, [pc, #200]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	; 0x30
 8001196:	4b30      	ldr	r3, [pc, #192]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a2b      	ldr	r2, [pc, #172]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0310 	and.w	r3, r3, #16
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = windwill_output_2_Pin|windwill_output_1_Pin;
 80011be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011d0:	2301      	movs	r3, #1
 80011d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d4:	f107 0314 	add.w	r3, r7, #20
 80011d8:	4619      	mov	r1, r3
 80011da:	4820      	ldr	r0, [pc, #128]	; (800125c <HAL_TIM_MspPostInit+0xf8>)
 80011dc:	f001 fcec 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = windwill_output_3_Pin;
 80011e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e6:	2302      	movs	r3, #2
 80011e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ee:	2300      	movs	r3, #0
 80011f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011f2:	2301      	movs	r3, #1
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(windwill_output_3_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <HAL_TIM_MspPostInit+0xfc>)
 80011fe:	f001 fcdb 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001202:	e022      	b.n	800124a <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM8)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a16      	ldr	r2, [pc, #88]	; (8001264 <HAL_TIM_MspPostInit+0x100>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d11d      	bne.n	800124a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a10      	ldr	r2, [pc, #64]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 8001218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_TIM_MspPostInit+0xf4>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = windwill_output_5_Pin|windwill_output_4_Pin;
 800122a:	23c0      	movs	r3, #192	; 0xc0
 800122c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800123a:	2303      	movs	r3, #3
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	4808      	ldr	r0, [pc, #32]	; (8001268 <HAL_TIM_MspPostInit+0x104>)
 8001246:	f001 fcb7 	bl	8002bb8 <HAL_GPIO_Init>
}
 800124a:	bf00      	nop
 800124c:	3728      	adds	r7, #40	; 0x28
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40010000 	.word	0x40010000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020000 	.word	0x40020000
 8001260:	40021000 	.word	0x40021000
 8001264:	40010400 	.word	0x40010400
 8001268:	40022000 	.word	0x40022000

0800126c <MX_UART8_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_usart1_rx;

/* UART8 init function */
void MX_UART8_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0

  huart8.Instance = UART8;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_UART8_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_UART8_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_UART8_Init+0x4c>)
 8001278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800127c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_UART8_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_UART8_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_UART8_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_UART8_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_UART8_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_UART8_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_UART8_Init+0x4c>)
 80012a4:	f003 fb0e 	bl	80048c4 <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_UART8_Init+0x46>
  {
    Error_Handler();
 80012ae:	f7ff fbc7 	bl	8000a40 <Error_Handler>
  }

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20002b34 	.word	0x20002b34
 80012bc:	40007c00 	.word	0x40007c00

080012c0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80012c4:	4b10      	ldr	r3, [pc, #64]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012c6:	4a11      	ldr	r2, [pc, #68]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 100000;
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012cc:	4a10      	ldr	r2, [pc, #64]	; (8001310 <MX_USART1_UART_Init+0x50>)
 80012ce:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d0:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012e4:	220c      	movs	r2, #12
 80012e6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_USART1_UART_Init+0x48>)
 80012f6:	f003 fae5 	bl	80048c4 <HAL_UART_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001300:	f7ff fb9e 	bl	8000a40 <Error_Handler>
  }

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20002af4 	.word	0x20002af4
 800130c:	40011000 	.word	0x40011000
 8001310:	000186a0 	.word	0x000186a0

08001314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08c      	sub	sp, #48	; 0x30
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART8)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a4d      	ldr	r2, [pc, #308]	; (8001468 <HAL_UART_MspInit+0x154>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12c      	bne.n	8001390 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* UART8 clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	4b4c      	ldr	r3, [pc, #304]	; (800146c <HAL_UART_MspInit+0x158>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_UART_MspInit+0x158>)
 8001340:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b49      	ldr	r3, [pc, #292]	; (800146c <HAL_UART_MspInit+0x158>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800134e:	61bb      	str	r3, [r7, #24]
 8001350:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
 8001356:	4b45      	ldr	r3, [pc, #276]	; (800146c <HAL_UART_MspInit+0x158>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a44      	ldr	r2, [pc, #272]	; (800146c <HAL_UART_MspInit+0x158>)
 800135c:	f043 0310 	orr.w	r3, r3, #16
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <HAL_UART_MspInit+0x158>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE1     ------> UART8_TX
    PE0     ------> UART8_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800136e:	2303      	movs	r3, #3
 8001370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001376:	2301      	movs	r3, #1
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137a:	2303      	movs	r3, #3
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800137e:	2308      	movs	r3, #8
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4839      	ldr	r0, [pc, #228]	; (8001470 <HAL_UART_MspInit+0x15c>)
 800138a:	f001 fc15 	bl	8002bb8 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800138e:	e066      	b.n	800145e <HAL_UART_MspInit+0x14a>
  else if(uartHandle->Instance==USART1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a37      	ldr	r2, [pc, #220]	; (8001474 <HAL_UART_MspInit+0x160>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d161      	bne.n	800145e <HAL_UART_MspInit+0x14a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <HAL_UART_MspInit+0x158>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a2:	4a32      	ldr	r2, [pc, #200]	; (800146c <HAL_UART_MspInit+0x158>)
 80013a4:	f043 0310 	orr.w	r3, r3, #16
 80013a8:	6453      	str	r3, [r2, #68]	; 0x44
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_UART_MspInit+0x158>)
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	613b      	str	r3, [r7, #16]
 80013b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	4b2c      	ldr	r3, [pc, #176]	; (800146c <HAL_UART_MspInit+0x158>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a2b      	ldr	r2, [pc, #172]	; (800146c <HAL_UART_MspInit+0x158>)
 80013c0:	f043 0302 	orr.w	r3, r3, #2
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b29      	ldr	r3, [pc, #164]	; (800146c <HAL_UART_MspInit+0x158>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80013d2:	23c0      	movs	r3, #192	; 0xc0
 80013d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013e2:	2307      	movs	r3, #7
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4619      	mov	r1, r3
 80013ec:	4822      	ldr	r0, [pc, #136]	; (8001478 <HAL_UART_MspInit+0x164>)
 80013ee:	f001 fbe3 	bl	8002bb8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80013f2:	4b22      	ldr	r3, [pc, #136]	; (800147c <HAL_UART_MspInit+0x168>)
 80013f4:	4a22      	ldr	r2, [pc, #136]	; (8001480 <HAL_UART_MspInit+0x16c>)
 80013f6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80013f8:	4b20      	ldr	r3, [pc, #128]	; (800147c <HAL_UART_MspInit+0x168>)
 80013fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001400:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_UART_MspInit+0x168>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b1d      	ldr	r3, [pc, #116]	; (800147c <HAL_UART_MspInit+0x168>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_UART_MspInit+0x168>)
 800140e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001412:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <HAL_UART_MspInit+0x168>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800141a:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_UART_MspInit+0x168>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001420:	4b16      	ldr	r3, [pc, #88]	; (800147c <HAL_UART_MspInit+0x168>)
 8001422:	2200      	movs	r2, #0
 8001424:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_UART_MspInit+0x168>)
 8001428:	2200      	movs	r2, #0
 800142a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_UART_MspInit+0x168>)
 800142e:	2200      	movs	r2, #0
 8001430:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001432:	4812      	ldr	r0, [pc, #72]	; (800147c <HAL_UART_MspInit+0x168>)
 8001434:	f001 f830 	bl	8002498 <HAL_DMA_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_UART_MspInit+0x12e>
      Error_Handler();
 800143e:	f7ff faff 	bl	8000a40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_UART_MspInit+0x168>)
 8001446:	635a      	str	r2, [r3, #52]	; 0x34
 8001448:	4a0c      	ldr	r2, [pc, #48]	; (800147c <HAL_UART_MspInit+0x168>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2100      	movs	r1, #0
 8001452:	2025      	movs	r0, #37	; 0x25
 8001454:	f000 ffe9 	bl	800242a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001458:	2025      	movs	r0, #37	; 0x25
 800145a:	f001 f802 	bl	8002462 <HAL_NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3730      	adds	r7, #48	; 0x30
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40007c00 	.word	0x40007c00
 800146c:	40023800 	.word	0x40023800
 8001470:	40021000 	.word	0x40021000
 8001474:	40011000 	.word	0x40011000
 8001478:	40020400 	.word	0x40020400
 800147c:	20002a94 	.word	0x20002a94
 8001480:	40026488 	.word	0x40026488

08001484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001488:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800148a:	e003      	b.n	8001494 <LoopCopyDataInit>

0800148c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800148e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001490:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001492:	3104      	adds	r1, #4

08001494 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001494:	480b      	ldr	r0, [pc, #44]	; (80014c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001496:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001498:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800149a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800149c:	d3f6      	bcc.n	800148c <CopyDataInit>
  ldr  r2, =_sbss
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80014a0:	e002      	b.n	80014a8 <LoopFillZerobss>

080014a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80014a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80014a4:	f842 3b04 	str.w	r3, [r2], #4

080014a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80014a8:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80014aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80014ac:	d3f9      	bcc.n	80014a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014ae:	f7ff fb9f 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014b2:	f004 fc7f 	bl	8005db4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014b6:	f7ff f9cb 	bl	8000850 <main>
  bx  lr    
 80014ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014bc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80014c0:	08005e54 	.word	0x08005e54
  ldr  r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80014c8:	20000064 	.word	0x20000064
  ldr  r2, =_sbss
 80014cc:	20000064 	.word	0x20000064
  ldr  r3, = _ebss
 80014d0:	20002b7c 	.word	0x20002b7c

080014d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC_IRQHandler>
	...

080014d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014dc:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <HAL_Init+0x40>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014e8:	4b0b      	ldr	r3, [pc, #44]	; (8001518 <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <HAL_Init+0x40>)
 80014ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <HAL_Init+0x40>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a07      	ldr	r2, [pc, #28]	; (8001518 <HAL_Init+0x40>)
 80014fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 ff87 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001506:	2000      	movs	r0, #0
 8001508:	f000 f808 	bl	800151c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800150c:	f7ff faa0 	bl	8000a50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023c00 	.word	0x40023c00

0800151c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <HAL_InitTick+0x54>)
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	4b12      	ldr	r3, [pc, #72]	; (8001574 <HAL_InitTick+0x58>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	4619      	mov	r1, r3
 800152e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001532:	fbb3 f3f1 	udiv	r3, r3, r1
 8001536:	fbb2 f3f3 	udiv	r3, r2, r3
 800153a:	4618      	mov	r0, r3
 800153c:	f000 ff9f 	bl	800247e <HAL_SYSTICK_Config>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e00e      	b.n	8001568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2b0f      	cmp	r3, #15
 800154e:	d80a      	bhi.n	8001566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001550:	2200      	movs	r2, #0
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	f04f 30ff 	mov.w	r0, #4294967295
 8001558:	f000 ff67 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800155c:	4a06      	ldr	r2, [pc, #24]	; (8001578 <HAL_InitTick+0x5c>)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	e000      	b.n	8001568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000004 	.word	0x20000004
 8001574:	2000000c 	.word	0x2000000c
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	20002b74 	.word	0x20002b74

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20002b74 	.word	0x20002b74

080015bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e0ed      	b.n	80017aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7fe ffbc 	bl	8000558 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f022 0202 	bic.w	r2, r2, #2
 80015ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f0:	f7ff ffd8 	bl	80015a4 <HAL_GetTick>
 80015f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f6:	e012      	b.n	800161e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015f8:	f7ff ffd4 	bl	80015a4 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b0a      	cmp	r3, #10
 8001604:	d90b      	bls.n	800161e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2205      	movs	r2, #5
 8001616:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e0c5      	b.n	80017aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1e5      	bne.n	80015f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0201 	orr.w	r2, r2, #1
 800163a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800163c:	f7ff ffb2 	bl	80015a4 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001642:	e012      	b.n	800166a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001644:	f7ff ffae 	bl	80015a4 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b0a      	cmp	r3, #10
 8001650:	d90b      	bls.n	800166a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2205      	movs	r2, #5
 8001662:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e09f      	b.n	80017aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0e5      	beq.n	8001644 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	7e1b      	ldrb	r3, [r3, #24]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d108      	bne.n	8001692 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	e007      	b.n	80016a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	7e5b      	ldrb	r3, [r3, #25]
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d108      	bne.n	80016bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	e007      	b.n	80016cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	7e9b      	ldrb	r3, [r3, #26]
 80016d0:	2b01      	cmp	r3, #1
 80016d2:	d108      	bne.n	80016e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f042 0220 	orr.w	r2, r2, #32
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f022 0220 	bic.w	r2, r2, #32
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	7edb      	ldrb	r3, [r3, #27]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d108      	bne.n	8001710 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 0210 	bic.w	r2, r2, #16
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	e007      	b.n	8001720 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0210 	orr.w	r2, r2, #16
 800171e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	7f1b      	ldrb	r3, [r3, #28]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d108      	bne.n	800173a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f042 0208 	orr.w	r2, r2, #8
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	e007      	b.n	800174a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0208 	bic.w	r2, r2, #8
 8001748:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	7f5b      	ldrb	r3, [r3, #29]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d108      	bne.n	8001764 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f042 0204 	orr.w	r2, r2, #4
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	e007      	b.n	8001774 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f022 0204 	bic.w	r2, r2, #4
 8001772:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	ea42 0103 	orr.w	r1, r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	1e5a      	subs	r2, r3, #1
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3710      	adds	r7, #16
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ca:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d003      	beq.n	80017da <HAL_CAN_ConfigFilter+0x26>
 80017d2:	7cfb      	ldrb	r3, [r7, #19]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	f040 80be 	bne.w	8001956 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017da:	4b65      	ldr	r3, [pc, #404]	; (8001970 <HAL_CAN_ConfigFilter+0x1bc>)
 80017dc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017f4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001808:	021b      	lsls	r3, r3, #8
 800180a:	431a      	orrs	r2, r3
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2201      	movs	r2, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43db      	mvns	r3, r3
 800182c:	401a      	ands	r2, r3
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	69db      	ldr	r3, [r3, #28]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d123      	bne.n	8001884 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	43db      	mvns	r3, r3
 8001846:	401a      	ands	r2, r3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800185e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3248      	adds	r2, #72	; 0x48
 8001864:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001878:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187a:	6979      	ldr	r1, [r7, #20]
 800187c:	3348      	adds	r3, #72	; 0x48
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d122      	bne.n	80018d2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	431a      	orrs	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3248      	adds	r2, #72	; 0x48
 80018b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c8:	6979      	ldr	r1, [r7, #20]
 80018ca:	3348      	adds	r3, #72	; 0x48
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d109      	bne.n	80018ee <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	401a      	ands	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018ec:	e007      	b.n	80018fe <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	431a      	orrs	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d109      	bne.n	800191a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	43db      	mvns	r3, r3
 8001910:	401a      	ands	r2, r3
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001918:	e007      	b.n	800192a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	431a      	orrs	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d107      	bne.n	8001942 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001948:	f023 0201 	bic.w	r2, r3, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e006      	b.n	8001964 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
  }
}
 8001964:	4618      	mov	r0, r3
 8001966:	371c      	adds	r7, #28
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	40006400 	.word	0x40006400

08001974 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b01      	cmp	r3, #1
 8001986:	d12e      	bne.n	80019e6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f022 0201 	bic.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff fe00 	bl	80015a4 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019a6:	e012      	b.n	80019ce <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019a8:	f7ff fdfc 	bl	80015a4 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b0a      	cmp	r3, #10
 80019b4:	d90b      	bls.n	80019ce <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2205      	movs	r2, #5
 80019c6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e012      	b.n	80019f4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0301 	and.w	r3, r3, #1
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1e5      	bne.n	80019a8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e006      	b.n	80019f4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
  }
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b089      	sub	sp, #36	; 0x24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	60f8      	str	r0, [r7, #12]
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a10:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a1a:	7ffb      	ldrb	r3, [r7, #31]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d003      	beq.n	8001a28 <HAL_CAN_AddTxMessage+0x2c>
 8001a20:	7ffb      	ldrb	r3, [r7, #31]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	f040 80b8 	bne.w	8001b98 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d105      	bne.n	8001a48 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f000 80a0 	beq.w	8001b88 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	0e1b      	lsrs	r3, r3, #24
 8001a4c:	f003 0303 	and.w	r3, r3, #3
 8001a50:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d907      	bls.n	8001a68 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e09e      	b.n	8001ba6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a68:	2201      	movs	r2, #1
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10d      	bne.n	8001a96 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a84:	68f9      	ldr	r1, [r7, #12]
 8001a86:	6809      	ldr	r1, [r1, #0]
 8001a88:	431a      	orrs	r2, r3
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3318      	adds	r3, #24
 8001a8e:	011b      	lsls	r3, r3, #4
 8001a90:	440b      	add	r3, r1
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	e00f      	b.n	8001ab6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa6:	68f9      	ldr	r1, [r7, #12]
 8001aa8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001aaa:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	3318      	adds	r3, #24
 8001ab0:	011b      	lsls	r3, r3, #4
 8001ab2:	440b      	add	r3, r1
 8001ab4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6819      	ldr	r1, [r3, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	691a      	ldr	r2, [r3, #16]
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	3318      	adds	r3, #24
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	7d1b      	ldrb	r3, [r3, #20]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d111      	bne.n	8001af6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3318      	adds	r3, #24
 8001ada:	011b      	lsls	r3, r3, #4
 8001adc:	4413      	add	r3, r2
 8001ade:	3304      	adds	r3, #4
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	6811      	ldr	r1, [r2, #0]
 8001ae6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3318      	adds	r3, #24
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	440b      	add	r3, r1
 8001af2:	3304      	adds	r3, #4
 8001af4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3307      	adds	r3, #7
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	061a      	lsls	r2, r3, #24
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3306      	adds	r3, #6
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	431a      	orrs	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3305      	adds	r3, #5
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	021b      	lsls	r3, r3, #8
 8001b10:	4313      	orrs	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	3204      	adds	r2, #4
 8001b16:	7812      	ldrb	r2, [r2, #0]
 8001b18:	4610      	mov	r0, r2
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6811      	ldr	r1, [r2, #0]
 8001b1e:	ea43 0200 	orr.w	r2, r3, r0
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	011b      	lsls	r3, r3, #4
 8001b26:	440b      	add	r3, r1
 8001b28:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b2c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	3303      	adds	r3, #3
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	061a      	lsls	r2, r3, #24
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3302      	adds	r3, #2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3301      	adds	r3, #1
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	021b      	lsls	r3, r3, #8
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	7812      	ldrb	r2, [r2, #0]
 8001b4e:	4610      	mov	r0, r2
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	6811      	ldr	r1, [r2, #0]
 8001b54:	ea43 0200 	orr.w	r2, r3, r0
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	440b      	add	r3, r1
 8001b5e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b62:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3318      	adds	r3, #24
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	4413      	add	r3, r2
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6811      	ldr	r1, [r2, #0]
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	011b      	lsls	r3, r3, #4
 8001b80:	440b      	add	r3, r1
 8001b82:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b84:	2300      	movs	r3, #0
 8001b86:	e00e      	b.n	8001ba6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e006      	b.n	8001ba6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
  }
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3724      	adds	r7, #36	; 0x24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b087      	sub	sp, #28
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
 8001bbe:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d003      	beq.n	8001bd6 <HAL_CAN_GetRxMessage+0x24>
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	f040 80f3 	bne.w	8001dbc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d10e      	bne.n	8001bfa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d116      	bne.n	8001c18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e0e7      	b.n	8001dca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691b      	ldr	r3, [r3, #16]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0d8      	b.n	8001dca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	331b      	adds	r3, #27
 8001c20:	011b      	lsls	r3, r3, #4
 8001c22:	4413      	add	r3, r2
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0204 	and.w	r2, r3, #4
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10c      	bne.n	8001c50 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	331b      	adds	r3, #27
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4413      	add	r3, r2
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	0d5b      	lsrs	r3, r3, #21
 8001c46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	e00b      	b.n	8001c68 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	331b      	adds	r3, #27
 8001c58:	011b      	lsls	r3, r3, #4
 8001c5a:	4413      	add	r3, r2
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	08db      	lsrs	r3, r3, #3
 8001c60:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	331b      	adds	r3, #27
 8001c70:	011b      	lsls	r3, r3, #4
 8001c72:	4413      	add	r3, r2
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0202 	and.w	r2, r3, #2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	331b      	adds	r3, #27
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	331b      	adds	r3, #27
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	0a1b      	lsrs	r3, r3, #8
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	331b      	adds	r3, #27
 8001cb6:	011b      	lsls	r3, r3, #4
 8001cb8:	4413      	add	r3, r2
 8001cba:	3304      	adds	r3, #4
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	0c1b      	lsrs	r3, r3, #16
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	4413      	add	r3, r2
 8001cd0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	011b      	lsls	r3, r3, #4
 8001ce4:	4413      	add	r3, r2
 8001ce6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	0a1a      	lsrs	r2, r3, #8
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	0c1a      	lsrs	r2, r3, #16
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	011b      	lsls	r3, r3, #4
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	0e1a      	lsrs	r2, r3, #24
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	3303      	adds	r3, #3
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	3304      	adds	r3, #4
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	0a1a      	lsrs	r2, r3, #8
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	3305      	adds	r3, #5
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	4413      	add	r3, r2
 8001d66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	0c1a      	lsrs	r2, r3, #16
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	3306      	adds	r3, #6
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	011b      	lsls	r3, r3, #4
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0e1a      	lsrs	r2, r3, #24
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	3307      	adds	r3, #7
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d108      	bne.n	8001da8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68da      	ldr	r2, [r3, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 0220 	orr.w	r2, r2, #32
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	e007      	b.n	8001db8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691a      	ldr	r2, [r3, #16]
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f042 0220 	orr.w	r2, r2, #32
 8001db6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	e006      	b.n	8001dca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
  }
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	371c      	adds	r7, #28
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr

08001dd6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dd6:	b480      	push	{r7}
 8001dd8:	b085      	sub	sp, #20
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	6078      	str	r0, [r7, #4]
 8001dde:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001de6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d002      	beq.n	8001df4 <HAL_CAN_ActivateNotification+0x1e>
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d109      	bne.n	8001e08 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6959      	ldr	r1, [r3, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e04:	2300      	movs	r3, #0
 8001e06:	e006      	b.n	8001e16 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
  }
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b08a      	sub	sp, #40	; 0x28
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	695b      	ldr	r3, [r3, #20]
 8001e34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d07c      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d023      	beq.n	8001eba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2201      	movs	r2, #1
 8001e78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 f97d 	bl	8002184 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e8a:	e016      	b.n	8001eba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d004      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e9e:	e00c      	b.n	8001eba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	e002      	b.n	8001eba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 f983 	bl	80021c0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d024      	beq.n	8001f0e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ecc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f95d 	bl	8002198 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ede:	e016      	b.n	8001f0e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d004      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	e00c      	b.n	8001f0e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e002      	b.n	8001f0e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f963 	bl	80021d4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d024      	beq.n	8001f62 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f20:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f000 f93d 	bl	80021ac <HAL_CAN_TxMailbox2CompleteCallback>
 8001f32:	e016      	b.n	8001f62 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d004      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
 8001f46:	e00c      	b.n	8001f62 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e002      	b.n	8001f62 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f943 	bl	80021e8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f62:	6a3b      	ldr	r3, [r7, #32]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00c      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d007      	beq.n	8001f86 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2210      	movs	r2, #16
 8001f84:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f86:	6a3b      	ldr	r3, [r7, #32]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00b      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d006      	beq.n	8001fa8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f92a 	bl	80021fc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d009      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0303 	and.w	r3, r3, #3
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d002      	beq.n	8001fc6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f003 fc69 	bl	8005898 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fc6:	6a3b      	ldr	r3, [r7, #32]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d00c      	beq.n	8001fea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d007      	beq.n	8001fea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2210      	movs	r2, #16
 8001fe8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	f003 0320 	and.w	r3, r3, #32
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00b      	beq.n	800200c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d006      	beq.n	800200c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2208      	movs	r2, #8
 8002004:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f90c 	bl	8002224 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	2b00      	cmp	r3, #0
 8002014:	d009      	beq.n	800202a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f000 f8f3 	bl	8002210 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	f003 0310 	and.w	r3, r3, #16
 800203a:	2b00      	cmp	r3, #0
 800203c:	d006      	beq.n	800204c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2210      	movs	r2, #16
 8002044:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f8f6 	bl	8002238 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d00b      	beq.n	800206e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d006      	beq.n	800206e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2208      	movs	r2, #8
 8002066:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f8ef 	bl	800224c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800206e:	6a3b      	ldr	r3, [r7, #32]
 8002070:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d075      	beq.n	8002164 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	d06c      	beq.n	800215c <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002088:	2b00      	cmp	r3, #0
 800208a:	d008      	beq.n	800209e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ba:	6a3b      	ldr	r3, [r7, #32]
 80020bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d0:	f043 0304 	orr.w	r3, r3, #4
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020d6:	6a3b      	ldr	r3, [r7, #32]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03d      	beq.n	800215c <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d038      	beq.n	800215c <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f0:	2b30      	cmp	r3, #48	; 0x30
 80020f2:	d017      	beq.n	8002124 <HAL_CAN_IRQHandler+0x302>
 80020f4:	2b30      	cmp	r3, #48	; 0x30
 80020f6:	d804      	bhi.n	8002102 <HAL_CAN_IRQHandler+0x2e0>
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d009      	beq.n	8002110 <HAL_CAN_IRQHandler+0x2ee>
 80020fc:	2b20      	cmp	r3, #32
 80020fe:	d00c      	beq.n	800211a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002100:	e024      	b.n	800214c <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002102:	2b50      	cmp	r3, #80	; 0x50
 8002104:	d018      	beq.n	8002138 <HAL_CAN_IRQHandler+0x316>
 8002106:	2b60      	cmp	r3, #96	; 0x60
 8002108:	d01b      	beq.n	8002142 <HAL_CAN_IRQHandler+0x320>
 800210a:	2b40      	cmp	r3, #64	; 0x40
 800210c:	d00f      	beq.n	800212e <HAL_CAN_IRQHandler+0x30c>
            break;
 800210e:	e01d      	b.n	800214c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002112:	f043 0308 	orr.w	r3, r3, #8
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002118:	e018      	b.n	800214c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	f043 0310 	orr.w	r3, r3, #16
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002122:	e013      	b.n	800214c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f043 0320 	orr.w	r3, r3, #32
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212c:	e00e      	b.n	800214c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002136:	e009      	b.n	800214c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002140:	e004      	b.n	800214c <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	699a      	ldr	r2, [r3, #24]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800215a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2204      	movs	r2, #4
 8002162:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d008      	beq.n	800217c <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f872 	bl	8002260 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800217c:	bf00      	nop
 800217e:	3728      	adds	r7, #40	; 0x28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	; (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <__NVIC_EnableIRQ+0x38>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	e000e100 	.word	0xe000e100

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	; (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	; (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	; 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	; 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	; (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff29 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff3e 	bl	80022bc <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff31 	bl	80022d8 <__NVIC_EnableIRQ>
}
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7ff ffa2 	bl	80023d0 <SysTick_Config>
 800248c:	4603      	mov	r3, r0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a0:	2300      	movs	r3, #0
 80024a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80024a4:	f7ff f87e 	bl	80015a4 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e099      	b.n	80025e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2202      	movs	r2, #2
 80024c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d4:	e00f      	b.n	80024f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024d6:	f7ff f865 	bl	80015a4 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b05      	cmp	r3, #5
 80024e2:	d908      	bls.n	80024f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2220      	movs	r2, #32
 80024e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2203      	movs	r2, #3
 80024ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e078      	b.n	80025e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d1e8      	bne.n	80024d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	4b38      	ldr	r3, [pc, #224]	; (80025f0 <HAL_DMA_Init+0x158>)
 8002510:	4013      	ands	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4313      	orrs	r3, r2
 8002546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	2b04      	cmp	r3, #4
 800254e:	d107      	bne.n	8002560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	4313      	orrs	r3, r2
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695b      	ldr	r3, [r3, #20]
 800256e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	f023 0307 	bic.w	r3, r3, #7
 8002576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	4313      	orrs	r3, r2
 8002580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b04      	cmp	r3, #4
 8002588:	d117      	bne.n	80025ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2b00      	cmp	r3, #0
 800259a:	d00e      	beq.n	80025ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa91 	bl	8002ac4 <DMA_CheckFifoParam>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2240      	movs	r2, #64	; 0x40
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80025b6:	2301      	movs	r3, #1
 80025b8:	e016      	b.n	80025e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 fa48 	bl	8002a58 <DMA_CalcBaseAndBitshift>
 80025c8:	4603      	mov	r3, r0
 80025ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	223f      	movs	r2, #63	; 0x3f
 80025d2:	409a      	lsls	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	f010803f 	.word	0xf010803f

080025f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
 8002600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002602:	2300      	movs	r3, #0
 8002604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_DMA_Start_IT+0x26>
 8002616:	2302      	movs	r3, #2
 8002618:	e040      	b.n	800269c <HAL_DMA_Start_IT+0xa8>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b01      	cmp	r3, #1
 800262c:	d12f      	bne.n	800268e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2202      	movs	r2, #2
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f000 f9da 	bl	80029fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264c:	223f      	movs	r2, #63	; 0x3f
 800264e:	409a      	lsls	r2, r3
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0216 	orr.w	r2, r2, #22
 8002662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	2b00      	cmp	r3, #0
 800266a:	d007      	beq.n	800267c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 0208 	orr.w	r2, r2, #8
 800267a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0201 	orr.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e005      	b.n	800269a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002696:	2302      	movs	r3, #2
 8002698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e00c      	b.n	80026dc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2205      	movs	r2, #5
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f022 0201 	bic.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026f4:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_DMA_IRQHandler+0x258>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a92      	ldr	r2, [pc, #584]	; (8002944 <HAL_DMA_IRQHandler+0x25c>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0a9b      	lsrs	r3, r3, #10
 8002700:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002712:	2208      	movs	r2, #8
 8002714:	409a      	lsls	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4013      	ands	r3, r2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d01a      	beq.n	8002754 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d013      	beq.n	8002754 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f022 0204 	bic.w	r2, r2, #4
 800273a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2208      	movs	r2, #8
 8002742:	409a      	lsls	r2, r3
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002758:	2201      	movs	r2, #1
 800275a:	409a      	lsls	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4013      	ands	r3, r2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d012      	beq.n	800278a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2201      	movs	r2, #1
 8002778:	409a      	lsls	r2, r3
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	f043 0202 	orr.w	r2, r3, #2
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278e:	2204      	movs	r2, #4
 8002790:	409a      	lsls	r2, r3
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4013      	ands	r3, r2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d012      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0302 	and.w	r3, r3, #2
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00b      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2204      	movs	r2, #4
 80027ae:	409a      	lsls	r2, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b8:	f043 0204 	orr.w	r2, r3, #4
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c4:	2210      	movs	r2, #16
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d043      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03c      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e2:	2210      	movs	r2, #16
 80027e4:	409a      	lsls	r2, r3
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d018      	beq.n	800282a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d024      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4798      	blx	r3
 8002816:	e01f      	b.n	8002858 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281c:	2b00      	cmp	r3, #0
 800281e:	d01b      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	4798      	blx	r3
 8002828:	e016      	b.n	8002858 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002834:	2b00      	cmp	r3, #0
 8002836:	d107      	bne.n	8002848 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0208 	bic.w	r2, r2, #8
 8002846:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285c:	2220      	movs	r2, #32
 800285e:	409a      	lsls	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	f000 808e 	beq.w	8002986 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8086 	beq.w	8002986 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287e:	2220      	movs	r2, #32
 8002880:	409a      	lsls	r2, r3
 8002882:	693b      	ldr	r3, [r7, #16]
 8002884:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b05      	cmp	r3, #5
 8002890:	d136      	bne.n	8002900 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0216 	bic.w	r2, r2, #22
 80028a0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d103      	bne.n	80028c2 <HAL_DMA_IRQHandler+0x1da>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0208 	bic.w	r2, r2, #8
 80028d0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	223f      	movs	r2, #63	; 0x3f
 80028d8:	409a      	lsls	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d07d      	beq.n	80029f2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	4798      	blx	r3
        }
        return;
 80028fe:	e078      	b.n	80029f2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d01c      	beq.n	8002948 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d108      	bne.n	800292e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	2b00      	cmp	r3, #0
 8002922:	d030      	beq.n	8002986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	4798      	blx	r3
 800292c:	e02b      	b.n	8002986 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002932:	2b00      	cmp	r3, #0
 8002934:	d027      	beq.n	8002986 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	4798      	blx	r3
 800293e:	e022      	b.n	8002986 <HAL_DMA_IRQHandler+0x29e>
 8002940:	20000004 	.word	0x20000004
 8002944:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f022 0210 	bic.w	r2, r2, #16
 8002964:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298a:	2b00      	cmp	r3, #0
 800298c:	d032      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	d022      	beq.n	80029e0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2205      	movs	r2, #5
 800299e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f022 0201 	bic.w	r2, r2, #1
 80029b0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	697a      	ldr	r2, [r7, #20]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d307      	bcc.n	80029ce <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1f2      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x2ca>
 80029cc:	e000      	b.n	80029d0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029ce:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	4798      	blx	r3
 80029f0:	e000      	b.n	80029f4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80029f2:	bf00      	nop
    }
  }
}
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop

080029fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
 8002a08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d108      	bne.n	8002a3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a3a:	e007      	b.n	8002a4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	3b10      	subs	r3, #16
 8002a68:	4a14      	ldr	r2, [pc, #80]	; (8002abc <DMA_CalcBaseAndBitshift+0x64>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	091b      	lsrs	r3, r3, #4
 8002a70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a72:	4a13      	ldr	r2, [pc, #76]	; (8002ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d909      	bls.n	8002a9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	1d1a      	adds	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	659a      	str	r2, [r3, #88]	; 0x58
 8002a98:	e007      	b.n	8002aaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002aa2:	f023 0303 	bic.w	r3, r3, #3
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3714      	adds	r7, #20
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	aaaaaaab 	.word	0xaaaaaaab
 8002ac0:	08005e3c 	.word	0x08005e3c

08002ac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b085      	sub	sp, #20
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11f      	bne.n	8002b1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2b03      	cmp	r3, #3
 8002ae2:	d855      	bhi.n	8002b90 <DMA_CheckFifoParam+0xcc>
 8002ae4:	a201      	add	r2, pc, #4	; (adr r2, 8002aec <DMA_CheckFifoParam+0x28>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b0f 	.word	0x08002b0f
 8002af4:	08002afd 	.word	0x08002afd
 8002af8:	08002b91 	.word	0x08002b91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d045      	beq.n	8002b94 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b0c:	e042      	b.n	8002b94 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b16:	d13f      	bne.n	8002b98 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b1c:	e03c      	b.n	8002b98 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b26:	d121      	bne.n	8002b6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b03      	cmp	r3, #3
 8002b2c:	d836      	bhi.n	8002b9c <DMA_CheckFifoParam+0xd8>
 8002b2e:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <DMA_CheckFifoParam+0x70>)
 8002b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b34:	08002b45 	.word	0x08002b45
 8002b38:	08002b4b 	.word	0x08002b4b
 8002b3c:	08002b45 	.word	0x08002b45
 8002b40:	08002b5d 	.word	0x08002b5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	73fb      	strb	r3, [r7, #15]
      break;
 8002b48:	e02f      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d024      	beq.n	8002ba0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b5a:	e021      	b.n	8002ba0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b64:	d11e      	bne.n	8002ba4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b6a:	e01b      	b.n	8002ba4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d902      	bls.n	8002b78 <DMA_CheckFifoParam+0xb4>
 8002b72:	2b03      	cmp	r3, #3
 8002b74:	d003      	beq.n	8002b7e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b76:	e018      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b7c:	e015      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00e      	beq.n	8002ba8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8e:	e00b      	b.n	8002ba8 <DMA_CheckFifoParam+0xe4>
      break;
 8002b90:	bf00      	nop
 8002b92:	e00a      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;
 8002b94:	bf00      	nop
 8002b96:	e008      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;
 8002b98:	bf00      	nop
 8002b9a:	e006      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;
 8002b9c:	bf00      	nop
 8002b9e:	e004      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;
 8002ba0:	bf00      	nop
 8002ba2:	e002      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;   
 8002ba4:	bf00      	nop
 8002ba6:	e000      	b.n	8002baa <DMA_CheckFifoParam+0xe6>
      break;
 8002ba8:	bf00      	nop
    }
  } 
  
  return status; 
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	e177      	b.n	8002ec4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	4013      	ands	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	f040 8166 	bne.w	8002ebe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d00b      	beq.n	8002c12 <HAL_GPIO_Init+0x5a>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d007      	beq.n	8002c12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c06:	2b11      	cmp	r3, #17
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b12      	cmp	r3, #18
 8002c10:	d130      	bne.n	8002c74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69ba      	ldr	r2, [r7, #24]
 8002c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c48:	2201      	movs	r2, #1
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 0201 	and.w	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	2203      	movs	r2, #3
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0xfc>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b12      	cmp	r3, #18
 8002cb2:	d123      	bne.n	8002cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	08da      	lsrs	r2, r3, #3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3208      	adds	r2, #8
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	f003 0307 	and.w	r3, r3, #7
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	220f      	movs	r2, #15
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	691a      	ldr	r2, [r3, #16]
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	08da      	lsrs	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	3208      	adds	r2, #8
 8002cf6:	69b9      	ldr	r1, [r7, #24]
 8002cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0203 	and.w	r2, r3, #3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80c0 	beq.w	8002ebe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3e:	2300      	movs	r3, #0
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	4b65      	ldr	r3, [pc, #404]	; (8002ed8 <HAL_GPIO_Init+0x320>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a64      	ldr	r2, [pc, #400]	; (8002ed8 <HAL_GPIO_Init+0x320>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b62      	ldr	r3, [pc, #392]	; (8002ed8 <HAL_GPIO_Init+0x320>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d5a:	4a60      	ldr	r2, [pc, #384]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a57      	ldr	r2, [pc, #348]	; (8002ee0 <HAL_GPIO_Init+0x328>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d037      	beq.n	8002df6 <HAL_GPIO_Init+0x23e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a56      	ldr	r2, [pc, #344]	; (8002ee4 <HAL_GPIO_Init+0x32c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d031      	beq.n	8002df2 <HAL_GPIO_Init+0x23a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <HAL_GPIO_Init+0x330>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02b      	beq.n	8002dee <HAL_GPIO_Init+0x236>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d025      	beq.n	8002dea <HAL_GPIO_Init+0x232>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <HAL_GPIO_Init+0x338>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01f      	beq.n	8002de6 <HAL_GPIO_Init+0x22e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a52      	ldr	r2, [pc, #328]	; (8002ef4 <HAL_GPIO_Init+0x33c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <HAL_GPIO_Init+0x22a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a51      	ldr	r2, [pc, #324]	; (8002ef8 <HAL_GPIO_Init+0x340>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0x226>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a50      	ldr	r2, [pc, #320]	; (8002efc <HAL_GPIO_Init+0x344>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_GPIO_Init+0x222>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	; (8002f00 <HAL_GPIO_Init+0x348>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x21e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	; (8002f04 <HAL_GPIO_Init+0x34c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x21a>
 8002dce:	2309      	movs	r3, #9
 8002dd0:	e012      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	e010      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	e00e      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dda:	2307      	movs	r3, #7
 8002ddc:	e00c      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dde:	2306      	movs	r3, #6
 8002de0:	e00a      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002de2:	2305      	movs	r3, #5
 8002de4:	e008      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002de6:	2304      	movs	r3, #4
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dea:	2303      	movs	r3, #3
 8002dec:	e004      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e002      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002df6:	2300      	movs	r3, #0
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f002 0203 	and.w	r2, r2, #3
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	4093      	lsls	r3, r2
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e08:	4934      	ldr	r1, [pc, #208]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e3a:	4a33      	ldr	r2, [pc, #204]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e40:	4b31      	ldr	r3, [pc, #196]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6a:	4b27      	ldr	r3, [pc, #156]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8e:	4a1e      	ldr	r2, [pc, #120]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e94:	4b1c      	ldr	r3, [pc, #112]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb8:	4a13      	ldr	r2, [pc, #76]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b0f      	cmp	r3, #15
 8002ec8:	f67f ae84 	bls.w	8002bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	3724      	adds	r7, #36	; 0x24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40021c00 	.word	0x40021c00
 8002f00:	40022000 	.word	0x40022000
 8002f04:	40022400 	.word	0x40022400
 8002f08:	40013c00 	.word	0x40013c00

08002f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	460b      	mov	r3, r1
 8002f16:	807b      	strh	r3, [r7, #2]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f1c:	787b      	ldrb	r3, [r7, #1]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f28:	e003      	b.n	8002f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f2a:	887b      	ldrh	r3, [r7, #2]
 8002f2c:	041a      	lsls	r2, r3, #16
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	619a      	str	r2, [r3, #24]
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f3e:	b480      	push	{r7}
 8002f40:	b083      	sub	sp, #12
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
 8002f46:	460b      	mov	r3, r1
 8002f48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695a      	ldr	r2, [r3, #20]
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	401a      	ands	r2, r3
 8002f52:	887b      	ldrh	r3, [r7, #2]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d104      	bne.n	8002f62 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f58:	887b      	ldrh	r3, [r7, #2]
 8002f5a:	041a      	lsls	r2, r3, #16
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f60:	e002      	b.n	8002f68 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f62:	887a      	ldrh	r2, [r7, #2]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	619a      	str	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	88fb      	ldrh	r3, [r7, #6]
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f8c:	88fb      	ldrh	r3, [r7, #6]
 8002f8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f90:	88fb      	ldrh	r3, [r7, #6]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f002 faa0 	bl	80054d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f98:	bf00      	nop
 8002f9a:	3708      	adds	r7, #8
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	40013c00 	.word	0x40013c00

08002fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e25b      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d075      	beq.n	80030ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fc2:	4ba3      	ldr	r3, [pc, #652]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d00c      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fd6:	2b08      	cmp	r3, #8
 8002fd8:	d112      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fda:	4b9d      	ldr	r3, [pc, #628]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe6:	d10b      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fe8:	4b99      	ldr	r3, [pc, #612]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d05b      	beq.n	80030ac <HAL_RCC_OscConfig+0x108>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d157      	bne.n	80030ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e236      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d106      	bne.n	8003018 <HAL_RCC_OscConfig+0x74>
 800300a:	4b91      	ldr	r3, [pc, #580]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a90      	ldr	r2, [pc, #576]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	e01d      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003020:	d10c      	bne.n	800303c <HAL_RCC_OscConfig+0x98>
 8003022:	4b8b      	ldr	r3, [pc, #556]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a8a      	ldr	r2, [pc, #552]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	4b88      	ldr	r3, [pc, #544]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a87      	ldr	r2, [pc, #540]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 800303a:	e00b      	b.n	8003054 <HAL_RCC_OscConfig+0xb0>
 800303c:	4b84      	ldr	r3, [pc, #528]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a83      	ldr	r2, [pc, #524]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a80      	ldr	r2, [pc, #512]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 800304e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d013      	beq.n	8003084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7fe faa2 	bl	80015a4 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003064:	f7fe fa9e 	bl	80015a4 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b64      	cmp	r3, #100	; 0x64
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e1fb      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b76      	ldr	r3, [pc, #472]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0xc0>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fa8e 	bl	80015a4 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800308c:	f7fe fa8a 	bl	80015a4 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b64      	cmp	r3, #100	; 0x64
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e1e7      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800309e:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0xe8>
 80030aa:	e000      	b.n	80030ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d063      	beq.n	8003182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	f003 030c 	and.w	r3, r3, #12
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030c6:	4b62      	ldr	r3, [pc, #392]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030ce:	2b08      	cmp	r3, #8
 80030d0:	d11c      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030d2:	4b5f      	ldr	r3, [pc, #380]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d116      	bne.n	800310c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030de:	4b5c      	ldr	r3, [pc, #368]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d001      	beq.n	80030f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e1bb      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030f6:	4b56      	ldr	r3, [pc, #344]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4952      	ldr	r1, [pc, #328]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003106:	4313      	orrs	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310a:	e03a      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d020      	beq.n	8003156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003114:	4b4f      	ldr	r3, [pc, #316]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003116:	2201      	movs	r2, #1
 8003118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311a:	f7fe fa43 	bl	80015a4 <HAL_GetTick>
 800311e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003122:	f7fe fa3f 	bl	80015a4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e19c      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0302 	and.w	r3, r3, #2
 800313c:	2b00      	cmp	r3, #0
 800313e:	d0f0      	beq.n	8003122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003140:	4b43      	ldr	r3, [pc, #268]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4940      	ldr	r1, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	e015      	b.n	8003182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b3f      	ldr	r3, [pc, #252]	; (8003254 <HAL_RCC_OscConfig+0x2b0>)
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315c:	f7fe fa22 	bl	80015a4 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003164:	f7fe fa1e 	bl	80015a4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e17b      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	4b36      	ldr	r3, [pc, #216]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d1f0      	bne.n	8003164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b00      	cmp	r3, #0
 800318c:	d030      	beq.n	80031f0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d016      	beq.n	80031c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003196:	4b30      	ldr	r3, [pc, #192]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 8003198:	2201      	movs	r2, #1
 800319a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800319c:	f7fe fa02 	bl	80015a4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031a4:	f7fe f9fe 	bl	80015a4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e15b      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031b6:	4b26      	ldr	r3, [pc, #152]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d0f0      	beq.n	80031a4 <HAL_RCC_OscConfig+0x200>
 80031c2:	e015      	b.n	80031f0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <HAL_RCC_OscConfig+0x2b4>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ca:	f7fe f9eb 	bl	80015a4 <HAL_GetTick>
 80031ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	e008      	b.n	80031e4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d2:	f7fe f9e7 	bl	80015a4 <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d901      	bls.n	80031e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e144      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031e4:	4b1a      	ldr	r3, [pc, #104]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	f003 0302 	and.w	r3, r3, #2
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d1f0      	bne.n	80031d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0304 	and.w	r3, r3, #4
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 80a0 	beq.w	800333e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031fe:	2300      	movs	r3, #0
 8003200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003202:	4b13      	ldr	r3, [pc, #76]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10f      	bne.n	800322e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_RCC_OscConfig+0x2ac>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	60bb      	str	r3, [r7, #8]
 8003228:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800322a:	2301      	movs	r3, #1
 800322c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800322e:	4b0b      	ldr	r3, [pc, #44]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003236:	2b00      	cmp	r3, #0
 8003238:	d121      	bne.n	800327e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a07      	ldr	r2, [pc, #28]	; (800325c <HAL_RCC_OscConfig+0x2b8>)
 8003240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003244:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003246:	f7fe f9ad 	bl	80015a4 <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	e011      	b.n	8003272 <HAL_RCC_OscConfig+0x2ce>
 800324e:	bf00      	nop
 8003250:	40023800 	.word	0x40023800
 8003254:	42470000 	.word	0x42470000
 8003258:	42470e80 	.word	0x42470e80
 800325c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003260:	f7fe f9a0 	bl	80015a4 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0fd      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	4b81      	ldr	r3, [pc, #516]	; (8003478 <HAL_RCC_OscConfig+0x4d4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0f0      	beq.n	8003260 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d106      	bne.n	8003294 <HAL_RCC_OscConfig+0x2f0>
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a7c      	ldr	r2, [pc, #496]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	6713      	str	r3, [r2, #112]	; 0x70
 8003292:	e01c      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	2b05      	cmp	r3, #5
 800329a:	d10c      	bne.n	80032b6 <HAL_RCC_OscConfig+0x312>
 800329c:	4b77      	ldr	r3, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a0:	4a76      	ldr	r2, [pc, #472]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032a2:	f043 0304 	orr.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	; 0x70
 80032a8:	4b74      	ldr	r3, [pc, #464]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ac:	4a73      	ldr	r2, [pc, #460]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032ae:	f043 0301 	orr.w	r3, r3, #1
 80032b2:	6713      	str	r3, [r2, #112]	; 0x70
 80032b4:	e00b      	b.n	80032ce <HAL_RCC_OscConfig+0x32a>
 80032b6:	4b71      	ldr	r3, [pc, #452]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	4a70      	ldr	r2, [pc, #448]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032bc:	f023 0301 	bic.w	r3, r3, #1
 80032c0:	6713      	str	r3, [r2, #112]	; 0x70
 80032c2:	4b6e      	ldr	r3, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4a6d      	ldr	r2, [pc, #436]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d015      	beq.n	8003302 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d6:	f7fe f965 	bl	80015a4 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	e00a      	b.n	80032f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe f961 	bl	80015a4 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e0bc      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f4:	4b61      	ldr	r3, [pc, #388]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80032f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0ee      	beq.n	80032de <HAL_RCC_OscConfig+0x33a>
 8003300:	e014      	b.n	800332c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003302:	f7fe f94f 	bl	80015a4 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe f94b 	bl	80015a4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0a6      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003320:	4b56      	ldr	r3, [pc, #344]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1ee      	bne.n	800330a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800332c:	7dfb      	ldrb	r3, [r7, #23]
 800332e:	2b01      	cmp	r3, #1
 8003330:	d105      	bne.n	800333e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003332:	4b52      	ldr	r3, [pc, #328]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	4a51      	ldr	r2, [pc, #324]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 8003338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800333c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8092 	beq.w	800346c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003348:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 030c 	and.w	r3, r3, #12
 8003350:	2b08      	cmp	r3, #8
 8003352:	d05c      	beq.n	800340e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d141      	bne.n	80033e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335c:	4b48      	ldr	r3, [pc, #288]	; (8003480 <HAL_RCC_OscConfig+0x4dc>)
 800335e:	2200      	movs	r2, #0
 8003360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003362:	f7fe f91f 	bl	80015a4 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336a:	f7fe f91b 	bl	80015a4 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e078      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337c:	4b3f      	ldr	r3, [pc, #252]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	69da      	ldr	r2, [r3, #28]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	431a      	orrs	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003396:	019b      	lsls	r3, r3, #6
 8003398:	431a      	orrs	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	085b      	lsrs	r3, r3, #1
 80033a0:	3b01      	subs	r3, #1
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	4933      	ldr	r1, [pc, #204]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033b2:	4b33      	ldr	r3, [pc, #204]	; (8003480 <HAL_RCC_OscConfig+0x4dc>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b8:	f7fe f8f4 	bl	80015a4 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033c0:	f7fe f8f0 	bl	80015a4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e04d      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x41c>
 80033de:	e045      	b.n	800346c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033e0:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_RCC_OscConfig+0x4dc>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe f8dd 	bl	80015a4 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ee:	f7fe f8d9 	bl	80015a4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e036      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x44a>
 800340c:	e02e      	b.n	800346c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d101      	bne.n	800341a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e029      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800341a:	4b18      	ldr	r3, [pc, #96]	; (800347c <HAL_RCC_OscConfig+0x4d8>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	429a      	cmp	r2, r3
 800342c:	d11c      	bne.n	8003468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003438:	429a      	cmp	r2, r3
 800343a:	d115      	bne.n	8003468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003442:	4013      	ands	r3, r2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003448:	4293      	cmp	r3, r2
 800344a:	d10d      	bne.n	8003468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d106      	bne.n	8003468 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003464:	429a      	cmp	r2, r3
 8003466:	d001      	beq.n	800346c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40007000 	.word	0x40007000
 800347c:	40023800 	.word	0x40023800
 8003480:	42470060 	.word	0x42470060

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0cc      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b68      	ldr	r3, [pc, #416]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d90c      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b65      	ldr	r3, [pc, #404]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b63      	ldr	r3, [pc, #396]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d8:	4b59      	ldr	r3, [pc, #356]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a58      	ldr	r2, [pc, #352]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f0:	4b53      	ldr	r3, [pc, #332]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a52      	ldr	r2, [pc, #328]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b50      	ldr	r3, [pc, #320]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	494d      	ldr	r1, [pc, #308]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d044      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b47      	ldr	r3, [pc, #284]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d119      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	2b03      	cmp	r3, #3
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b3f      	ldr	r3, [pc, #252]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4b3b      	ldr	r3, [pc, #236]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e067      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b37      	ldr	r3, [pc, #220]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4934      	ldr	r1, [pc, #208]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fe f816 	bl	80015a4 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fe f812 	bl	80015a4 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	; 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e04f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b2b      	ldr	r3, [pc, #172]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20c      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b19      	ldr	r3, [pc, #100]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4916      	ldr	r1, [pc, #88]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f6:	4b12      	ldr	r3, [pc, #72]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800360a:	f000 f821 	bl	8003650 <HAL_RCC_GetSysClockFreq>
 800360e:	4601      	mov	r1, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	5cd3      	ldrb	r3, [r2, r3]
 800361e:	fa21 f303 	lsr.w	r3, r1, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	; (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd ff76 	bl	800151c <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023c00 	.word	0x40023c00
 8003640:	40023800 	.word	0x40023800
 8003644:	08005e24 	.word	0x08005e24
 8003648:	20000004 	.word	0x20000004
 800364c:	20000008 	.word	0x20000008

08003650 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003656:	2300      	movs	r3, #0
 8003658:	607b      	str	r3, [r7, #4]
 800365a:	2300      	movs	r3, #0
 800365c:	60fb      	str	r3, [r7, #12]
 800365e:	2300      	movs	r3, #0
 8003660:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003666:	4b50      	ldr	r3, [pc, #320]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 030c 	and.w	r3, r3, #12
 800366e:	2b04      	cmp	r3, #4
 8003670:	d007      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x32>
 8003672:	2b08      	cmp	r3, #8
 8003674:	d008      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x38>
 8003676:	2b00      	cmp	r3, #0
 8003678:	f040 808d 	bne.w	8003796 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b4b      	ldr	r3, [pc, #300]	; (80037ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800367e:	60bb      	str	r3, [r7, #8]
       break;
 8003680:	e08c      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003682:	4b4b      	ldr	r3, [pc, #300]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003684:	60bb      	str	r3, [r7, #8]
      break;
 8003686:	e089      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003688:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003690:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003692:	4b45      	ldr	r3, [pc, #276]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d023      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b42      	ldr	r3, [pc, #264]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	f04f 0400 	mov.w	r4, #0
 80036a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036ac:	f04f 0200 	mov.w	r2, #0
 80036b0:	ea03 0501 	and.w	r5, r3, r1
 80036b4:	ea04 0602 	and.w	r6, r4, r2
 80036b8:	4a3d      	ldr	r2, [pc, #244]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036ba:	fb02 f106 	mul.w	r1, r2, r6
 80036be:	2200      	movs	r2, #0
 80036c0:	fb02 f205 	mul.w	r2, r2, r5
 80036c4:	440a      	add	r2, r1
 80036c6:	493a      	ldr	r1, [pc, #232]	; (80037b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80036c8:	fba5 0101 	umull	r0, r1, r5, r1
 80036cc:	1853      	adds	r3, r2, r1
 80036ce:	4619      	mov	r1, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f04f 0400 	mov.w	r4, #0
 80036d6:	461a      	mov	r2, r3
 80036d8:	4623      	mov	r3, r4
 80036da:	f7fc fd87 	bl	80001ec <__aeabi_uldivmod>
 80036de:	4603      	mov	r3, r0
 80036e0:	460c      	mov	r4, r1
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e049      	b.n	800377a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e6:	4b30      	ldr	r3, [pc, #192]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	f04f 0400 	mov.w	r4, #0
 80036f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	ea03 0501 	and.w	r5, r3, r1
 80036fc:	ea04 0602 	and.w	r6, r4, r2
 8003700:	4629      	mov	r1, r5
 8003702:	4632      	mov	r2, r6
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	f04f 0400 	mov.w	r4, #0
 800370c:	0154      	lsls	r4, r2, #5
 800370e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003712:	014b      	lsls	r3, r1, #5
 8003714:	4619      	mov	r1, r3
 8003716:	4622      	mov	r2, r4
 8003718:	1b49      	subs	r1, r1, r5
 800371a:	eb62 0206 	sbc.w	r2, r2, r6
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	f04f 0400 	mov.w	r4, #0
 8003726:	0194      	lsls	r4, r2, #6
 8003728:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800372c:	018b      	lsls	r3, r1, #6
 800372e:	1a5b      	subs	r3, r3, r1
 8003730:	eb64 0402 	sbc.w	r4, r4, r2
 8003734:	f04f 0100 	mov.w	r1, #0
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	00e2      	lsls	r2, r4, #3
 800373e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003742:	00d9      	lsls	r1, r3, #3
 8003744:	460b      	mov	r3, r1
 8003746:	4614      	mov	r4, r2
 8003748:	195b      	adds	r3, r3, r5
 800374a:	eb44 0406 	adc.w	r4, r4, r6
 800374e:	f04f 0100 	mov.w	r1, #0
 8003752:	f04f 0200 	mov.w	r2, #0
 8003756:	02a2      	lsls	r2, r4, #10
 8003758:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800375c:	0299      	lsls	r1, r3, #10
 800375e:	460b      	mov	r3, r1
 8003760:	4614      	mov	r4, r2
 8003762:	4618      	mov	r0, r3
 8003764:	4621      	mov	r1, r4
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f04f 0400 	mov.w	r4, #0
 800376c:	461a      	mov	r2, r3
 800376e:	4623      	mov	r3, r4
 8003770:	f7fc fd3c 	bl	80001ec <__aeabi_uldivmod>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	f003 0303 	and.w	r3, r3, #3
 8003784:	3301      	adds	r3, #1
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003792:	60bb      	str	r3, [r7, #8]
      break;
 8003794:	e002      	b.n	800379c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8003798:	60bb      	str	r3, [r7, #8]
      break;
 800379a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800379c:	68bb      	ldr	r3, [r7, #8]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40023800 	.word	0x40023800
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	00b71b00 	.word	0x00b71b00

080037b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b8:	4b03      	ldr	r3, [pc, #12]	; (80037c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80037ba:	681b      	ldr	r3, [r3, #0]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000004 	.word	0x20000004

080037cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80037d0:	f7ff fff0 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037d4:	4601      	mov	r1, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	0a9b      	lsrs	r3, r3, #10
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4a03      	ldr	r2, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e2:	5cd3      	ldrb	r3, [r2, r3]
 80037e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	08005e34 	.word	0x08005e34

080037f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037f8:	f7ff ffdc 	bl	80037b4 <HAL_RCC_GetHCLKFreq>
 80037fc:	4601      	mov	r1, r0
 80037fe:	4b05      	ldr	r3, [pc, #20]	; (8003814 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	0b5b      	lsrs	r3, r3, #13
 8003804:	f003 0307 	and.w	r3, r3, #7
 8003808:	4a03      	ldr	r2, [pc, #12]	; (8003818 <HAL_RCC_GetPCLK2Freq+0x24>)
 800380a:	5cd3      	ldrb	r3, [r2, r3]
 800380c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40023800 	.word	0x40023800
 8003818:	08005e34 	.word	0x08005e34

0800381c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e01d      	b.n	800386a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fb4e 	bl	8000ee4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3304      	adds	r3, #4
 8003858:	4619      	mov	r1, r3
 800385a:	4610      	mov	r0, r2
 800385c:	f000 fc54 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e01d      	b.n	80038c0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d106      	bne.n	800389e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f815 	bl	80038c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f000 fc29 	bl	8004108 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2201      	movs	r2, #1
 80038ec:	6839      	ldr	r1, [r7, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f000 fef4 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a15      	ldr	r2, [pc, #84]	; (8003950 <HAL_TIM_PWM_Start+0x74>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d004      	beq.n	8003908 <HAL_TIM_PWM_Start+0x2c>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <HAL_TIM_PWM_Start+0x78>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d101      	bne.n	800390c <HAL_TIM_PWM_Start+0x30>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_TIM_PWM_Start+0x32>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d007      	beq.n	8003922 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0307 	and.w	r3, r3, #7
 800392c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2b06      	cmp	r3, #6
 8003932:	d007      	beq.n	8003944 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003944:	2300      	movs	r3, #0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	40010000 	.word	0x40010000
 8003954:	40010400 	.word	0x40010400

08003958 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b02      	cmp	r3, #2
 8003970:	d101      	bne.n	8003976 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003972:	2302      	movs	r3, #2
 8003974:	e0f3      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b01      	cmp	r3, #1
 8003980:	d10b      	bne.n	800399a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d104      	bne.n	8003992 <HAL_TIM_PWM_Start_DMA+0x3a>
 8003988:	887b      	ldrh	r3, [r7, #2]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e0e5      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2202      	movs	r2, #2
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b0c      	cmp	r3, #12
 800399e:	f200 80ad 	bhi.w	8003afc <HAL_TIM_PWM_Start_DMA+0x1a4>
 80039a2:	a201      	add	r2, pc, #4	; (adr r2, 80039a8 <HAL_TIM_PWM_Start_DMA+0x50>)
 80039a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a8:	080039dd 	.word	0x080039dd
 80039ac:	08003afd 	.word	0x08003afd
 80039b0:	08003afd 	.word	0x08003afd
 80039b4:	08003afd 	.word	0x08003afd
 80039b8:	08003a25 	.word	0x08003a25
 80039bc:	08003afd 	.word	0x08003afd
 80039c0:	08003afd 	.word	0x08003afd
 80039c4:	08003afd 	.word	0x08003afd
 80039c8:	08003a6d 	.word	0x08003a6d
 80039cc:	08003afd 	.word	0x08003afd
 80039d0:	08003afd 	.word	0x08003afd
 80039d4:	08003afd 	.word	0x08003afd
 80039d8:	08003ab5 	.word	0x08003ab5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e0:	4a61      	ldr	r2, [pc, #388]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x210>)
 80039e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	4a60      	ldr	r2, [pc, #384]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x214>)
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	4a5f      	ldr	r2, [pc, #380]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x218>)
 80039f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3334      	adds	r3, #52	; 0x34
 8003a00:	461a      	mov	r2, r3
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	f7fe fdf6 	bl	80025f4 <HAL_DMA_Start_IT>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e0a5      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68da      	ldr	r2, [r3, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a20:	60da      	str	r2, [r3, #12]
      break;
 8003a22:	e06c      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	4a4f      	ldr	r2, [pc, #316]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003a2a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a30:	4a4e      	ldr	r2, [pc, #312]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a38:	4a4d      	ldr	r2, [pc, #308]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003a3a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3338      	adds	r3, #56	; 0x38
 8003a48:	461a      	mov	r2, r3
 8003a4a:	887b      	ldrh	r3, [r7, #2]
 8003a4c:	f7fe fdd2 	bl	80025f4 <HAL_DMA_Start_IT>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d001      	beq.n	8003a5a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e081      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a68:	60da      	str	r2, [r3, #12]
      break;
 8003a6a:	e048      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	4a3d      	ldr	r2, [pc, #244]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003a72:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a78:	4a3c      	ldr	r2, [pc, #240]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	4a3b      	ldr	r2, [pc, #236]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003a82:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	333c      	adds	r3, #60	; 0x3c
 8003a90:	461a      	mov	r2, r3
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	f7fe fdae 	bl	80025f4 <HAL_DMA_Start_IT>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e05d      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	68da      	ldr	r2, [r3, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab0:	60da      	str	r2, [r3, #12]
      break;
 8003ab2:	e024      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab8:	4a2b      	ldr	r2, [pc, #172]	; (8003b68 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003aba:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac0:	4a2a      	ldr	r2, [pc, #168]	; (8003b6c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003ac2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	4a29      	ldr	r2, [pc, #164]	; (8003b70 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003aca:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	3340      	adds	r3, #64	; 0x40
 8003ad8:	461a      	mov	r2, r3
 8003ada:	887b      	ldrh	r3, [r7, #2]
 8003adc:	f7fe fd8a 	bl	80025f4 <HAL_DMA_Start_IT>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e039      	b.n	8003b5e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68da      	ldr	r2, [r3, #12]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003af8:	60da      	str	r2, [r3, #12]
      break;
 8003afa:	e000      	b.n	8003afe <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8003afc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2201      	movs	r2, #1
 8003b04:	68b9      	ldr	r1, [r7, #8]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 fde8 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a18      	ldr	r2, [pc, #96]	; (8003b74 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIM_PWM_Start_DMA+0x1c8>
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a17      	ldr	r2, [pc, #92]	; (8003b78 <HAL_TIM_PWM_Start_DMA+0x220>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b38:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d007      	beq.n	8003b5c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	08004027 	.word	0x08004027
 8003b6c:	08004097 	.word	0x08004097
 8003b70:	08004003 	.word	0x08004003
 8003b74:	40010000 	.word	0x40010000
 8003b78:	40010400 	.word	0x40010400

08003b7c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	d855      	bhi.n	8003c38 <HAL_TIM_PWM_Stop_DMA+0xbc>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <HAL_TIM_PWM_Stop_DMA+0x18>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bc9 	.word	0x08003bc9
 8003b98:	08003c39 	.word	0x08003c39
 8003b9c:	08003c39 	.word	0x08003c39
 8003ba0:	08003c39 	.word	0x08003c39
 8003ba4:	08003be5 	.word	0x08003be5
 8003ba8:	08003c39 	.word	0x08003c39
 8003bac:	08003c39 	.word	0x08003c39
 8003bb0:	08003c39 	.word	0x08003c39
 8003bb4:	08003c01 	.word	0x08003c01
 8003bb8:	08003c39 	.word	0x08003c39
 8003bbc:	08003c39 	.word	0x08003c39
 8003bc0:	08003c39 	.word	0x08003c39
 8003bc4:	08003c1d 	.word	0x08003c1d
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003bd6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fd61 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8003be2:	e02a      	b.n	8003c3a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fe fd53 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8003bfe:	e01c      	b.n	8003c3a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c0e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fd45 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8003c1a:	e00e      	b.n	8003c3a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68da      	ldr	r2, [r3, #12]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c2a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fd37 	bl	80026a4 <HAL_DMA_Abort_IT>
      break;
 8003c36:	e000      	b.n	8003c3a <HAL_TIM_PWM_Stop_DMA+0xbe>
    }

    default:
      break;
 8003c38:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	6839      	ldr	r1, [r7, #0]
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fd4a 	bl	80046dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a22      	ldr	r2, [pc, #136]	; (8003cd8 <HAL_TIM_PWM_Stop_DMA+0x15c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d004      	beq.n	8003c5c <HAL_TIM_PWM_Stop_DMA+0xe0>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a21      	ldr	r2, [pc, #132]	; (8003cdc <HAL_TIM_PWM_Stop_DMA+0x160>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_PWM_Stop_DMA+0xe4>
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e000      	b.n	8003c62 <HAL_TIM_PWM_Stop_DMA+0xe6>
 8003c60:	2300      	movs	r3, #0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_TIM_PWM_Stop_DMA+0x11a>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6a1a      	ldr	r2, [r3, #32]
 8003c6c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	f240 4344 	movw	r3, #1092	; 0x444
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <HAL_TIM_PWM_Stop_DMA+0x11a>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6a1a      	ldr	r2, [r3, #32]
 8003c9c:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10f      	bne.n	8003cc6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	f240 4344 	movw	r3, #1092	; 0x444
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d107      	bne.n	8003cc6 <HAL_TIM_PWM_Stop_DMA+0x14a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e0b4      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2202      	movs	r2, #2
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b0c      	cmp	r3, #12
 8003d0e:	f200 809f 	bhi.w	8003e50 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003d12:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d18:	08003d4d 	.word	0x08003d4d
 8003d1c:	08003e51 	.word	0x08003e51
 8003d20:	08003e51 	.word	0x08003e51
 8003d24:	08003e51 	.word	0x08003e51
 8003d28:	08003d8d 	.word	0x08003d8d
 8003d2c:	08003e51 	.word	0x08003e51
 8003d30:	08003e51 	.word	0x08003e51
 8003d34:	08003e51 	.word	0x08003e51
 8003d38:	08003dcf 	.word	0x08003dcf
 8003d3c:	08003e51 	.word	0x08003e51
 8003d40:	08003e51 	.word	0x08003e51
 8003d44:	08003e51 	.word	0x08003e51
 8003d48:	08003e0f 	.word	0x08003e0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68b9      	ldr	r1, [r7, #8]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa78 	bl	8004248 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	699a      	ldr	r2, [r3, #24]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0208 	orr.w	r2, r2, #8
 8003d66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0204 	bic.w	r2, r2, #4
 8003d76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6999      	ldr	r1, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	619a      	str	r2, [r3, #24]
      break;
 8003d8a:	e062      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68b9      	ldr	r1, [r7, #8]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fac8 	bl	8004328 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699a      	ldr	r2, [r3, #24]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	699a      	ldr	r2, [r3, #24]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6999      	ldr	r1, [r3, #24]
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	619a      	str	r2, [r3, #24]
      break;
 8003dcc:	e041      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68b9      	ldr	r1, [r7, #8]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f000 fb1d 	bl	8004414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	69da      	ldr	r2, [r3, #28]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f042 0208 	orr.w	r2, r2, #8
 8003de8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	69da      	ldr	r2, [r3, #28]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0204 	bic.w	r2, r2, #4
 8003df8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69d9      	ldr	r1, [r3, #28]
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	691a      	ldr	r2, [r3, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	61da      	str	r2, [r3, #28]
      break;
 8003e0c:	e021      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68b9      	ldr	r1, [r7, #8]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fb71 	bl	80044fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69da      	ldr	r2, [r3, #28]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69da      	ldr	r2, [r3, #28]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69d9      	ldr	r1, [r3, #28]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	021a      	lsls	r2, r3, #8
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	61da      	str	r2, [r3, #28]
      break;
 8003e4e:	e000      	b.n	8003e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003e50:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_TIM_ConfigClockSource+0x18>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0a6      	b.n	8003fd2 <HAL_TIM_ConfigClockSource+0x166>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2202      	movs	r2, #2
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68fa      	ldr	r2, [r7, #12]
 8003eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b40      	cmp	r3, #64	; 0x40
 8003eba:	d067      	beq.n	8003f8c <HAL_TIM_ConfigClockSource+0x120>
 8003ebc:	2b40      	cmp	r3, #64	; 0x40
 8003ebe:	d80b      	bhi.n	8003ed8 <HAL_TIM_ConfigClockSource+0x6c>
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d073      	beq.n	8003fac <HAL_TIM_ConfigClockSource+0x140>
 8003ec4:	2b10      	cmp	r3, #16
 8003ec6:	d802      	bhi.n	8003ece <HAL_TIM_ConfigClockSource+0x62>
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d06f      	beq.n	8003fac <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003ecc:	e078      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	d06c      	beq.n	8003fac <HAL_TIM_ConfigClockSource+0x140>
 8003ed2:	2b30      	cmp	r3, #48	; 0x30
 8003ed4:	d06a      	beq.n	8003fac <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003ed6:	e073      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ed8:	2b70      	cmp	r3, #112	; 0x70
 8003eda:	d00d      	beq.n	8003ef8 <HAL_TIM_ConfigClockSource+0x8c>
 8003edc:	2b70      	cmp	r3, #112	; 0x70
 8003ede:	d804      	bhi.n	8003eea <HAL_TIM_ConfigClockSource+0x7e>
 8003ee0:	2b50      	cmp	r3, #80	; 0x50
 8003ee2:	d033      	beq.n	8003f4c <HAL_TIM_ConfigClockSource+0xe0>
 8003ee4:	2b60      	cmp	r3, #96	; 0x60
 8003ee6:	d041      	beq.n	8003f6c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003ee8:	e06a      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003eea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eee:	d066      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x152>
 8003ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef4:	d017      	beq.n	8003f26 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003ef6:	e063      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6899      	ldr	r1, [r3, #8]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f000 fbc8 	bl	800469c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	609a      	str	r2, [r3, #8]
      break;
 8003f24:	e04c      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6818      	ldr	r0, [r3, #0]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6899      	ldr	r1, [r3, #8]
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	f000 fbb1 	bl	800469c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f48:	609a      	str	r2, [r3, #8]
      break;
 8003f4a:	e039      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	6859      	ldr	r1, [r3, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	f000 fb25 	bl	80045a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2150      	movs	r1, #80	; 0x50
 8003f64:	4618      	mov	r0, r3
 8003f66:	f000 fb7e 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003f6a:	e029      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6818      	ldr	r0, [r3, #0]
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f000 fb44 	bl	8004606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2160      	movs	r1, #96	; 0x60
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fb6e 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003f8a:	e019      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f000 fb05 	bl	80045a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2140      	movs	r1, #64	; 0x40
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fb5e 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003faa:	e009      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	4610      	mov	r0, r2
 8003fb8:	f000 fb55 	bl	8004666 <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e000      	b.n	8003fc0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003fbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3710      	adds	r7, #16
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003fda:	b480      	push	{r7}
 8003fdc:	b083      	sub	sp, #12
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ff6:	bf00      	nop
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400e:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f7ff ffe8 	bl	8003fee <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004032:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d103      	bne.n	800404e <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	771a      	strb	r2, [r3, #28]
 800404c:	e019      	b.n	8004082 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d103      	bne.n	8004060 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2202      	movs	r2, #2
 800405c:	771a      	strb	r2, [r3, #28]
 800405e:	e010      	b.n	8004082 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	429a      	cmp	r2, r3
 8004068:	d103      	bne.n	8004072 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2204      	movs	r2, #4
 800406e:	771a      	strb	r2, [r3, #28]
 8004070:	e007      	b.n	8004082 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	429a      	cmp	r2, r3
 800407a:	d102      	bne.n	8004082 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2208      	movs	r2, #8
 8004080:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f001 fa82 	bl	800558c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	771a      	strb	r2, [r3, #28]
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d103      	bne.n	80040be <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2201      	movs	r2, #1
 80040ba:	771a      	strb	r2, [r3, #28]
 80040bc:	e019      	b.n	80040f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d103      	bne.n	80040d0 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2202      	movs	r2, #2
 80040cc:	771a      	strb	r2, [r3, #28]
 80040ce:	e010      	b.n	80040f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d103      	bne.n	80040e2 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2204      	movs	r2, #4
 80040de:	771a      	strb	r2, [r3, #28]
 80040e0:	e007      	b.n	80040f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d102      	bne.n	80040f2 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2208      	movs	r2, #8
 80040f0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f7ff ff71 	bl	8003fda <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	771a      	strb	r2, [r3, #28]
}
 80040fe:	bf00      	nop
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a40      	ldr	r2, [pc, #256]	; (800421c <TIM_Base_SetConfig+0x114>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004126:	d00f      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a3d      	ldr	r2, [pc, #244]	; (8004220 <TIM_Base_SetConfig+0x118>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a3c      	ldr	r2, [pc, #240]	; (8004224 <TIM_Base_SetConfig+0x11c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a3b      	ldr	r2, [pc, #236]	; (8004228 <TIM_Base_SetConfig+0x120>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_Base_SetConfig+0x40>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a3a      	ldr	r2, [pc, #232]	; (800422c <TIM_Base_SetConfig+0x124>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d108      	bne.n	800415a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800414e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4313      	orrs	r3, r2
 8004158:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a2f      	ldr	r2, [pc, #188]	; (800421c <TIM_Base_SetConfig+0x114>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d02b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004168:	d027      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a2c      	ldr	r2, [pc, #176]	; (8004220 <TIM_Base_SetConfig+0x118>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d023      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a2b      	ldr	r2, [pc, #172]	; (8004224 <TIM_Base_SetConfig+0x11c>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01f      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a2a      	ldr	r2, [pc, #168]	; (8004228 <TIM_Base_SetConfig+0x120>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a29      	ldr	r2, [pc, #164]	; (800422c <TIM_Base_SetConfig+0x124>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d017      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a28      	ldr	r2, [pc, #160]	; (8004230 <TIM_Base_SetConfig+0x128>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d013      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a27      	ldr	r2, [pc, #156]	; (8004234 <TIM_Base_SetConfig+0x12c>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d00f      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a26      	ldr	r2, [pc, #152]	; (8004238 <TIM_Base_SetConfig+0x130>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a25      	ldr	r2, [pc, #148]	; (800423c <TIM_Base_SetConfig+0x134>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a24      	ldr	r2, [pc, #144]	; (8004240 <TIM_Base_SetConfig+0x138>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_Base_SetConfig+0xb2>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a23      	ldr	r2, [pc, #140]	; (8004244 <TIM_Base_SetConfig+0x13c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d108      	bne.n	80041cc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a0a      	ldr	r2, [pc, #40]	; (800421c <TIM_Base_SetConfig+0x114>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d003      	beq.n	8004200 <TIM_Base_SetConfig+0xf8>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <TIM_Base_SetConfig+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d103      	bne.n	8004208 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	615a      	str	r2, [r3, #20]
}
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40010400 	.word	0x40010400
 8004230:	40014000 	.word	0x40014000
 8004234:	40014400 	.word	0x40014400
 8004238:	40014800 	.word	0x40014800
 800423c:	40001800 	.word	0x40001800
 8004240:	40001c00 	.word	0x40001c00
 8004244:	40002000 	.word	0x40002000

08004248 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f023 0201 	bic.w	r2, r3, #1
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0302 	bic.w	r3, r3, #2
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4313      	orrs	r3, r2
 800429a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a20      	ldr	r2, [pc, #128]	; (8004320 <TIM_OC1_SetConfig+0xd8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d003      	beq.n	80042ac <TIM_OC1_SetConfig+0x64>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a1f      	ldr	r2, [pc, #124]	; (8004324 <TIM_OC1_SetConfig+0xdc>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10c      	bne.n	80042c6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f023 0308 	bic.w	r3, r3, #8
 80042b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f023 0304 	bic.w	r3, r3, #4
 80042c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <TIM_OC1_SetConfig+0xd8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d003      	beq.n	80042d6 <TIM_OC1_SetConfig+0x8e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a14      	ldr	r2, [pc, #80]	; (8004324 <TIM_OC1_SetConfig+0xdc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d111      	bne.n	80042fa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	621a      	str	r2, [r3, #32]
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	40010000 	.word	0x40010000
 8004324:	40010400 	.word	0x40010400

08004328 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f023 0210 	bic.w	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800435e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	4313      	orrs	r3, r2
 800436a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f023 0320 	bic.w	r3, r3, #32
 8004372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	011b      	lsls	r3, r3, #4
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a22      	ldr	r2, [pc, #136]	; (800440c <TIM_OC2_SetConfig+0xe4>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d003      	beq.n	8004390 <TIM_OC2_SetConfig+0x68>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a21      	ldr	r2, [pc, #132]	; (8004410 <TIM_OC2_SetConfig+0xe8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10d      	bne.n	80043ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a17      	ldr	r2, [pc, #92]	; (800440c <TIM_OC2_SetConfig+0xe4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_OC2_SetConfig+0x94>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a16      	ldr	r2, [pc, #88]	; (8004410 <TIM_OC2_SetConfig+0xe8>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d113      	bne.n	80043e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	693a      	ldr	r2, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68fa      	ldr	r2, [r7, #12]
 80043ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	40010000 	.word	0x40010000
 8004410:	40010400 	.word	0x40010400

08004414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004414:	b480      	push	{r7}
 8004416:	b087      	sub	sp, #28
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0303 	bic.w	r3, r3, #3
 800444a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	4313      	orrs	r3, r2
 8004454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800445c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	021b      	lsls	r3, r3, #8
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a21      	ldr	r2, [pc, #132]	; (80044f4 <TIM_OC3_SetConfig+0xe0>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d003      	beq.n	800447a <TIM_OC3_SetConfig+0x66>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a20      	ldr	r2, [pc, #128]	; (80044f8 <TIM_OC3_SetConfig+0xe4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d10d      	bne.n	8004496 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a16      	ldr	r2, [pc, #88]	; (80044f4 <TIM_OC3_SetConfig+0xe0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d003      	beq.n	80044a6 <TIM_OC3_SetConfig+0x92>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a15      	ldr	r2, [pc, #84]	; (80044f8 <TIM_OC3_SetConfig+0xe4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d113      	bne.n	80044ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	4313      	orrs	r3, r2
 80044c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	621a      	str	r2, [r3, #32]
}
 80044e8:	bf00      	nop
 80044ea:	371c      	adds	r7, #28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40010400 	.word	0x40010400

080044fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b087      	sub	sp, #28
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800452a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004532:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	021b      	lsls	r3, r3, #8
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004546:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	031b      	lsls	r3, r3, #12
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	4313      	orrs	r3, r2
 8004552:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a12      	ldr	r2, [pc, #72]	; (80045a0 <TIM_OC4_SetConfig+0xa4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d003      	beq.n	8004564 <TIM_OC4_SetConfig+0x68>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a11      	ldr	r2, [pc, #68]	; (80045a4 <TIM_OC4_SetConfig+0xa8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d109      	bne.n	8004578 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800456a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	4313      	orrs	r3, r2
 8004576:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	621a      	str	r2, [r3, #32]
}
 8004592:	bf00      	nop
 8004594:	371c      	adds	r7, #28
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40010400 	.word	0x40010400

080045a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0201 	bic.w	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 030a 	bic.w	r3, r3, #10
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	bf00      	nop
 80045fc:	371c      	adds	r7, #28
 80045fe:	46bd      	mov	sp, r7
 8004600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004604:	4770      	bx	lr

08004606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004606:	b480      	push	{r7}
 8004608:	b087      	sub	sp, #28
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	031b      	lsls	r3, r3, #12
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	4313      	orrs	r3, r2
 800463a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	693a      	ldr	r2, [r7, #16]
 8004658:	621a      	str	r2, [r3, #32]
}
 800465a:	bf00      	nop
 800465c:	371c      	adds	r7, #28
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	4313      	orrs	r3, r2
 8004684:	f043 0307 	orr.w	r3, r3, #7
 8004688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	609a      	str	r2, [r3, #8]
}
 8004690:	bf00      	nop
 8004692:	3714      	adds	r7, #20
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr

0800469c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800469c:	b480      	push	{r7}
 800469e:	b087      	sub	sp, #28
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	021a      	lsls	r2, r3, #8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	431a      	orrs	r2, r3
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	609a      	str	r2, [r3, #8]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 031f 	and.w	r3, r3, #31
 80046ee:	2201      	movs	r2, #1
 80046f0:	fa02 f303 	lsl.w	r3, r2, r3
 80046f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	43db      	mvns	r3, r3
 80046fe:	401a      	ands	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a1a      	ldr	r2, [r3, #32]
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	6879      	ldr	r1, [r7, #4]
 8004710:	fa01 f303 	lsl.w	r3, r1, r3
 8004714:	431a      	orrs	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	621a      	str	r2, [r3, #32]
}
 800471a:	bf00      	nop
 800471c:	371c      	adds	r7, #28
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004738:	2b01      	cmp	r3, #1
 800473a:	d101      	bne.n	8004740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800473c:	2302      	movs	r3, #2
 800473e:	e05a      	b.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2202      	movs	r2, #2
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a21      	ldr	r2, [pc, #132]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d022      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800478c:	d01d      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1d      	ldr	r2, [pc, #116]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a1b      	ldr	r2, [pc, #108]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a1a      	ldr	r2, [pc, #104]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d00e      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a17      	ldr	r2, [pc, #92]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a15      	ldr	r2, [pc, #84]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10c      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr
 8004802:	bf00      	nop
 8004804:	40010000 	.word	0x40010000
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40001800 	.word	0x40001800

08004820 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004838:	2302      	movs	r3, #2
 800483a:	e03d      	b.n	80048b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	4313      	orrs	r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	69db      	ldr	r3, [r3, #28]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr

080048c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e03f      	b.n	8004956 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fc fd12 	bl	8001314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2224      	movs	r2, #36	; 0x24
 80048f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004906:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fa69 	bl	8004de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691a      	ldr	r2, [r3, #16]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800491c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695a      	ldr	r2, [r3, #20]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800492c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68da      	ldr	r2, [r3, #12]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800493c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3708      	adds	r7, #8
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
	...

08004960 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b088      	sub	sp, #32
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	f003 030f 	and.w	r3, r3, #15
 800498e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d10d      	bne.n	80049b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d008      	beq.n	80049b2 <HAL_UART_IRQHandler+0x52>
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f996 	bl	8004cdc <UART_Receive_IT>
      return;
 80049b0:	e0d1      	b.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f000 80b0 	beq.w	8004b1a <HAL_UART_IRQHandler+0x1ba>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d105      	bne.n	80049d0 <HAL_UART_IRQHandler+0x70>
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 80a5 	beq.w	8004b1a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	f003 0301 	and.w	r3, r3, #1
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_UART_IRQHandler+0x90>
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e8:	f043 0201 	orr.w	r2, r3, #1
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <HAL_UART_IRQHandler+0xb0>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d005      	beq.n	8004a10 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	f043 0202 	orr.w	r2, r3, #2
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_UART_IRQHandler+0xd0>
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a28:	f043 0204 	orr.w	r2, r3, #4
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00f      	beq.n	8004a5a <HAL_UART_IRQHandler+0xfa>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0320 	and.w	r3, r3, #32
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_UART_IRQHandler+0xee>
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	f043 0208 	orr.w	r2, r3, #8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d078      	beq.n	8004b54 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d007      	beq.n	8004a7c <HAL_UART_IRQHandler+0x11c>
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	f003 0320 	and.w	r3, r3, #32
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d002      	beq.n	8004a7c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f930 	bl	8004cdc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b40      	cmp	r3, #64	; 0x40
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	f003 0308 	and.w	r3, r3, #8
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <HAL_UART_IRQHandler+0x144>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d031      	beq.n	8004b08 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f879 	bl	8004b9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d123      	bne.n	8004b00 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d013      	beq.n	8004af8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad4:	4a21      	ldr	r2, [pc, #132]	; (8004b5c <HAL_UART_IRQHandler+0x1fc>)
 8004ad6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7fd fde1 	bl	80026a4 <HAL_DMA_Abort_IT>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d016      	beq.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004af2:	4610      	mov	r0, r2
 8004af4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af6:	e00e      	b.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 f845 	bl	8004b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004afe:	e00a      	b.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f841 	bl	8004b88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b06:	e006      	b.n	8004b16 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 f83d 	bl	8004b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004b14:	e01e      	b.n	8004b54 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b16:	bf00      	nop
    return;
 8004b18:	e01c      	b.n	8004b54 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d008      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1d6>
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f866 	bl	8004c00 <UART_Transmit_IT>
    return;
 8004b34:	e00f      	b.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d005      	beq.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f8ae 	bl	8004cac <UART_EndTransmit_IT>
    return;
 8004b50:	bf00      	nop
 8004b52:	e000      	b.n	8004b56 <HAL_UART_IRQHandler+0x1f6>
    return;
 8004b54:	bf00      	nop
  }
}
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	08004bd9 	.word	0x08004bd9

08004b60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b90:	bf00      	nop
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b083      	sub	sp, #12
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004bb2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f7ff ffc8 	bl	8004b88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bf8:	bf00      	nop
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c0e:	b2db      	uxtb	r3, r3
 8004c10:	2b21      	cmp	r3, #33	; 0x21
 8004c12:	d144      	bne.n	8004c9e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c1c:	d11a      	bne.n	8004c54 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	881b      	ldrh	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c32:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d105      	bne.n	8004c48 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	621a      	str	r2, [r3, #32]
 8004c46:	e00e      	b.n	8004c66 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a1b      	ldr	r3, [r3, #32]
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	621a      	str	r2, [r3, #32]
 8004c52:	e008      	b.n	8004c66 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	1c59      	adds	r1, r3, #1
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6211      	str	r1, [r2, #32]
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	4619      	mov	r1, r3
 8004c74:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68da      	ldr	r2, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff47 	bl	8004b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3708      	adds	r7, #8
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b22      	cmp	r3, #34	; 0x22
 8004cee:	d171      	bne.n	8004dd4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cf8:	d123      	bne.n	8004d42 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d10e      	bne.n	8004d26 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	629a      	str	r2, [r3, #40]	; 0x28
 8004d24:	e029      	b.n	8004d7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3a:	1c5a      	adds	r2, r3, #1
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d40:	e01b      	b.n	8004d7a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	6858      	ldr	r0, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d54:	1c59      	adds	r1, r3, #1
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6291      	str	r1, [r2, #40]	; 0x28
 8004d5a:	b2c2      	uxtb	r2, r0
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e00c      	b.n	8004d7a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6c:	1c58      	adds	r0, r3, #1
 8004d6e:	6879      	ldr	r1, [r7, #4]
 8004d70:	6288      	str	r0, [r1, #40]	; 0x28
 8004d72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	687a      	ldr	r2, [r7, #4]
 8004d86:	4619      	mov	r1, r3
 8004d88:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d120      	bne.n	8004dd0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0220 	bic.w	r2, r2, #32
 8004d9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68da      	ldr	r2, [r3, #12]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695a      	ldr	r2, [r3, #20]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0201 	bic.w	r2, r2, #1
 8004dbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff fed4 	bl	8004b74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	e002      	b.n	8004dd6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	e000      	b.n	8004dd6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004dd4:	2302      	movs	r3, #2
  }
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
	...

08004de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004de4:	b085      	sub	sp, #20
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	430a      	orrs	r2, r1
 8004dfe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689a      	ldr	r2, [r3, #8]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	69db      	ldr	r3, [r3, #28]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004e22:	f023 030c 	bic.w	r3, r3, #12
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	699a      	ldr	r2, [r3, #24]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69db      	ldr	r3, [r3, #28]
 8004e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e4e:	f040 818b 	bne.w	8005168 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4ac1      	ldr	r2, [pc, #772]	; (800515c <UART_SetConfig+0x37c>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d005      	beq.n	8004e68 <UART_SetConfig+0x88>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4abf      	ldr	r2, [pc, #764]	; (8005160 <UART_SetConfig+0x380>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	f040 80bd 	bne.w	8004fe2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e68:	f7fe fcc4 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 8004e6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	461d      	mov	r5, r3
 8004e72:	f04f 0600 	mov.w	r6, #0
 8004e76:	46a8      	mov	r8, r5
 8004e78:	46b1      	mov	r9, r6
 8004e7a:	eb18 0308 	adds.w	r3, r8, r8
 8004e7e:	eb49 0409 	adc.w	r4, r9, r9
 8004e82:	4698      	mov	r8, r3
 8004e84:	46a1      	mov	r9, r4
 8004e86:	eb18 0805 	adds.w	r8, r8, r5
 8004e8a:	eb49 0906 	adc.w	r9, r9, r6
 8004e8e:	f04f 0100 	mov.w	r1, #0
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ea2:	4688      	mov	r8, r1
 8004ea4:	4691      	mov	r9, r2
 8004ea6:	eb18 0005 	adds.w	r0, r8, r5
 8004eaa:	eb49 0106 	adc.w	r1, r9, r6
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	461d      	mov	r5, r3
 8004eb4:	f04f 0600 	mov.w	r6, #0
 8004eb8:	196b      	adds	r3, r5, r5
 8004eba:	eb46 0406 	adc.w	r4, r6, r6
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	4623      	mov	r3, r4
 8004ec2:	f7fb f993 	bl	80001ec <__aeabi_uldivmod>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	460c      	mov	r4, r1
 8004eca:	461a      	mov	r2, r3
 8004ecc:	4ba5      	ldr	r3, [pc, #660]	; (8005164 <UART_SetConfig+0x384>)
 8004ece:	fba3 2302 	umull	r2, r3, r3, r2
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	461d      	mov	r5, r3
 8004edc:	f04f 0600 	mov.w	r6, #0
 8004ee0:	46a9      	mov	r9, r5
 8004ee2:	46b2      	mov	sl, r6
 8004ee4:	eb19 0309 	adds.w	r3, r9, r9
 8004ee8:	eb4a 040a 	adc.w	r4, sl, sl
 8004eec:	4699      	mov	r9, r3
 8004eee:	46a2      	mov	sl, r4
 8004ef0:	eb19 0905 	adds.w	r9, r9, r5
 8004ef4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004ef8:	f04f 0100 	mov.w	r1, #0
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f0c:	4689      	mov	r9, r1
 8004f0e:	4692      	mov	sl, r2
 8004f10:	eb19 0005 	adds.w	r0, r9, r5
 8004f14:	eb4a 0106 	adc.w	r1, sl, r6
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	461d      	mov	r5, r3
 8004f1e:	f04f 0600 	mov.w	r6, #0
 8004f22:	196b      	adds	r3, r5, r5
 8004f24:	eb46 0406 	adc.w	r4, r6, r6
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4623      	mov	r3, r4
 8004f2c:	f7fb f95e 	bl	80001ec <__aeabi_uldivmod>
 8004f30:	4603      	mov	r3, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	461a      	mov	r2, r3
 8004f36:	4b8b      	ldr	r3, [pc, #556]	; (8005164 <UART_SetConfig+0x384>)
 8004f38:	fba3 1302 	umull	r1, r3, r3, r2
 8004f3c:	095b      	lsrs	r3, r3, #5
 8004f3e:	2164      	movs	r1, #100	; 0x64
 8004f40:	fb01 f303 	mul.w	r3, r1, r3
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	3332      	adds	r3, #50	; 0x32
 8004f4a:	4a86      	ldr	r2, [pc, #536]	; (8005164 <UART_SetConfig+0x384>)
 8004f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f58:	4498      	add	r8, r3
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	461d      	mov	r5, r3
 8004f5e:	f04f 0600 	mov.w	r6, #0
 8004f62:	46a9      	mov	r9, r5
 8004f64:	46b2      	mov	sl, r6
 8004f66:	eb19 0309 	adds.w	r3, r9, r9
 8004f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8004f6e:	4699      	mov	r9, r3
 8004f70:	46a2      	mov	sl, r4
 8004f72:	eb19 0905 	adds.w	r9, r9, r5
 8004f76:	eb4a 0a06 	adc.w	sl, sl, r6
 8004f7a:	f04f 0100 	mov.w	r1, #0
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f8e:	4689      	mov	r9, r1
 8004f90:	4692      	mov	sl, r2
 8004f92:	eb19 0005 	adds.w	r0, r9, r5
 8004f96:	eb4a 0106 	adc.w	r1, sl, r6
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	461d      	mov	r5, r3
 8004fa0:	f04f 0600 	mov.w	r6, #0
 8004fa4:	196b      	adds	r3, r5, r5
 8004fa6:	eb46 0406 	adc.w	r4, r6, r6
 8004faa:	461a      	mov	r2, r3
 8004fac:	4623      	mov	r3, r4
 8004fae:	f7fb f91d 	bl	80001ec <__aeabi_uldivmod>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	460c      	mov	r4, r1
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	4b6a      	ldr	r3, [pc, #424]	; (8005164 <UART_SetConfig+0x384>)
 8004fba:	fba3 1302 	umull	r1, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	2164      	movs	r1, #100	; 0x64
 8004fc2:	fb01 f303 	mul.w	r3, r1, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	3332      	adds	r3, #50	; 0x32
 8004fcc:	4a65      	ldr	r2, [pc, #404]	; (8005164 <UART_SetConfig+0x384>)
 8004fce:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd2:	095b      	lsrs	r3, r3, #5
 8004fd4:	f003 0207 	and.w	r2, r3, #7
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4442      	add	r2, r8
 8004fde:	609a      	str	r2, [r3, #8]
 8004fe0:	e26f      	b.n	80054c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe2:	f7fe fbf3 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8004fe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	461d      	mov	r5, r3
 8004fec:	f04f 0600 	mov.w	r6, #0
 8004ff0:	46a8      	mov	r8, r5
 8004ff2:	46b1      	mov	r9, r6
 8004ff4:	eb18 0308 	adds.w	r3, r8, r8
 8004ff8:	eb49 0409 	adc.w	r4, r9, r9
 8004ffc:	4698      	mov	r8, r3
 8004ffe:	46a1      	mov	r9, r4
 8005000:	eb18 0805 	adds.w	r8, r8, r5
 8005004:	eb49 0906 	adc.w	r9, r9, r6
 8005008:	f04f 0100 	mov.w	r1, #0
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005014:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005018:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800501c:	4688      	mov	r8, r1
 800501e:	4691      	mov	r9, r2
 8005020:	eb18 0005 	adds.w	r0, r8, r5
 8005024:	eb49 0106 	adc.w	r1, r9, r6
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	461d      	mov	r5, r3
 800502e:	f04f 0600 	mov.w	r6, #0
 8005032:	196b      	adds	r3, r5, r5
 8005034:	eb46 0406 	adc.w	r4, r6, r6
 8005038:	461a      	mov	r2, r3
 800503a:	4623      	mov	r3, r4
 800503c:	f7fb f8d6 	bl	80001ec <__aeabi_uldivmod>
 8005040:	4603      	mov	r3, r0
 8005042:	460c      	mov	r4, r1
 8005044:	461a      	mov	r2, r3
 8005046:	4b47      	ldr	r3, [pc, #284]	; (8005164 <UART_SetConfig+0x384>)
 8005048:	fba3 2302 	umull	r2, r3, r3, r2
 800504c:	095b      	lsrs	r3, r3, #5
 800504e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	461d      	mov	r5, r3
 8005056:	f04f 0600 	mov.w	r6, #0
 800505a:	46a9      	mov	r9, r5
 800505c:	46b2      	mov	sl, r6
 800505e:	eb19 0309 	adds.w	r3, r9, r9
 8005062:	eb4a 040a 	adc.w	r4, sl, sl
 8005066:	4699      	mov	r9, r3
 8005068:	46a2      	mov	sl, r4
 800506a:	eb19 0905 	adds.w	r9, r9, r5
 800506e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005072:	f04f 0100 	mov.w	r1, #0
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800507e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005086:	4689      	mov	r9, r1
 8005088:	4692      	mov	sl, r2
 800508a:	eb19 0005 	adds.w	r0, r9, r5
 800508e:	eb4a 0106 	adc.w	r1, sl, r6
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	461d      	mov	r5, r3
 8005098:	f04f 0600 	mov.w	r6, #0
 800509c:	196b      	adds	r3, r5, r5
 800509e:	eb46 0406 	adc.w	r4, r6, r6
 80050a2:	461a      	mov	r2, r3
 80050a4:	4623      	mov	r3, r4
 80050a6:	f7fb f8a1 	bl	80001ec <__aeabi_uldivmod>
 80050aa:	4603      	mov	r3, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	461a      	mov	r2, r3
 80050b0:	4b2c      	ldr	r3, [pc, #176]	; (8005164 <UART_SetConfig+0x384>)
 80050b2:	fba3 1302 	umull	r1, r3, r3, r2
 80050b6:	095b      	lsrs	r3, r3, #5
 80050b8:	2164      	movs	r1, #100	; 0x64
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	3332      	adds	r3, #50	; 0x32
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <UART_SetConfig+0x384>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	005b      	lsls	r3, r3, #1
 80050ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050d2:	4498      	add	r8, r3
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	461d      	mov	r5, r3
 80050d8:	f04f 0600 	mov.w	r6, #0
 80050dc:	46a9      	mov	r9, r5
 80050de:	46b2      	mov	sl, r6
 80050e0:	eb19 0309 	adds.w	r3, r9, r9
 80050e4:	eb4a 040a 	adc.w	r4, sl, sl
 80050e8:	4699      	mov	r9, r3
 80050ea:	46a2      	mov	sl, r4
 80050ec:	eb19 0905 	adds.w	r9, r9, r5
 80050f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80050f4:	f04f 0100 	mov.w	r1, #0
 80050f8:	f04f 0200 	mov.w	r2, #0
 80050fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005108:	4689      	mov	r9, r1
 800510a:	4692      	mov	sl, r2
 800510c:	eb19 0005 	adds.w	r0, r9, r5
 8005110:	eb4a 0106 	adc.w	r1, sl, r6
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	461d      	mov	r5, r3
 800511a:	f04f 0600 	mov.w	r6, #0
 800511e:	196b      	adds	r3, r5, r5
 8005120:	eb46 0406 	adc.w	r4, r6, r6
 8005124:	461a      	mov	r2, r3
 8005126:	4623      	mov	r3, r4
 8005128:	f7fb f860 	bl	80001ec <__aeabi_uldivmod>
 800512c:	4603      	mov	r3, r0
 800512e:	460c      	mov	r4, r1
 8005130:	461a      	mov	r2, r3
 8005132:	4b0c      	ldr	r3, [pc, #48]	; (8005164 <UART_SetConfig+0x384>)
 8005134:	fba3 1302 	umull	r1, r3, r3, r2
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	2164      	movs	r1, #100	; 0x64
 800513c:	fb01 f303 	mul.w	r3, r1, r3
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	3332      	adds	r3, #50	; 0x32
 8005146:	4a07      	ldr	r2, [pc, #28]	; (8005164 <UART_SetConfig+0x384>)
 8005148:	fba2 2303 	umull	r2, r3, r2, r3
 800514c:	095b      	lsrs	r3, r3, #5
 800514e:	f003 0207 	and.w	r2, r3, #7
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4442      	add	r2, r8
 8005158:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800515a:	e1b2      	b.n	80054c2 <UART_SetConfig+0x6e2>
 800515c:	40011000 	.word	0x40011000
 8005160:	40011400 	.word	0x40011400
 8005164:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4ad7      	ldr	r2, [pc, #860]	; (80054cc <UART_SetConfig+0x6ec>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d005      	beq.n	800517e <UART_SetConfig+0x39e>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4ad6      	ldr	r2, [pc, #856]	; (80054d0 <UART_SetConfig+0x6f0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	f040 80d1 	bne.w	8005320 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800517e:	f7fe fb39 	bl	80037f4 <HAL_RCC_GetPCLK2Freq>
 8005182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	469a      	mov	sl, r3
 8005188:	f04f 0b00 	mov.w	fp, #0
 800518c:	46d0      	mov	r8, sl
 800518e:	46d9      	mov	r9, fp
 8005190:	eb18 0308 	adds.w	r3, r8, r8
 8005194:	eb49 0409 	adc.w	r4, r9, r9
 8005198:	4698      	mov	r8, r3
 800519a:	46a1      	mov	r9, r4
 800519c:	eb18 080a 	adds.w	r8, r8, sl
 80051a0:	eb49 090b 	adc.w	r9, r9, fp
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051b8:	4688      	mov	r8, r1
 80051ba:	4691      	mov	r9, r2
 80051bc:	eb1a 0508 	adds.w	r5, sl, r8
 80051c0:	eb4b 0609 	adc.w	r6, fp, r9
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	4619      	mov	r1, r3
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	f04f 0400 	mov.w	r4, #0
 80051d6:	0094      	lsls	r4, r2, #2
 80051d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051dc:	008b      	lsls	r3, r1, #2
 80051de:	461a      	mov	r2, r3
 80051e0:	4623      	mov	r3, r4
 80051e2:	4628      	mov	r0, r5
 80051e4:	4631      	mov	r1, r6
 80051e6:	f7fb f801 	bl	80001ec <__aeabi_uldivmod>
 80051ea:	4603      	mov	r3, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	461a      	mov	r2, r3
 80051f0:	4bb8      	ldr	r3, [pc, #736]	; (80054d4 <UART_SetConfig+0x6f4>)
 80051f2:	fba3 2302 	umull	r2, r3, r3, r2
 80051f6:	095b      	lsrs	r3, r3, #5
 80051f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	469b      	mov	fp, r3
 8005200:	f04f 0c00 	mov.w	ip, #0
 8005204:	46d9      	mov	r9, fp
 8005206:	46e2      	mov	sl, ip
 8005208:	eb19 0309 	adds.w	r3, r9, r9
 800520c:	eb4a 040a 	adc.w	r4, sl, sl
 8005210:	4699      	mov	r9, r3
 8005212:	46a2      	mov	sl, r4
 8005214:	eb19 090b 	adds.w	r9, r9, fp
 8005218:	eb4a 0a0c 	adc.w	sl, sl, ip
 800521c:	f04f 0100 	mov.w	r1, #0
 8005220:	f04f 0200 	mov.w	r2, #0
 8005224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005228:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800522c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005230:	4689      	mov	r9, r1
 8005232:	4692      	mov	sl, r2
 8005234:	eb1b 0509 	adds.w	r5, fp, r9
 8005238:	eb4c 060a 	adc.w	r6, ip, sl
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	4619      	mov	r1, r3
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	f04f 0400 	mov.w	r4, #0
 800524e:	0094      	lsls	r4, r2, #2
 8005250:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005254:	008b      	lsls	r3, r1, #2
 8005256:	461a      	mov	r2, r3
 8005258:	4623      	mov	r3, r4
 800525a:	4628      	mov	r0, r5
 800525c:	4631      	mov	r1, r6
 800525e:	f7fa ffc5 	bl	80001ec <__aeabi_uldivmod>
 8005262:	4603      	mov	r3, r0
 8005264:	460c      	mov	r4, r1
 8005266:	461a      	mov	r2, r3
 8005268:	4b9a      	ldr	r3, [pc, #616]	; (80054d4 <UART_SetConfig+0x6f4>)
 800526a:	fba3 1302 	umull	r1, r3, r3, r2
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2164      	movs	r1, #100	; 0x64
 8005272:	fb01 f303 	mul.w	r3, r1, r3
 8005276:	1ad3      	subs	r3, r2, r3
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	3332      	adds	r3, #50	; 0x32
 800527c:	4a95      	ldr	r2, [pc, #596]	; (80054d4 <UART_SetConfig+0x6f4>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005288:	4498      	add	r8, r3
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	469b      	mov	fp, r3
 800528e:	f04f 0c00 	mov.w	ip, #0
 8005292:	46d9      	mov	r9, fp
 8005294:	46e2      	mov	sl, ip
 8005296:	eb19 0309 	adds.w	r3, r9, r9
 800529a:	eb4a 040a 	adc.w	r4, sl, sl
 800529e:	4699      	mov	r9, r3
 80052a0:	46a2      	mov	sl, r4
 80052a2:	eb19 090b 	adds.w	r9, r9, fp
 80052a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80052aa:	f04f 0100 	mov.w	r1, #0
 80052ae:	f04f 0200 	mov.w	r2, #0
 80052b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052be:	4689      	mov	r9, r1
 80052c0:	4692      	mov	sl, r2
 80052c2:	eb1b 0509 	adds.w	r5, fp, r9
 80052c6:	eb4c 060a 	adc.w	r6, ip, sl
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4619      	mov	r1, r3
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	f04f 0400 	mov.w	r4, #0
 80052dc:	0094      	lsls	r4, r2, #2
 80052de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052e2:	008b      	lsls	r3, r1, #2
 80052e4:	461a      	mov	r2, r3
 80052e6:	4623      	mov	r3, r4
 80052e8:	4628      	mov	r0, r5
 80052ea:	4631      	mov	r1, r6
 80052ec:	f7fa ff7e 	bl	80001ec <__aeabi_uldivmod>
 80052f0:	4603      	mov	r3, r0
 80052f2:	460c      	mov	r4, r1
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b77      	ldr	r3, [pc, #476]	; (80054d4 <UART_SetConfig+0x6f4>)
 80052f8:	fba3 1302 	umull	r1, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	2164      	movs	r1, #100	; 0x64
 8005300:	fb01 f303 	mul.w	r3, r1, r3
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	011b      	lsls	r3, r3, #4
 8005308:	3332      	adds	r3, #50	; 0x32
 800530a:	4a72      	ldr	r2, [pc, #456]	; (80054d4 <UART_SetConfig+0x6f4>)
 800530c:	fba2 2303 	umull	r2, r3, r2, r3
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	f003 020f 	and.w	r2, r3, #15
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4442      	add	r2, r8
 800531c:	609a      	str	r2, [r3, #8]
 800531e:	e0d0      	b.n	80054c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005320:	f7fe fa54 	bl	80037cc <HAL_RCC_GetPCLK1Freq>
 8005324:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	469a      	mov	sl, r3
 800532a:	f04f 0b00 	mov.w	fp, #0
 800532e:	46d0      	mov	r8, sl
 8005330:	46d9      	mov	r9, fp
 8005332:	eb18 0308 	adds.w	r3, r8, r8
 8005336:	eb49 0409 	adc.w	r4, r9, r9
 800533a:	4698      	mov	r8, r3
 800533c:	46a1      	mov	r9, r4
 800533e:	eb18 080a 	adds.w	r8, r8, sl
 8005342:	eb49 090b 	adc.w	r9, r9, fp
 8005346:	f04f 0100 	mov.w	r1, #0
 800534a:	f04f 0200 	mov.w	r2, #0
 800534e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005352:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005356:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800535a:	4688      	mov	r8, r1
 800535c:	4691      	mov	r9, r2
 800535e:	eb1a 0508 	adds.w	r5, sl, r8
 8005362:	eb4b 0609 	adc.w	r6, fp, r9
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	4619      	mov	r1, r3
 800536c:	f04f 0200 	mov.w	r2, #0
 8005370:	f04f 0300 	mov.w	r3, #0
 8005374:	f04f 0400 	mov.w	r4, #0
 8005378:	0094      	lsls	r4, r2, #2
 800537a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800537e:	008b      	lsls	r3, r1, #2
 8005380:	461a      	mov	r2, r3
 8005382:	4623      	mov	r3, r4
 8005384:	4628      	mov	r0, r5
 8005386:	4631      	mov	r1, r6
 8005388:	f7fa ff30 	bl	80001ec <__aeabi_uldivmod>
 800538c:	4603      	mov	r3, r0
 800538e:	460c      	mov	r4, r1
 8005390:	461a      	mov	r2, r3
 8005392:	4b50      	ldr	r3, [pc, #320]	; (80054d4 <UART_SetConfig+0x6f4>)
 8005394:	fba3 2302 	umull	r2, r3, r3, r2
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	469b      	mov	fp, r3
 80053a2:	f04f 0c00 	mov.w	ip, #0
 80053a6:	46d9      	mov	r9, fp
 80053a8:	46e2      	mov	sl, ip
 80053aa:	eb19 0309 	adds.w	r3, r9, r9
 80053ae:	eb4a 040a 	adc.w	r4, sl, sl
 80053b2:	4699      	mov	r9, r3
 80053b4:	46a2      	mov	sl, r4
 80053b6:	eb19 090b 	adds.w	r9, r9, fp
 80053ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80053be:	f04f 0100 	mov.w	r1, #0
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053d2:	4689      	mov	r9, r1
 80053d4:	4692      	mov	sl, r2
 80053d6:	eb1b 0509 	adds.w	r5, fp, r9
 80053da:	eb4c 060a 	adc.w	r6, ip, sl
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	4619      	mov	r1, r3
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	f04f 0300 	mov.w	r3, #0
 80053ec:	f04f 0400 	mov.w	r4, #0
 80053f0:	0094      	lsls	r4, r2, #2
 80053f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053f6:	008b      	lsls	r3, r1, #2
 80053f8:	461a      	mov	r2, r3
 80053fa:	4623      	mov	r3, r4
 80053fc:	4628      	mov	r0, r5
 80053fe:	4631      	mov	r1, r6
 8005400:	f7fa fef4 	bl	80001ec <__aeabi_uldivmod>
 8005404:	4603      	mov	r3, r0
 8005406:	460c      	mov	r4, r1
 8005408:	461a      	mov	r2, r3
 800540a:	4b32      	ldr	r3, [pc, #200]	; (80054d4 <UART_SetConfig+0x6f4>)
 800540c:	fba3 1302 	umull	r1, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	2164      	movs	r1, #100	; 0x64
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	3332      	adds	r3, #50	; 0x32
 800541e:	4a2d      	ldr	r2, [pc, #180]	; (80054d4 <UART_SetConfig+0x6f4>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800542a:	4498      	add	r8, r3
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	469b      	mov	fp, r3
 8005430:	f04f 0c00 	mov.w	ip, #0
 8005434:	46d9      	mov	r9, fp
 8005436:	46e2      	mov	sl, ip
 8005438:	eb19 0309 	adds.w	r3, r9, r9
 800543c:	eb4a 040a 	adc.w	r4, sl, sl
 8005440:	4699      	mov	r9, r3
 8005442:	46a2      	mov	sl, r4
 8005444:	eb19 090b 	adds.w	r9, r9, fp
 8005448:	eb4a 0a0c 	adc.w	sl, sl, ip
 800544c:	f04f 0100 	mov.w	r1, #0
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005458:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800545c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005460:	4689      	mov	r9, r1
 8005462:	4692      	mov	sl, r2
 8005464:	eb1b 0509 	adds.w	r5, fp, r9
 8005468:	eb4c 060a 	adc.w	r6, ip, sl
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	4619      	mov	r1, r3
 8005472:	f04f 0200 	mov.w	r2, #0
 8005476:	f04f 0300 	mov.w	r3, #0
 800547a:	f04f 0400 	mov.w	r4, #0
 800547e:	0094      	lsls	r4, r2, #2
 8005480:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005484:	008b      	lsls	r3, r1, #2
 8005486:	461a      	mov	r2, r3
 8005488:	4623      	mov	r3, r4
 800548a:	4628      	mov	r0, r5
 800548c:	4631      	mov	r1, r6
 800548e:	f7fa fead 	bl	80001ec <__aeabi_uldivmod>
 8005492:	4603      	mov	r3, r0
 8005494:	460c      	mov	r4, r1
 8005496:	461a      	mov	r2, r3
 8005498:	4b0e      	ldr	r3, [pc, #56]	; (80054d4 <UART_SetConfig+0x6f4>)
 800549a:	fba3 1302 	umull	r1, r3, r3, r2
 800549e:	095b      	lsrs	r3, r3, #5
 80054a0:	2164      	movs	r1, #100	; 0x64
 80054a2:	fb01 f303 	mul.w	r3, r1, r3
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	3332      	adds	r3, #50	; 0x32
 80054ac:	4a09      	ldr	r2, [pc, #36]	; (80054d4 <UART_SetConfig+0x6f4>)
 80054ae:	fba2 2303 	umull	r2, r3, r2, r3
 80054b2:	095b      	lsrs	r3, r3, #5
 80054b4:	f003 020f 	and.w	r2, r3, #15
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4442      	add	r2, r8
 80054be:	609a      	str	r2, [r3, #8]
}
 80054c0:	e7ff      	b.n	80054c2 <UART_SetConfig+0x6e2>
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054cc:	40011000 	.word	0x40011000
 80054d0:	40011400 	.word	0x40011400
 80054d4:	51eb851f 	.word	0x51eb851f

080054d8 <HAL_GPIO_EXTI_Callback>:
#include "tim.h"
#include "lc_exit_nvic.h"
#include "lc_ws2812.h"

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	4603      	mov	r3, r0
 80054e0:	80fb      	strh	r3, [r7, #6]

	switch(GPIO_Pin)
 80054e2:	88fb      	ldrh	r3, [r7, #6]
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d030      	beq.n	800554a <HAL_GPIO_EXTI_Callback+0x72>
 80054e8:	2b10      	cmp	r3, #16
 80054ea:	dc04      	bgt.n	80054f6 <HAL_GPIO_EXTI_Callback+0x1e>
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d011      	beq.n	8005514 <HAL_GPIO_EXTI_Callback+0x3c>
 80054f0:	2b02      	cmp	r3, #2
 80054f2:	d005      	beq.n	8005500 <HAL_GPIO_EXTI_Callback+0x28>


	}


}
 80054f4:	e03d      	b.n	8005572 <HAL_GPIO_EXTI_Callback+0x9a>
	switch(GPIO_Pin)
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d01d      	beq.n	8005536 <HAL_GPIO_EXTI_Callback+0x5e>
 80054fa:	2b40      	cmp	r3, #64	; 0x40
 80054fc:	d02f      	beq.n	800555e <HAL_GPIO_EXTI_Callback+0x86>
}
 80054fe:	e038      	b.n	8005572 <HAL_GPIO_EXTI_Callback+0x9a>
			ws2812_example1(&htim1, TIM_CHANNEL_1);
 8005500:	2100      	movs	r1, #0
 8005502:	481e      	ldr	r0, [pc, #120]	; (800557c <HAL_GPIO_EXTI_Callback+0xa4>)
 8005504:	f000 f95a 	bl	80057bc <ws2812_example1>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005508:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800550c:	481c      	ldr	r0, [pc, #112]	; (8005580 <HAL_GPIO_EXTI_Callback+0xa8>)
 800550e:	f7fd fd16 	bl	8002f3e <HAL_GPIO_TogglePin>
			break;
 8005512:	e02e      	b.n	8005572 <HAL_GPIO_EXTI_Callback+0x9a>
			HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t *)RGB_buffur2, (RESET_PULSE + WS2812_DATA_LEN1));
 8005514:	f44f 631d 	mov.w	r3, #2512	; 0x9d0
 8005518:	4a1a      	ldr	r2, [pc, #104]	; (8005584 <HAL_GPIO_EXTI_Callback+0xac>)
 800551a:	2100      	movs	r1, #0
 800551c:	4817      	ldr	r0, [pc, #92]	; (800557c <HAL_GPIO_EXTI_Callback+0xa4>)
 800551e:	f7fe fa1b 	bl	8003958 <HAL_TIM_PWM_Start_DMA>
			ws2812_example1(&htim1, TIM_CHANNEL_2);
 8005522:	2104      	movs	r1, #4
 8005524:	4815      	ldr	r0, [pc, #84]	; (800557c <HAL_GPIO_EXTI_Callback+0xa4>)
 8005526:	f000 f949 	bl	80057bc <ws2812_example1>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800552a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800552e:	4814      	ldr	r0, [pc, #80]	; (8005580 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005530:	f7fd fd05 	bl	8002f3e <HAL_GPIO_TogglePin>
			break;
 8005534:	e01d      	b.n	8005572 <HAL_GPIO_EXTI_Callback+0x9a>
			ws2812_example1(&htim1, TIM_CHANNEL_3);
 8005536:	2108      	movs	r1, #8
 8005538:	4810      	ldr	r0, [pc, #64]	; (800557c <HAL_GPIO_EXTI_Callback+0xa4>)
 800553a:	f000 f93f 	bl	80057bc <ws2812_example1>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800553e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005542:	480f      	ldr	r0, [pc, #60]	; (8005580 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005544:	f7fd fcfb 	bl	8002f3e <HAL_GPIO_TogglePin>
			break;
 8005548:	e013      	b.n	8005572 <HAL_GPIO_EXTI_Callback+0x9a>
			ws2812_example1(&htim8, TIM_CHANNEL_2);
 800554a:	2104      	movs	r1, #4
 800554c:	480e      	ldr	r0, [pc, #56]	; (8005588 <HAL_GPIO_EXTI_Callback+0xb0>)
 800554e:	f000 f935 	bl	80057bc <ws2812_example1>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005552:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005556:	480a      	ldr	r0, [pc, #40]	; (8005580 <HAL_GPIO_EXTI_Callback+0xa8>)
 8005558:	f7fd fcf1 	bl	8002f3e <HAL_GPIO_TogglePin>
			break;
 800555c:	e009      	b.n	8005572 <HAL_GPIO_EXTI_Callback+0x9a>
			ws2812_example1(&htim8, TIM_CHANNEL_3);
 800555e:	2108      	movs	r1, #8
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <HAL_GPIO_EXTI_Callback+0xb0>)
 8005562:	f000 f92b 	bl	80057bc <ws2812_example1>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8005566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800556a:	4805      	ldr	r0, [pc, #20]	; (8005580 <HAL_GPIO_EXTI_Callback+0xa8>)
 800556c:	f7fd fce7 	bl	8002f3e <HAL_GPIO_TogglePin>
			break;
 8005570:	bf00      	nop
}
 8005572:	bf00      	nop
 8005574:	3708      	adds	r7, #8
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	200029f4 	.word	0x200029f4
 8005580:	40021000 	.word	0x40021000
 8005584:	20001424 	.word	0x20001424
 8005588:	200028f4 	.word	0x200028f4

0800558c <HAL_TIM_PWM_PulseFinishedCallback>:

uint16_t RGB_buffur1[RESET_PULSE + WS2812_DATA_LEN1] = { 0 };
uint16_t RGB_buffur2[RESET_PULSE + WS2812_DATA_LEN1] = { 0 };

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b082      	sub	sp, #8
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
	windwill_state = 1;
 8005594:	4b28      	ldr	r3, [pc, #160]	; (8005638 <HAL_TIM_PWM_PulseFinishedCallback+0xac>)
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
	if ((htim->Instance == htim1.Instance) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)) {
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d108      	bne.n	80055b8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	7f1b      	ldrb	r3, [r3, #28]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d104      	bne.n	80055b8 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>
		HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_1);
 80055ae:	2100      	movs	r1, #0
 80055b0:	4822      	ldr	r0, [pc, #136]	; (800563c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80055b2:	f7fe fae3 	bl	8003b7c <HAL_TIM_PWM_Stop_DMA>
 80055b6:	e03b      	b.n	8005630 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>

	} else if ((htim->Instance == htim1.Instance) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	4b1f      	ldr	r3, [pc, #124]	; (800563c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d108      	bne.n	80055d6 <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	7f1b      	ldrb	r3, [r3, #28]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_PWM_PulseFinishedCallback+0x4a>
		HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_2);
 80055cc:	2104      	movs	r1, #4
 80055ce:	481b      	ldr	r0, [pc, #108]	; (800563c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80055d0:	f7fe fad4 	bl	8003b7c <HAL_TIM_PWM_Stop_DMA>
 80055d4:	e02c      	b.n	8005630 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>

	} else if ((htim->Instance == htim1.Instance) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)) {
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	4b18      	ldr	r3, [pc, #96]	; (800563c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d108      	bne.n	80055f4 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	7f1b      	ldrb	r3, [r3, #28]
 80055e6:	2b04      	cmp	r3, #4
 80055e8:	d104      	bne.n	80055f4 <HAL_TIM_PWM_PulseFinishedCallback+0x68>
		HAL_TIM_PWM_Stop_DMA(&htim1,TIM_CHANNEL_3);
 80055ea:	2108      	movs	r1, #8
 80055ec:	4813      	ldr	r0, [pc, #76]	; (800563c <HAL_TIM_PWM_PulseFinishedCallback+0xb0>)
 80055ee:	f7fe fac5 	bl	8003b7c <HAL_TIM_PWM_Stop_DMA>
 80055f2:	e01d      	b.n	8005630 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>

	} else if ((htim->Instance == htim8.Instance) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)) {
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b11      	ldr	r3, [pc, #68]	; (8005640 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d108      	bne.n	8005612 <HAL_TIM_PWM_PulseFinishedCallback+0x86>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	7f1b      	ldrb	r3, [r3, #28]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d104      	bne.n	8005612 <HAL_TIM_PWM_PulseFinishedCallback+0x86>
		HAL_TIM_PWM_Stop_DMA(&htim8,TIM_CHANNEL_2);
 8005608:	2104      	movs	r1, #4
 800560a:	480d      	ldr	r0, [pc, #52]	; (8005640 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 800560c:	f7fe fab6 	bl	8003b7c <HAL_TIM_PWM_Stop_DMA>
 8005610:	e00e      	b.n	8005630 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>

	} else if ((htim->Instance == htim8.Instance) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)) {
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	4b0a      	ldr	r3, [pc, #40]	; (8005640 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d108      	bne.n	8005630 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	7f1b      	ldrb	r3, [r3, #28]
 8005622:	2b04      	cmp	r3, #4
 8005624:	d104      	bne.n	8005630 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
		HAL_TIM_PWM_Stop_DMA(&htim8,TIM_CHANNEL_3);
 8005626:	2108      	movs	r1, #8
 8005628:	4805      	ldr	r0, [pc, #20]	; (8005640 <HAL_TIM_PWM_PulseFinishedCallback+0xb4>)
 800562a:	f7fe faa7 	bl	8003b7c <HAL_TIM_PWM_Stop_DMA>

	}
}
 800562e:	e7ff      	b.n	8005630 <HAL_TIM_PWM_PulseFinishedCallback+0xa4>
 8005630:	bf00      	nop
 8005632:	3708      	adds	r7, #8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	20000080 	.word	0x20000080
 800563c:	200029f4 	.word	0x200029f4
 8005640:	200028f4 	.word	0x200028f4

08005644 <ws2812_set_RGB1>:

void ws2812_set_RGB1(uint8_t R, uint8_t G, uint8_t B, uint16_t num)
{
 8005644:	b490      	push	{r4, r7}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	4611      	mov	r1, r2
 8005650:	461a      	mov	r2, r3
 8005652:	4623      	mov	r3, r4
 8005654:	71fb      	strb	r3, [r7, #7]
 8005656:	4603      	mov	r3, r0
 8005658:	71bb      	strb	r3, [r7, #6]
 800565a:	460b      	mov	r3, r1
 800565c:	717b      	strb	r3, [r7, #5]
 800565e:	4613      	mov	r3, r2
 8005660:	807b      	strh	r3, [r7, #2]
    //指针偏移:需要跳过复位信号的N个0
    uint16_t* p = (RGB_buffur1 + RESET_PULSE) + (num * LED_DATA_LEN);
 8005662:	887a      	ldrh	r2, [r7, #2]
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	3350      	adds	r3, #80	; 0x50
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <ws2812_set_RGB1+0xb8>)
 8005670:	4413      	add	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]

	for (uint16_t i = 0;i < 8;i++)
 8005674:	2300      	movs	r3, #0
 8005676:	81fb      	strh	r3, [r7, #14]
 8005678:	e037      	b.n	80056ea <ws2812_set_RGB1+0xa6>
	{
		//填充数组
		p[i]      = (G << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800567a:	79ba      	ldrb	r2, [r7, #6]
 800567c:	89fb      	ldrh	r3, [r7, #14]
 800567e:	fa02 f303 	lsl.w	r3, r2, r3
 8005682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <ws2812_set_RGB1+0x4a>
 800568a:	2145      	movs	r1, #69	; 0x45
 800568c:	e000      	b.n	8005690 <ws2812_set_RGB1+0x4c>
 800568e:	2122      	movs	r1, #34	; 0x22
 8005690:	89fb      	ldrh	r3, [r7, #14]
 8005692:	005b      	lsls	r3, r3, #1
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	4413      	add	r3, r2
 8005698:	460a      	mov	r2, r1
 800569a:	801a      	strh	r2, [r3, #0]
		p[i + 8]  = (R << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800569c:	79fa      	ldrb	r2, [r7, #7]
 800569e:	89fb      	ldrh	r3, [r7, #14]
 80056a0:	fa02 f303 	lsl.w	r3, r2, r3
 80056a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d001      	beq.n	80056b0 <ws2812_set_RGB1+0x6c>
 80056ac:	2145      	movs	r1, #69	; 0x45
 80056ae:	e000      	b.n	80056b2 <ws2812_set_RGB1+0x6e>
 80056b0:	2122      	movs	r1, #34	; 0x22
 80056b2:	89fb      	ldrh	r3, [r7, #14]
 80056b4:	3308      	adds	r3, #8
 80056b6:	005b      	lsls	r3, r3, #1
 80056b8:	68ba      	ldr	r2, [r7, #8]
 80056ba:	4413      	add	r3, r2
 80056bc:	460a      	mov	r2, r1
 80056be:	801a      	strh	r2, [r3, #0]
		p[i + 16] = (B << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 80056c0:	797a      	ldrb	r2, [r7, #5]
 80056c2:	89fb      	ldrh	r3, [r7, #14]
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <ws2812_set_RGB1+0x90>
 80056d0:	2145      	movs	r1, #69	; 0x45
 80056d2:	e000      	b.n	80056d6 <ws2812_set_RGB1+0x92>
 80056d4:	2122      	movs	r1, #34	; 0x22
 80056d6:	89fb      	ldrh	r3, [r7, #14]
 80056d8:	3310      	adds	r3, #16
 80056da:	005b      	lsls	r3, r3, #1
 80056dc:	68ba      	ldr	r2, [r7, #8]
 80056de:	4413      	add	r3, r2
 80056e0:	460a      	mov	r2, r1
 80056e2:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0;i < 8;i++)
 80056e4:	89fb      	ldrh	r3, [r7, #14]
 80056e6:	3301      	adds	r3, #1
 80056e8:	81fb      	strh	r3, [r7, #14]
 80056ea:	89fb      	ldrh	r3, [r7, #14]
 80056ec:	2b07      	cmp	r3, #7
 80056ee:	d9c4      	bls.n	800567a <ws2812_set_RGB1+0x36>
	}
}
 80056f0:	bf00      	nop
 80056f2:	3710      	adds	r7, #16
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bc90      	pop	{r4, r7}
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000084 	.word	0x20000084

08005700 <ws2812_set_RGB2>:

void ws2812_set_RGB2(uint8_t R, uint8_t G, uint8_t B, uint16_t num)
{
 8005700:	b490      	push	{r4, r7}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	4604      	mov	r4, r0
 8005708:	4608      	mov	r0, r1
 800570a:	4611      	mov	r1, r2
 800570c:	461a      	mov	r2, r3
 800570e:	4623      	mov	r3, r4
 8005710:	71fb      	strb	r3, [r7, #7]
 8005712:	4603      	mov	r3, r0
 8005714:	71bb      	strb	r3, [r7, #6]
 8005716:	460b      	mov	r3, r1
 8005718:	717b      	strb	r3, [r7, #5]
 800571a:	4613      	mov	r3, r2
 800571c:	807b      	strh	r3, [r7, #2]
    //指针偏移:需要跳过复位信号的N个0
	uint16_t* p = (RGB_buffur2 + RESET_PULSE) + (num * LED_DATA_LEN);
 800571e:	887a      	ldrh	r2, [r7, #2]
 8005720:	4613      	mov	r3, r2
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	4413      	add	r3, r2
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	3350      	adds	r3, #80	; 0x50
 800572a:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <ws2812_set_RGB2+0xb8>)
 800572c:	4413      	add	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]

	for (uint16_t i = 0;i < 8;i++)
 8005730:	2300      	movs	r3, #0
 8005732:	81fb      	strh	r3, [r7, #14]
 8005734:	e037      	b.n	80057a6 <ws2812_set_RGB2+0xa6>
	{
		//填充数组
		p[i]      = (G << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 8005736:	79ba      	ldrb	r2, [r7, #6]
 8005738:	89fb      	ldrh	r3, [r7, #14]
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d001      	beq.n	800574a <ws2812_set_RGB2+0x4a>
 8005746:	2145      	movs	r1, #69	; 0x45
 8005748:	e000      	b.n	800574c <ws2812_set_RGB2+0x4c>
 800574a:	2122      	movs	r1, #34	; 0x22
 800574c:	89fb      	ldrh	r3, [r7, #14]
 800574e:	005b      	lsls	r3, r3, #1
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	4413      	add	r3, r2
 8005754:	460a      	mov	r2, r1
 8005756:	801a      	strh	r2, [r3, #0]
		p[i + 8]  = (R << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 8005758:	79fa      	ldrb	r2, [r7, #7]
 800575a:	89fb      	ldrh	r3, [r7, #14]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d001      	beq.n	800576c <ws2812_set_RGB2+0x6c>
 8005768:	2145      	movs	r1, #69	; 0x45
 800576a:	e000      	b.n	800576e <ws2812_set_RGB2+0x6e>
 800576c:	2122      	movs	r1, #34	; 0x22
 800576e:	89fb      	ldrh	r3, [r7, #14]
 8005770:	3308      	adds	r3, #8
 8005772:	005b      	lsls	r3, r3, #1
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	4413      	add	r3, r2
 8005778:	460a      	mov	r2, r1
 800577a:	801a      	strh	r2, [r3, #0]
		p[i + 16] = (B << i) & (0x80)?ONE_PULSE:ZERO_PULSE;
 800577c:	797a      	ldrb	r2, [r7, #5]
 800577e:	89fb      	ldrh	r3, [r7, #14]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <ws2812_set_RGB2+0x90>
 800578c:	2145      	movs	r1, #69	; 0x45
 800578e:	e000      	b.n	8005792 <ws2812_set_RGB2+0x92>
 8005790:	2122      	movs	r1, #34	; 0x22
 8005792:	89fb      	ldrh	r3, [r7, #14]
 8005794:	3310      	adds	r3, #16
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	4413      	add	r3, r2
 800579c:	460a      	mov	r2, r1
 800579e:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0;i < 8;i++)
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	3301      	adds	r3, #1
 80057a4:	81fb      	strh	r3, [r7, #14]
 80057a6:	89fb      	ldrh	r3, [r7, #14]
 80057a8:	2b07      	cmp	r3, #7
 80057aa:	d9c4      	bls.n	8005736 <ws2812_set_RGB2+0x36>
	}
}
 80057ac:	bf00      	nop
 80057ae:	3710      	adds	r7, #16
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bc90      	pop	{r4, r7}
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	20001424 	.word	0x20001424

080057bc <ws2812_example1>:

void ws2812_example1(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)RGB_buffur1, (RESET_PULSE + WS2812_DATA_LEN1));
 80057c6:	f44f 631d 	mov.w	r3, #2512	; 0x9d0
 80057ca:	4a04      	ldr	r2, [pc, #16]	; (80057dc <ws2812_example1+0x20>)
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7fe f8c2 	bl	8003958 <HAL_TIM_PWM_Start_DMA>

}
 80057d4:	bf00      	nop
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000084 	.word	0x20000084

080057e0 <array_set_red>:

/**
 * 给数组添加数据
 * */
void array_set_red(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	71fb      	strb	r3, [r7, #7]

	for( i = 0; i < LED_NUM1; i++)
 80057ea:	2300      	movs	r3, #0
 80057ec:	71fb      	strb	r3, [r7, #7]
 80057ee:	e009      	b.n	8005804 <array_set_red+0x24>
	{
		ws2812_set_RGB1(0x22, 0x00, 0x00, i);
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	2200      	movs	r2, #0
 80057f6:	2100      	movs	r1, #0
 80057f8:	2022      	movs	r0, #34	; 0x22
 80057fa:	f7ff ff23 	bl	8005644 <ws2812_set_RGB1>
	for( i = 0; i < LED_NUM1; i++)
 80057fe:	79fb      	ldrb	r3, [r7, #7]
 8005800:	3301      	adds	r3, #1
 8005802:	71fb      	strb	r3, [r7, #7]
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	2b66      	cmp	r3, #102	; 0x66
 8005808:	d9f2      	bls.n	80057f0 <array_set_red+0x10>
	}
}
 800580a:	bf00      	nop
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <array_set_rst>:

/**
 * 给数组添加数据
 * */
void array_set_rst(void)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8005818:	2300      	movs	r3, #0
 800581a:	71fb      	strb	r3, [r7, #7]

	for( i = 0; i < LED_NUM1; i++)
 800581c:	2300      	movs	r3, #0
 800581e:	71fb      	strb	r3, [r7, #7]
 8005820:	e009      	b.n	8005836 <array_set_rst+0x24>
	{
		ws2812_set_RGB2(0x00, 0x00, 0x00, i);
 8005822:	79fb      	ldrb	r3, [r7, #7]
 8005824:	b29b      	uxth	r3, r3
 8005826:	2200      	movs	r2, #0
 8005828:	2100      	movs	r1, #0
 800582a:	2000      	movs	r0, #0
 800582c:	f7ff ff68 	bl	8005700 <ws2812_set_RGB2>
	for( i = 0; i < LED_NUM1; i++)
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	3301      	adds	r3, #1
 8005834:	71fb      	strb	r3, [r7, #7]
 8005836:	79fb      	ldrb	r3, [r7, #7]
 8005838:	2b66      	cmp	r3, #102	; 0x66
 800583a:	d9f2      	bls.n	8005822 <array_set_rst+0x10>
	}
}
 800583c:	bf00      	nop
 800583e:	3708      	adds	r7, #8
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <can_user_init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void can_user_init(CAN_HandleTypeDef* hcan )
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b08c      	sub	sp, #48	; 0x30
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  CAN_FilterTypeDef  can_filter;

  can_filter.FilterBank = 0;                       // filter 0
 800584c:	2300      	movs	r3, #0
 800584e:	61fb      	str	r3, [r7, #28]
  can_filter.FilterMode =  CAN_FILTERMODE_IDMASK;  // mask mode
 8005850:	2300      	movs	r3, #0
 8005852:	623b      	str	r3, [r7, #32]
  can_filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8005854:	2301      	movs	r3, #1
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
  can_filter.FilterIdHigh = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	60bb      	str	r3, [r7, #8]
  can_filter.FilterIdLow  = 0;
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
  can_filter.FilterMaskIdHigh = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	613b      	str	r3, [r7, #16]
  can_filter.FilterMaskIdLow  = 0;                // set mask 0 to receive all can id
 8005864:	2300      	movs	r3, #0
 8005866:	617b      	str	r3, [r7, #20]
  can_filter.FilterFIFOAssignment = CAN_RX_FIFO0; // assign to fifo0
 8005868:	2300      	movs	r3, #0
 800586a:	61bb      	str	r3, [r7, #24]
  can_filter.FilterActivation = ENABLE;           // enable can filter
 800586c:	2301      	movs	r3, #1
 800586e:	62bb      	str	r3, [r7, #40]	; 0x28
  can_filter.SlaveStartFilterBank  = 14;          // only meaningful in dual can mode
 8005870:	230e      	movs	r3, #14
 8005872:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  HAL_CAN_ConfigFilter(hcan, &can_filter);        // init can filter
 8005874:	f107 0308 	add.w	r3, r7, #8
 8005878:	4619      	mov	r1, r3
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fb ff9a 	bl	80017b4 <HAL_CAN_ConfigFilter>
  HAL_CAN_Start(hcan);                          // start can1
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7fc f877 	bl	8001974 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // enable can1 rx interrupt
 8005886:	2102      	movs	r1, #2
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f7fc faa4 	bl	8001dd6 <HAL_CAN_ActivateNotification>
}
 800588e:	bf00      	nop
 8005890:	3730      	adds	r7, #48	; 0x30
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08c      	sub	sp, #48	; 0x30
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  CAN_RxHeaderTypeDef rx_header;
  uint8_t             rx_data[8];
  if(hcan->Instance == CAN1)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a3d      	ldr	r2, [pc, #244]	; (800599c <HAL_CAN_RxFifo0MsgPendingCallback+0x104>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d107      	bne.n	80058ba <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
  {
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data); //receive can data
 80058aa:	f107 0308 	add.w	r3, r7, #8
 80058ae:	f107 0210 	add.w	r2, r7, #16
 80058b2:	2100      	movs	r1, #0
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7fc f97c 	bl	8001bb2 <HAL_CAN_GetRxMessage>
  }
  if ((rx_header.StdId >= FEEDBACK_ID_BASE_1)
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c0:	d95f      	bls.n	8005982 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
   && (rx_header.StdId <=  FEEDBACK_ID_BASE_2 + MOTOR_MAX_NUM))                  // judge the can id
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80058c8:	d85b      	bhi.n	8005982 <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
  {
    can_cnt ++;
 80058ca:	4b35      	ldr	r3, [pc, #212]	; (80059a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	3301      	adds	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	4b33      	ldr	r3, [pc, #204]	; (80059a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 80058d4:	801a      	strh	r2, [r3, #0]
		uint8_t index  = 0 ;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(rx_header.StdId < 0x207 )
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f240 2206 	movw	r2, #518	; 0x206
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d805      	bhi.n	80058f2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
		  index = rx_header.StdId - FEEDBACK_ID_BASE_1; // get motor index by can_id 
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	3b01      	subs	r3, #1
 80058ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80058f0:	e004      	b.n	80058fc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>
    else index = rx_header.StdId - FEEDBACK_ID_BASE_2;                
 80058f2:	693b      	ldr	r3, [r7, #16]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	3b05      	subs	r3, #5
 80058f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    motor_info[index].rotor_angle    = ((rx_data[0] << 8) | rx_data[1]);
 80058fc:	7a3b      	ldrb	r3, [r7, #8]
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	b21a      	sxth	r2, r3
 8005902:	7a7b      	ldrb	r3, [r7, #9]
 8005904:	b21b      	sxth	r3, r3
 8005906:	4313      	orrs	r3, r2
 8005908:	b21b      	sxth	r3, r3
 800590a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800590e:	b298      	uxth	r0, r3
 8005910:	4924      	ldr	r1, [pc, #144]	; (80059a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8005912:	4613      	mov	r3, r2
 8005914:	005b      	lsls	r3, r3, #1
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3304      	adds	r3, #4
 800591e:	4602      	mov	r2, r0
 8005920:	801a      	strh	r2, [r3, #0]
    motor_info[index].rotor_speed    = ((rx_data[2] << 8) | rx_data[3]);
 8005922:	7abb      	ldrb	r3, [r7, #10]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	b219      	sxth	r1, r3
 8005928:	7afb      	ldrb	r3, [r7, #11]
 800592a:	b21b      	sxth	r3, r3
 800592c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005930:	430b      	orrs	r3, r1
 8005932:	b218      	sxth	r0, r3
 8005934:	491b      	ldr	r1, [pc, #108]	; (80059a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8005936:	4613      	mov	r3, r2
 8005938:	005b      	lsls	r3, r3, #1
 800593a:	4413      	add	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	440b      	add	r3, r1
 8005940:	3306      	adds	r3, #6
 8005942:	4602      	mov	r2, r0
 8005944:	801a      	strh	r2, [r3, #0]
    motor_info[index].torque_current = ((rx_data[4] << 8) | rx_data[5]);
 8005946:	7b3b      	ldrb	r3, [r7, #12]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	b219      	sxth	r1, r3
 800594c:	7b7b      	ldrb	r3, [r7, #13]
 800594e:	b21b      	sxth	r3, r3
 8005950:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005954:	430b      	orrs	r3, r1
 8005956:	b218      	sxth	r0, r3
 8005958:	4912      	ldr	r1, [pc, #72]	; (80059a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800595a:	4613      	mov	r3, r2
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	440b      	add	r3, r1
 8005964:	3308      	adds	r3, #8
 8005966:	4602      	mov	r2, r0
 8005968:	801a      	strh	r2, [r3, #0]
    motor_info[index].temp           =   rx_data[6];
 800596a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800596e:	7bb8      	ldrb	r0, [r7, #14]
 8005970:	490c      	ldr	r1, [pc, #48]	; (80059a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8005972:	4613      	mov	r3, r2
 8005974:	005b      	lsls	r3, r3, #1
 8005976:	4413      	add	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	330a      	adds	r3, #10
 800597e:	4602      	mov	r2, r0
 8005980:	701a      	strb	r2, [r3, #0]
  }
  if (can_cnt == 500)
 8005982:	4b07      	ldr	r3, [pc, #28]	; (80059a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8005984:	881b      	ldrh	r3, [r3, #0]
 8005986:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800598a:	d102      	bne.n	8005992 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
  {
    can_cnt = 0;
 800598c:	4b04      	ldr	r3, [pc, #16]	; (80059a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800598e:	2200      	movs	r2, #0
 8005990:	801a      	strh	r2, [r3, #0]
  }
}
 8005992:	bf00      	nop
 8005994:	3730      	adds	r7, #48	; 0x30
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40006400 	.word	0x40006400
 80059a0:	20002b78 	.word	0x20002b78
 80059a4:	20000010 	.word	0x20000010

080059a8 <set_motor_voltage>:
  * @param  motor voltage 1,2,3,4 or 5,6,7
  * @retval None
  */

void set_motor_voltage(uint8_t id_range, int16_t v1, int16_t v2, int16_t v3, int16_t v4)
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b08b      	sub	sp, #44	; 0x2c
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	4604      	mov	r4, r0
 80059b0:	4608      	mov	r0, r1
 80059b2:	4611      	mov	r1, r2
 80059b4:	461a      	mov	r2, r3
 80059b6:	4623      	mov	r3, r4
 80059b8:	71fb      	strb	r3, [r7, #7]
 80059ba:	4603      	mov	r3, r0
 80059bc:	80bb      	strh	r3, [r7, #4]
 80059be:	460b      	mov	r3, r1
 80059c0:	807b      	strh	r3, [r7, #2]
 80059c2:	4613      	mov	r3, r2
 80059c4:	803b      	strh	r3, [r7, #0]
  CAN_TxHeaderTypeDef tx_header;
  uint8_t             tx_data[8];
    if(id_range == 2 )
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d103      	bne.n	80059d4 <set_motor_voltage+0x2c>
    	tx_header.StdId = 0x2ff ;
 80059cc:	f240 23ff 	movw	r3, #767	; 0x2ff
 80059d0:	613b      	str	r3, [r7, #16]
 80059d2:	e008      	b.n	80059e6 <set_motor_voltage+0x3e>
	else
		tx_header.StdId = (id_range == 0)?(0x1ff):(0x200);
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d102      	bne.n	80059e0 <set_motor_voltage+0x38>
 80059da:	f240 13ff 	movw	r3, #511	; 0x1ff
 80059de:	e001      	b.n	80059e4 <set_motor_voltage+0x3c>
 80059e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e4:	613b      	str	r3, [r7, #16]
			
      
  tx_header.IDE   = CAN_ID_STD;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61bb      	str	r3, [r7, #24]
  tx_header.RTR   = CAN_RTR_DATA;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
  tx_header.DLC   = 8;
 80059ee:	2308      	movs	r3, #8
 80059f0:	623b      	str	r3, [r7, #32]

  tx_data[0] = (v1>>8)&0xff;
 80059f2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80059f6:	121b      	asrs	r3, r3, #8
 80059f8:	b21b      	sxth	r3, r3
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	723b      	strb	r3, [r7, #8]
  tx_data[1] =    (v1)&0xff;
 80059fe:	88bb      	ldrh	r3, [r7, #4]
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	727b      	strb	r3, [r7, #9]
  tx_data[2] = (v2>>8)&0xff;
 8005a04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005a08:	121b      	asrs	r3, r3, #8
 8005a0a:	b21b      	sxth	r3, r3
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	72bb      	strb	r3, [r7, #10]
  tx_data[3] =    (v2)&0xff;
 8005a10:	887b      	ldrh	r3, [r7, #2]
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	72fb      	strb	r3, [r7, #11]
  tx_data[4] = (v3>>8)&0xff;
 8005a16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005a1a:	121b      	asrs	r3, r3, #8
 8005a1c:	b21b      	sxth	r3, r3
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	733b      	strb	r3, [r7, #12]
  tx_data[5] =    (v3)&0xff;
 8005a22:	883b      	ldrh	r3, [r7, #0]
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	737b      	strb	r3, [r7, #13]
  tx_data[6] = (v4>>8)&0xff;
 8005a28:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8005a2c:	121b      	asrs	r3, r3, #8
 8005a2e:	b21b      	sxth	r3, r3
 8005a30:	b2db      	uxtb	r3, r3
 8005a32:	73bb      	strb	r3, [r7, #14]
  tx_data[7] =    (v4)&0xff;
 8005a34:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data,(uint32_t*)CAN_TX_MAILBOX0); 
 8005a3a:	f107 0208 	add.w	r2, r7, #8
 8005a3e:	f107 0110 	add.w	r1, r7, #16
 8005a42:	2301      	movs	r3, #1
 8005a44:	4803      	ldr	r0, [pc, #12]	; (8005a54 <set_motor_voltage+0xac>)
 8005a46:	f7fb ffd9 	bl	80019fc <HAL_CAN_AddTxMessage>
}
 8005a4a:	bf00      	nop
 8005a4c:	372c      	adds	r7, #44	; 0x2c
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200027c4 	.word	0x200027c4

08005a58 <pid_init>:
              float ki,
              float kd,
              float i_max,
              float out_max,
			  float deadband)
	{
 8005a58:	b480      	push	{r7}
 8005a5a:	b089      	sub	sp, #36	; 0x24
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	61f8      	str	r0, [r7, #28]
 8005a60:	61b9      	str	r1, [r7, #24]
 8005a62:	ed87 0a05 	vstr	s0, [r7, #20]
 8005a66:	edc7 0a04 	vstr	s1, [r7, #16]
 8005a6a:	ed87 1a03 	vstr	s2, [r7, #12]
 8005a6e:	edc7 1a02 	vstr	s3, [r7, #8]
 8005a72:	ed87 2a01 	vstr	s4, [r7, #4]
 8005a76:	edc7 2a00 	vstr	s5, [r7]
	  pid->pid_mode = mode;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	69ba      	ldr	r2, [r7, #24]
 8005a7e:	61da      	str	r2, [r3, #28]
	  pid->kp      = kp;
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	697a      	ldr	r2, [r7, #20]
 8005a84:	601a      	str	r2, [r3, #0]
	  pid->ki      = ki;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	605a      	str	r2, [r3, #4]
	  pid->kd      = kd;
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	609a      	str	r2, [r3, #8]
	  pid->i_max   = i_max;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	60da      	str	r2, [r3, #12]
	  pid->out_max = out_max;
 8005a98:	69fb      	ldr	r3, [r7, #28]
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	611a      	str	r2, [r3, #16]
	  pid->deadband = deadband;
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	619a      	str	r2, [r3, #24]
	}
 8005aa4:	bf00      	nop
 8005aa6:	3724      	adds	r7, #36	; 0x24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <pid_calc>:
    @param  reference value // 参考值
    @param  feedback value  // 反馈值
  * @retval calculation result
  */
float pid_calc(pid_struct_t *pid, float ref, float fdb)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60f8      	str	r0, [r7, #12]
 8005ab8:	ed87 0a02 	vstr	s0, [r7, #8]
 8005abc:	edc7 0a01 	vstr	s1, [r7, #4]
  pid->ref = ref;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	621a      	str	r2, [r3, #32]
  pid->fdb = fdb;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	625a      	str	r2, [r3, #36]	; 0x24
  pid->err[2] = pid->err[1];
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	631a      	str	r2, [r3, #48]	; 0x30
  pid->err[1] = pid->err[0];
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	62da      	str	r2, [r3, #44]	; 0x2c
  pid->err[0] = pid->ref - pid->fdb;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	ed93 7a08 	vldr	s14, [r3, #32]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	
	if (pid->deadband != 0 && ABS(pid->err[0]) < pid->deadband)               //��errС������ʱ������pid����
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	edd3 7a06 	vldr	s15, [r3, #24]
 8005af8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b00:	d01b      	beq.n	8005b3a <pid_calc+0x8a>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b10:	dd03      	ble.n	8005b1a <pid_calc+0x6a>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b18:	e004      	b.n	8005b24 <pid_calc+0x74>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b20:	eef1 7a67 	vneg.f32	s15, s15
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	ed93 7a06 	vldr	s14, [r3, #24]
 8005b2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b32:	d502      	bpl.n	8005b3a <pid_calc+0x8a>
		return 0;
 8005b34:	f04f 0300 	mov.w	r3, #0
 8005b38:	e133      	b.n	8005da2 <pid_calc+0x2f2>
		
		
	if(pid->pid_mode == POSITION_PID) //λ��ʽ
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f040 808c 	bne.w	8005c5c <pid_calc+0x1ac>
	{
	  pid->p_out  = pid->kp * pid->err[0];
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	ed93 7a00 	vldr	s14, [r3]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  pid->i_out += pid->ki * pid->err[0];
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  pid->d_out  = pid->kd * (pid->err[0] - pid->err[1]);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	ed93 7a02 	vldr	s14, [r3, #8]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b8c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  LIMIT_MIN_MAX(pid->i_out, -pid->i_max, pid->i_max);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ba6:	eef1 7a67 	vneg.f32	s15, s15
 8005baa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb2:	d805      	bhi.n	8005bc0 <pid_calc+0x110>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bba:	eef1 7a67 	vneg.f32	s15, s15
 8005bbe:	e011      	b.n	8005be4 <pid_calc+0x134>
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd4:	db03      	blt.n	8005bde <pid_calc+0x12e>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	edd3 7a03 	vldr	s15, [r3, #12]
 8005bdc:	e002      	b.n	8005be4 <pid_calc+0x134>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	  pid->output = pid->p_out + pid->i_out + pid->d_out;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005bf6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	  LIMIT_MIN_MAX(pid->output, -pid->out_max, pid->out_max);
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c16:	eef1 7a67 	vneg.f32	s15, s15
 8005c1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c22:	d805      	bhi.n	8005c30 <pid_calc+0x180>
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c2a:	eef1 7a67 	vneg.f32	s15, s15
 8005c2e:	e011      	b.n	8005c54 <pid_calc+0x1a4>
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c44:	db03      	blt.n	8005c4e <pid_calc+0x19e>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	edd3 7a04 	vldr	s15, [r3, #16]
 8005c4c:	e002      	b.n	8005c54 <pid_calc+0x1a4>
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 8005c5a:	e0a0      	b.n	8005d9e <pid_calc+0x2ee>
	//  return pid->output;
	}
	else if(pid->pid_mode == DELTA_PID)//����ʽ
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	f040 809c 	bne.w	8005d9e <pid_calc+0x2ee>
	{
	  pid->p_out  = pid->kp * pid->err[0]-pid->kp * pid->err[1];
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	ed93 7a00 	vldr	s14, [r3]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	edd3 6a00 	vldr	s13, [r3]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
	  pid->i_out  = pid->ki * pid->err[0];
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	ed93 7a01 	vldr	s14, [r3, #4]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005c9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
	  pid->d_out  = pid->kd * (pid->err[0] - 2*pid->err[1]+pid->err[2]);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	ed93 7a02 	vldr	s14, [r3, #8]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005cb8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005cbc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8005cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	  LIMIT_MIN_MAX(pid->i_out, -pid->i_max, pid->i_max);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	edd3 7a03 	vldr	s15, [r3, #12]
 8005ce0:	eef1 7a67 	vneg.f32	s15, s15
 8005ce4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cec:	d805      	bhi.n	8005cfa <pid_calc+0x24a>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	edd3 7a03 	vldr	s15, [r3, #12]
 8005cf4:	eef1 7a67 	vneg.f32	s15, s15
 8005cf8:	e011      	b.n	8005d1e <pid_calc+0x26e>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	db03      	blt.n	8005d18 <pid_calc+0x268>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	edd3 7a03 	vldr	s15, [r3, #12]
 8005d16:	e002      	b.n	8005d1e <pid_calc+0x26e>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	  pid->output += (pid->p_out + pid->i_out + pid->d_out);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8005d36:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005d40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	  LIMIT_MIN_MAX(pid->output, -pid->out_max, pid->out_max);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d5a:	eef1 7a67 	vneg.f32	s15, s15
 8005d5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d66:	d805      	bhi.n	8005d74 <pid_calc+0x2c4>
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d6e:	eef1 7a67 	vneg.f32	s15, s15
 8005d72:	e011      	b.n	8005d98 <pid_calc+0x2e8>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d80:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	db03      	blt.n	8005d92 <pid_calc+0x2e2>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8005d90:	e002      	b.n	8005d98 <pid_calc+0x2e8>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	}
	return pid->output;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	ee07 3a90 	vmov	s15, r3
}
 8005da6:	eeb0 0a67 	vmov.f32	s0, s15
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <__libc_init_array>:
 8005db4:	b570      	push	{r4, r5, r6, lr}
 8005db6:	4e0d      	ldr	r6, [pc, #52]	; (8005dec <__libc_init_array+0x38>)
 8005db8:	4c0d      	ldr	r4, [pc, #52]	; (8005df0 <__libc_init_array+0x3c>)
 8005dba:	1ba4      	subs	r4, r4, r6
 8005dbc:	10a4      	asrs	r4, r4, #2
 8005dbe:	2500      	movs	r5, #0
 8005dc0:	42a5      	cmp	r5, r4
 8005dc2:	d109      	bne.n	8005dd8 <__libc_init_array+0x24>
 8005dc4:	4e0b      	ldr	r6, [pc, #44]	; (8005df4 <__libc_init_array+0x40>)
 8005dc6:	4c0c      	ldr	r4, [pc, #48]	; (8005df8 <__libc_init_array+0x44>)
 8005dc8:	f000 f820 	bl	8005e0c <_init>
 8005dcc:	1ba4      	subs	r4, r4, r6
 8005dce:	10a4      	asrs	r4, r4, #2
 8005dd0:	2500      	movs	r5, #0
 8005dd2:	42a5      	cmp	r5, r4
 8005dd4:	d105      	bne.n	8005de2 <__libc_init_array+0x2e>
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
 8005dd8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ddc:	4798      	blx	r3
 8005dde:	3501      	adds	r5, #1
 8005de0:	e7ee      	b.n	8005dc0 <__libc_init_array+0xc>
 8005de2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005de6:	4798      	blx	r3
 8005de8:	3501      	adds	r5, #1
 8005dea:	e7f2      	b.n	8005dd2 <__libc_init_array+0x1e>
 8005dec:	08005e4c 	.word	0x08005e4c
 8005df0:	08005e4c 	.word	0x08005e4c
 8005df4:	08005e4c 	.word	0x08005e4c
 8005df8:	08005e50 	.word	0x08005e50

08005dfc <memset>:
 8005dfc:	4402      	add	r2, r0
 8005dfe:	4603      	mov	r3, r0
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d100      	bne.n	8005e06 <memset+0xa>
 8005e04:	4770      	bx	lr
 8005e06:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0a:	e7f9      	b.n	8005e00 <memset+0x4>

08005e0c <_init>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr

08005e18 <_fini>:
 8005e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e1a:	bf00      	nop
 8005e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1e:	bc08      	pop	{r3}
 8005e20:	469e      	mov	lr, r3
 8005e22:	4770      	bx	lr
